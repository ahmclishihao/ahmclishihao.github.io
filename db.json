{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/404.png","path":"img/404.png","modified":1,"renderable":0},{"_id":"themes/apollo/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"source/img/2016-12-30-自定义View高级知识点(一)/circleView.png","path":"img/2016-12-30-自定义View高级知识点(一)/circleView.png","modified":1,"renderable":0},{"_id":"source/img/2016-12-30-自定义View高级知识点(一)/drawArc.png","path":"img/2016-12-30-自定义View高级知识点(一)/drawArc.png","modified":1,"renderable":0},{"_id":"source/img/2016-12-30-自定义View高级知识点(一)/pieChart.png","path":"img/2016-12-30-自定义View高级知识点(一)/pieChart.png","modified":1,"renderable":0},{"_id":"source/img/2016-12-30-自定义View高级知识点(一)/scale.png","path":"img/2016-12-30-自定义View高级知识点(一)/scale.png","modified":1,"renderable":0},{"_id":"source/img/2016-12-30-自定义View高级知识点(一)/skew.png","path":"img/2016-12-30-自定义View高级知识点(一)/skew.png","modified":1,"renderable":0},{"_id":"source/img/2017-1-17-Jsp的使用/el.jpg","path":"img/2017-1-17-Jsp的使用/el.jpg","modified":1,"renderable":0},{"_id":"source/img/2017-1-17-Jsp的使用/jstl.jpg","path":"img/2017-1-17-Jsp的使用/jstl.jpg","modified":1,"renderable":0},{"_id":"source/img/2017-1-9-Path的基本使用/move&close.png","path":"img/2017-1-9-Path的基本使用/move&close.png","modified":1,"renderable":0},{"_id":"source/img/2017-2-13-Hibernate/full_join_isnull.png","path":"img/2017-2-13-Hibernate/full_join_isnull.png","modified":1,"renderable":0},{"_id":"source/img/2017-2-13-Hibernate/full_outer_join.png","path":"img/2017-2-13-Hibernate/full_outer_join.png","modified":1,"renderable":0},{"_id":"source/img/2017-2-13-Hibernate/inner_join.png","path":"img/2017-2-13-Hibernate/inner_join.png","modified":1,"renderable":0},{"_id":"source/img/2017-2-13-Hibernate/hibernate中属性的对应参数.png","path":"img/2017-2-13-Hibernate/hibernate中属性的对应参数.png","modified":1,"renderable":0},{"_id":"source/img/2017-2-13-Hibernate/left_outer_isnull.png","path":"img/2017-2-13-Hibernate/left_outer_isnull.png","modified":1,"renderable":0},{"_id":"source/img/2017-2-13-Hibernate/left_outer_join.png","path":"img/2017-2-13-Hibernate/left_outer_join.png","modified":1,"renderable":0},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":1,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":1,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":1,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":1,"renderable":1},{"_id":"source/img/2016-12-30-自定义View高级知识点(一)/PorterDuffMode.jpg","path":"img/2016-12-30-自定义View高级知识点(一)/PorterDuffMode.jpg","modified":1,"renderable":0},{"_id":"source/img/2016-12-30-自定义View高级知识点(一)/scale_ratote_translate.png","path":"img/2016-12-30-自定义View高级知识点(一)/scale_ratote_translate.png","modified":1,"renderable":0},{"_id":"source/img/2017-2-4-Struts2入门/jsp下i18n的搜索顺序.png","path":"img/2017-2-4-Struts2入门/jsp下i18n的搜索顺序.png","modified":1,"renderable":0},{"_id":"source/img/2017-2-4-Struts2入门/Struts2结构图.png","path":"img/2017-2-4-Struts2入门/Struts2结构图.png","modified":1,"renderable":0},{"_id":"source/img/2017-2-4-Struts2入门/struts数据结构详解.png","path":"img/2017-2-4-Struts2入门/struts数据结构详解.png","modified":1,"renderable":0},{"_id":"source/img/2017-1-1-自定义View高级知识点(二)/drawBitmapEffect01.gif","path":"img/2017-1-1-自定义View高级知识点(二)/drawBitmapEffect01.gif","modified":1,"renderable":0},{"_id":"source/img/collapselayout.gif","path":"img/collapselayout.gif","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"f930dbcf9118693cfddca64a6e4c0d6f3a7835b7","modified":1514855318446},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1514859853780},{"_id":"themes/apollo/_config.yml","hash":"a5d6c425bb9c67f2c513ac0becb4941c2752f717","modified":1514860600936},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1514859853776},{"_id":"themes/apollo/package.json","hash":"eb1e76ec0b7ed6c6c7b2bd32b4f1e1bbe15800ca","modified":1514859853784},{"_id":"source/_posts/2016-10-28-python入门.md","hash":"a1a80c9ff944ceab53c77753c2609d26f237b64e","modified":1514855318446},{"_id":"source/_posts/2016-11-07-Android调H5.md","hash":"fb4d85b84e7f3714e17b7007c313801216ccef51","modified":1514855318446},{"_id":"source/_posts/2016-11-13-SurfaceView的使用.md","hash":"c3104610ded4c9676b57ecdeed80219f0dbdbeb3","modified":1514855318446},{"_id":"source/_posts/2017-1-1-自定义View高级知识点(二).md","hash":"9676baabcacae2983604f1ba0502e4871c104993","modified":1514855318446},{"_id":"source/_posts/2017-1-17-Jsp的使用.md","hash":"4d24dc18c49cfec172ea950871ff9e23e14923d5","modified":1514855318446},{"_id":"source/_posts/2016-12-24-MD控件的使用.md","hash":"0fc0ebae8265ebde4ff0abd84918ed0955779a32","modified":1514855318446},{"_id":"source/_posts/2016-12-30-自定义View高级知识点(一).md","hash":"b27f192ea1eb1b2b1a9be3de81eeece30f6ac439","modified":1514855318446},{"_id":"source/_posts/2017-1-18-ee中的小知识.md","hash":"5da8e6082bf990e8d93e17b323a06dbf864168db","modified":1514855318446},{"_id":"source/_posts/2017-1-20-事务连接池.md","hash":"cd8c183eaf8afe050819512813458083819a3a0d","modified":1514855318446},{"_id":"source/_posts/2017-1-31-Listener与Filter.md","hash":"d07f14c8f14293d1fcde244f7cfe26384fa6e1df","modified":1514855318446},{"_id":"source/_posts/2017-1-9-Path的基本使用.md","hash":"8079a14e931afa3087d4da221a4f72424be12b64","modified":1514855318446},{"_id":"source/_posts/2017-2-13-Hibernate.md","hash":"effda7c875c8a74b7e9577e33e6e3bdf8e0ace46","modified":1514855318446},{"_id":"source/_posts/2017-2-22-Spring（一）.md","hash":"caf844aabe74b48390482794a224ea1037e205ca","modified":1514855318450},{"_id":"source/_posts/2017-2-4-Struts2入门.md","hash":"10b5e34f20cf45d6cfb961fac4388a9033d47031","modified":1514855318450},{"_id":"source/about/index.md","hash":"3e4a864555ed8700cc1afaeba0e388ef3f6b4572","modified":1514855318450},{"_id":"source/img/404.png","hash":"8b67458729602f091201f5e21ce22c7894726d28","modified":1514855318459},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1514859853708},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1514859853704},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1514859853728},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1514859853724},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1514859853724},{"_id":"themes/apollo/source/favicon.ico","hash":"24c1dce87d976093b1f4e722e017904b4a67c106","modified":1514860572330},{"_id":"source/img/2016-12-30-自定义View高级知识点(一)/circleView.png","hash":"ef0f9e137d70765087a3b5da3255f5375844bb91","modified":1514855318450},{"_id":"source/img/2016-12-30-自定义View高级知识点(一)/drawArc.png","hash":"ff14c190ff8101acf1e327991450062ff88488f5","modified":1514855318450},{"_id":"source/img/2016-12-30-自定义View高级知识点(一)/pieChart.png","hash":"5f3e19416fc443bd50eb1edad96e4868a99df768","modified":1514855318450},{"_id":"source/img/2016-12-30-自定义View高级知识点(一)/scale.png","hash":"efbf2bdd04941c21e0d2d3fe7f695f8be638e92f","modified":1514855318450},{"_id":"source/img/2016-12-30-自定义View高级知识点(一)/skew.png","hash":"0d325540ca78befb5d72325c641a4cf727a4cea8","modified":1514855318450},{"_id":"source/img/2017-1-17-Jsp的使用/el.jpg","hash":"ecb581834e02bc2421c53d60a1beaf288ffa4b67","modified":1514855318455},{"_id":"source/img/2017-1-17-Jsp的使用/jstl.jpg","hash":"e250a7714250fe52a23cb26e4ae31b82d310cb9a","modified":1514855318455},{"_id":"source/img/2017-1-9-Path的基本使用/move&close.png","hash":"ff7bdee3ae7fccbf4704a80aa4d7678d3f57f782","modified":1514855318455},{"_id":"source/img/2017-2-13-Hibernate/full_join_isnull.png","hash":"c0b4ab883abb3de2a25a7cdbe4c6b7ea13b3c9f1","modified":1514855318455},{"_id":"source/img/2017-2-13-Hibernate/full_outer_join.png","hash":"23028d27da69105fa20c6335cea2ac3bb40c767e","modified":1514855318455},{"_id":"source/img/2017-2-13-Hibernate/inner_join.png","hash":"29ef6d294b24cea49aa3bafde068e2d01e5dfcf0","modified":1514855318455},{"_id":"source/img/2017-2-13-Hibernate/hibernate中属性的对应参数.png","hash":"46e928f90e2feab77e8792351c871acbfb20020b","modified":1514855318455},{"_id":"source/img/2017-2-13-Hibernate/left_outer_isnull.png","hash":"7c7514fceec40046d00bc7b9b40b4384418dd1d8","modified":1514855318455},{"_id":"source/img/2017-2-13-Hibernate/left_outer_join.png","hash":"bd9596f2bee337fc95cc61aa30145758d78c6082","modified":1514855318455},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1514859853732},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1514859853720},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"cd9447e9b0ad22213e6a17d9a9b948f9f998f921","modified":1514859853736},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1514859853724},{"_id":"themes/apollo/layout/partial/head.jade","hash":"43d2db73f0247a9a3ed00ecb95b537a872b7201a","modified":1514859853720},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"389cb59b6c15545aa7eab41616aa03e36defe67c","modified":1514860248000},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"8abfe4d839713fb0a2821454cef17926e0655059","modified":1514860077962},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"6bff591ae3d1ff6750f239c4c933ad61f009f36a","modified":1514859853712},{"_id":"themes/apollo/source/css/apollo.css","hash":"3f8454b3476e5ddc6d0a35d1e1c8b949f643da17","modified":1514860709883},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1514859853768},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1514859853768},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1514859853740},{"_id":"source/img/2016-12-30-自定义View高级知识点(一)/PorterDuffMode.jpg","hash":"acd326bce3d7e6d6c050033aa79c251f6a874439","modified":1514855318450},{"_id":"source/img/2016-12-30-自定义View高级知识点(一)/scale_ratote_translate.png","hash":"49662d632a46a3695a7532ff62b720d7f93049ab","modified":1514855318450},{"_id":"source/img/2017-2-4-Struts2入门/jsp下i18n的搜索顺序.png","hash":"1671c2942172dd5f389ba2f58e4e094a6257b11d","modified":1514855318459},{"_id":"source/img/2017-2-4-Struts2入门/Struts2结构图.png","hash":"1201b0b4b10bb2f3fd1cf2c1821bb522fb0375b1","modified":1514855318455},{"_id":"source/img/2017-2-4-Struts2入门/struts数据结构详解.png","hash":"26312b61d138b38e96d6f6f1fc91e05b953ae28f","modified":1514855318459},{"_id":"source/img/2017-1-1-自定义View高级知识点(二)/drawBitmapEffect01.gif","hash":"d3b5413926c1fb52b171aa15a0a35c1b8f5dd119","modified":1514855318455},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1514859853752},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1514859853756},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1514859853748},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1514859853760},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1514859853752},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1514859853764},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"fc5dda52cfbb10e27e2471e03f4606fb3d588225","modified":1514859853760},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1514859853756},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1514859853760},{"_id":"source/img/collapselayout.gif","hash":"8e7efb1d11cf46c4d6b711a5aae5bdbc1f6ec925","modified":1514855318471},{"_id":"public/atom.xml","hash":"27f55516e7c6d06c21dd09bf99625c58f76c2557","modified":1514865690714},{"_id":"public/sitemap.xml","hash":"b0f60706b387d880f1d04e737f6f6810b2f2e51c","modified":1514865690740},{"_id":"public/about/index.html","hash":"4a0ce8a633c526df42dd0d52922e2a5850e67d6b","modified":1514865690763},{"_id":"public/2017/02/13/2017-2-13-Hibernate/index.html","hash":"4d989ef8e87d6f9e9da37d867a66195d1ec63849","modified":1514865690764},{"_id":"public/2017/01/31/2017-1-31-Listener与Filter/index.html","hash":"668e2399571be091dcd40620cca85e8ccd566999","modified":1514865690764},{"_id":"public/2017/01/20/2017-1-20-事务连接池/index.html","hash":"90da4bf311a8d1ce7cde1c42ad6e77edb3fe1a9f","modified":1514865690764},{"_id":"public/2017/01/18/2017-1-18-ee中的小知识/index.html","hash":"4a3b80eaced6cb32cb859b09d038f5e9eec7e530","modified":1514865690764},{"_id":"public/2017/01/09/2017-1-9-Path的基本使用/index.html","hash":"ba82e26e6e87e5171e0907a7ec6e52baf7a81a72","modified":1514865690764},{"_id":"public/2016/11/13/2016-11-13-SurfaceView的使用/index.html","hash":"e2ed7be28d4f2791804191c5dd0b968306d07231","modified":1514865690764},{"_id":"public/2016/11/07/2016-11-07-Android调H5/index.html","hash":"a1fd18c3c572e8a1b16834b04ac9fbe0253c6767","modified":1514865690764},{"_id":"public/2016/10/28/2016-10-28-python入门/index.html","hash":"cbd69e3b19cfe4cb2f9c5634a5c59878487c01eb","modified":1514865690764},{"_id":"public/categories/python/index.html","hash":"925678f0d1f48e61ae886bdf816d9418a2c00862","modified":1514865690765},{"_id":"public/categories/Android/index.html","hash":"c32d4d256f6e3fd3e8da23522574e91ee6637981","modified":1514865690765},{"_id":"public/categories/Java-EE/index.html","hash":"bafd46e3858a0cb92fb897efd966cd23630e1ead","modified":1514865690765},{"_id":"public/categories/JavaEE/index.html","hash":"6ca1384c308bf5b9d5ef811e9b436e4311d8e6a3","modified":1514865690765},{"_id":"public/archives/index.html","hash":"bd79c1a9d8eaabb53ea54eced7f6761cd7c0e3d6","modified":1514865690765},{"_id":"public/archives/2016/index.html","hash":"d5430e8247b1ad595d780e82e914b96be4511698","modified":1514865690765},{"_id":"public/archives/2016/10/index.html","hash":"925678f0d1f48e61ae886bdf816d9418a2c00862","modified":1514865690765},{"_id":"public/archives/2016/11/index.html","hash":"5e4d77728a46af137e2a9d021a19aeb4e88a65bf","modified":1514865690765},{"_id":"public/archives/2016/12/index.html","hash":"93f875326e8f5d54514b0475d0590ad146168d81","modified":1514865690765},{"_id":"public/archives/2017/index.html","hash":"eb0069c1542ed26918dd65db995b54ac2e53e053","modified":1514865690765},{"_id":"public/archives/2017/01/index.html","hash":"5ff0e36462b307cd4dcfd0588ff0b0e34e150003","modified":1514865690766},{"_id":"public/archives/2017/02/index.html","hash":"0d0d4fb2f53fa5fe02a087eee243dc71c9df6b30","modified":1514865690766},{"_id":"public/index.html","hash":"2b4be608dfbb2908d8662f582c9be2fb28e0f82e","modified":1514865690766},{"_id":"public/page/2/index.html","hash":"dc436590d9722e3ee1db974cb82c8f7936f492ee","modified":1514865690766},{"_id":"public/tags/python/index.html","hash":"925678f0d1f48e61ae886bdf816d9418a2c00862","modified":1514865690766},{"_id":"public/tags/Android/index.html","hash":"5e4d77728a46af137e2a9d021a19aeb4e88a65bf","modified":1514865690766},{"_id":"public/tags/WebView/index.html","hash":"159e035fcd53e5c8bd3cb5fbabae7f006dbb4db5","modified":1514865690766},{"_id":"public/tags/Js/index.html","hash":"159e035fcd53e5c8bd3cb5fbabae7f006dbb4db5","modified":1514865690766},{"_id":"public/tags/自定义View/index.html","hash":"a8c57ba98c170b27c4252e0896591c9da04a143a","modified":1514865690766},{"_id":"public/tags/Jsp/index.html","hash":"8fc495ad8f90df131edc82675ccb44046cec23fa","modified":1514865690766},{"_id":"public/tags/android/index.html","hash":"978d36139dd75daab9fc68b25259c65da5dc8e7b","modified":1514865690766},{"_id":"public/tags/Material-Design/index.html","hash":"978d36139dd75daab9fc68b25259c65da5dc8e7b","modified":1514865690766},{"_id":"public/tags/mvc/index.html","hash":"4244ef61395158a0fb71aa9ebd9c71becd938d08","modified":1514865690766},{"_id":"public/tags/SQL/index.html","hash":"11c36b388789cc1746329f93d88e2eef2eb250b9","modified":1514865690766},{"_id":"public/tags/JavaEE/index.html","hash":"5fbd2377d5221b0093fc4906ee4cb709720f24ee","modified":1514865690766},{"_id":"public/tags/Android，自定义View/index.html","hash":"de565f158ae83152988d707d94d37b12639c99d6","modified":1514865690766},{"_id":"public/tags/Hibernate/index.html","hash":"41b78bc62db679faf7b894f4e1000426f0573d55","modified":1514865690766},{"_id":"public/tags/Spring/index.html","hash":"b11714d004c991ae2574330106dcac8c023019ef","modified":1514865690767},{"_id":"public/tags/Struts2/index.html","hash":"6ca1384c308bf5b9d5ef811e9b436e4311d8e6a3","modified":1514865690767},{"_id":"public/2017/02/22/2017-2-22-Spring（一）/index.html","hash":"c84829a730b35452ddcee1bc63e3e9888ef79a6b","modified":1514865690767},{"_id":"public/2017/02/04/2017-2-4-Struts2入门/index.html","hash":"b8b9456a3427a29605de1db7d503341477c8435d","modified":1514865690767},{"_id":"public/2017/01/17/2017-1-17-Jsp的使用/index.html","hash":"e4da8bda1a4bd63f70195ee683ead184b7c489b9","modified":1514865690767},{"_id":"public/2017/01/01/2017-1-1-自定义View高级知识点(二)/index.html","hash":"e702ffd14635c3277d467702a53453b4cb9f0fff","modified":1514865690767},{"_id":"public/2016/12/30/2016-12-30-自定义View高级知识点(一)/index.html","hash":"7b6b97dea9f1c7635580969ef6e7a5004e686761","modified":1514865690769},{"_id":"public/2016/12/24/2016-12-24-MD控件的使用/index.html","hash":"1a7022ef13ac148208c4686af9593a9bc0984146","modified":1514865690770},{"_id":"public/CNAME","hash":"f930dbcf9118693cfddca64a6e4c0d6f3a7835b7","modified":1514865690778},{"_id":"public/img/404.png","hash":"8b67458729602f091201f5e21ce22c7894726d28","modified":1514865690778},{"_id":"public/favicon.ico","hash":"24c1dce87d976093b1f4e722e017904b4a67c106","modified":1514865690778},{"_id":"public/img/2016-12-30-自定义View高级知识点(一)/drawArc.png","hash":"ff14c190ff8101acf1e327991450062ff88488f5","modified":1514865690778},{"_id":"public/img/2016-12-30-自定义View高级知识点(一)/circleView.png","hash":"ef0f9e137d70765087a3b5da3255f5375844bb91","modified":1514865690778},{"_id":"public/img/2016-12-30-自定义View高级知识点(一)/pieChart.png","hash":"5f3e19416fc443bd50eb1edad96e4868a99df768","modified":1514865690778},{"_id":"public/img/2016-12-30-自定义View高级知识点(一)/skew.png","hash":"0d325540ca78befb5d72325c641a4cf727a4cea8","modified":1514865690778},{"_id":"public/img/2016-12-30-自定义View高级知识点(一)/scale.png","hash":"efbf2bdd04941c21e0d2d3fe7f695f8be638e92f","modified":1514865690778},{"_id":"public/img/2017-1-17-Jsp的使用/el.jpg","hash":"ecb581834e02bc2421c53d60a1beaf288ffa4b67","modified":1514865690778},{"_id":"public/img/2017-1-17-Jsp的使用/jstl.jpg","hash":"e250a7714250fe52a23cb26e4ae31b82d310cb9a","modified":1514865690778},{"_id":"public/img/2017-2-13-Hibernate/full_join_isnull.png","hash":"c0b4ab883abb3de2a25a7cdbe4c6b7ea13b3c9f1","modified":1514865690778},{"_id":"public/img/2017-1-9-Path的基本使用/move&close.png","hash":"ff7bdee3ae7fccbf4704a80aa4d7678d3f57f782","modified":1514865690778},{"_id":"public/img/2017-2-13-Hibernate/inner_join.png","hash":"29ef6d294b24cea49aa3bafde068e2d01e5dfcf0","modified":1514865690778},{"_id":"public/img/2017-2-13-Hibernate/full_outer_join.png","hash":"23028d27da69105fa20c6335cea2ac3bb40c767e","modified":1514865690778},{"_id":"public/img/2017-2-13-Hibernate/left_outer_isnull.png","hash":"7c7514fceec40046d00bc7b9b40b4384418dd1d8","modified":1514865690778},{"_id":"public/img/2017-2-13-Hibernate/left_outer_join.png","hash":"bd9596f2bee337fc95cc61aa30145758d78c6082","modified":1514865690778},{"_id":"public/img/2017-2-13-Hibernate/hibernate中属性的对应参数.png","hash":"46e928f90e2feab77e8792351c871acbfb20020b","modified":1514865690778},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1514865690778},{"_id":"public/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1514865690778},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1514865690779},{"_id":"public/img/2016-12-30-自定义View高级知识点(一)/PorterDuffMode.jpg","hash":"acd326bce3d7e6d6c050033aa79c251f6a874439","modified":1514865690785},{"_id":"public/img/2016-12-30-自定义View高级知识点(一)/scale_ratote_translate.png","hash":"49662d632a46a3695a7532ff62b720d7f93049ab","modified":1514865690787},{"_id":"public/img/2017-2-4-Struts2入门/jsp下i18n的搜索顺序.png","hash":"1671c2942172dd5f389ba2f58e4e094a6257b11d","modified":1514865690787},{"_id":"public/img/2017-2-4-Struts2入门/Struts2结构图.png","hash":"1201b0b4b10bb2f3fd1cf2c1821bb522fb0375b1","modified":1514865690787},{"_id":"public/img/2017-2-4-Struts2入门/struts数据结构详解.png","hash":"26312b61d138b38e96d6f6f1fc91e05b953ae28f","modified":1514865690787},{"_id":"public/css/apollo.css","hash":"3f8454b3476e5ddc6d0a35d1e1c8b949f643da17","modified":1514865690792},{"_id":"public/img/2017-1-1-自定义View高级知识点(二)/drawBitmapEffect01.gif","hash":"d3b5413926c1fb52b171aa15a0a35c1b8f5dd119","modified":1514865690792},{"_id":"public/img/collapselayout.gif","hash":"8e7efb1d11cf46c4d6b711a5aae5bdbc1f6ec925","modified":1514865690827}],"Category":[{"name":"python","_id":"cjbx3x34o0003izij7vtd05cw"},{"name":"Android","_id":"cjbx3x3500008izijrxpa99li"},{"name":"Java EE","_id":"cjbx3x35h000pizij808rj877"},{"name":"JavaEE","_id":"cjbx3x35t001dizij9o35boi0"}],"Data":[],"Page":[{"title":"About","date":"2017-12-31T16:00:00.000Z","_content":"\n``` java\n/**\n * 努力做一只不安静的码农\n */\npublic class OOPLife{\n\n    public static JAVA java = new JAVA();\n\n    public static Android android = new Android();\n\n    public static Linux deepin = new Linux();\n\n    public static Docker docker = new Docker();\n\n    static {\n        boolean 活着 = true;\n\n        while(活着){\n            System.out.println(\"再码一块砖...\");\n            System.out.println(\"愿天堂没有代码...\");\n        }\n    }\n\n}\n\n```","source":"about/index.md","raw":"---\ntitle: About\ndate: 2018-01-01\n---\n\n``` java\n/**\n * 努力做一只不安静的码农\n */\npublic class OOPLife{\n\n    public static JAVA java = new JAVA();\n\n    public static Android android = new Android();\n\n    public static Linux deepin = new Linux();\n\n    public static Docker docker = new Docker();\n\n    static {\n        boolean 活着 = true;\n\n        while(活着){\n            System.out.println(\"再码一块砖...\");\n            System.out.println(\"愿天堂没有代码...\");\n        }\n    }\n\n}\n\n```","updated":"2018-01-02T01:08:38.450Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjbx3x34i0001izijsuzlo6j1","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 努力做一只不安静的码农</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOPLife</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> JAVA java = <span class=\"keyword\">new</span> JAVA();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Android android = <span class=\"keyword\">new</span> Android();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Linux deepin = <span class=\"keyword\">new</span> Linux();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Docker docker = <span class=\"keyword\">new</span> Docker();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> 活着 = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(活着)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"再码一块砖...\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"愿天堂没有代码...\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 努力做一只不安静的码农</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOPLife</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> JAVA java = <span class=\"keyword\">new</span> JAVA();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Android android = <span class=\"keyword\">new</span> Android();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Linux deepin = <span class=\"keyword\">new</span> Linux();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Docker docker = <span class=\"keyword\">new</span> Docker();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> 活着 = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(活着)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"再码一块砖...\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"愿天堂没有代码...\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"Post":[{"layout":"post","title":"python 入门基本点","date":"2016-10-28T07:18:18.000Z","_content":"\n一些Python的基本用法，目的是看懂它~~\n\n<!-- more -->\n\n## Hello World\nPython文件中输出中文以及中文注释，需要添加\n```python\n\t# -*-coding:utf-8-*-\n\t# 你必须声明文件的编码，方可输出中文以及中文的注释\n\t\n\tprint 'hello world'\n\t\n\tprint 'i\\'m li'\n\t\n\tprint \"i'm shi\"\n\t\n\tprint \"I come from \\n\\\n\tChina\"  # Write as this syntax,if you want change line\n\t\n\tprint \"\"\"I'm li shi hao.\n\tYou see!I'm Chinese!\"\"\"  # This will get a new line\n\t\n\tprint \"you can compare next statement different\"\n\tprint \"1\\n2\\n3\\n4\\t5\\t6\\t\"\n\tprint r\"1\\n2\\n3\\n4\\t5\\t6\\t\"\n\t\n\tprint u\"厉害了 word中国！\"\n```\n\n注意上面每一个print就自动换行一次\n\n## 不同的运算符\n运算符\n**幂运算\n\n2**2 = 4 \n\n/ 除法运算(带小数) //除法取整 %取余\n\nand 逻辑与 not逻辑非 or逻辑或 同样都是短路的\n\n~x 翻转x 即-(x+1)\n\n## 严格的缩进控制代码的区块\n\npython中通过 : 来表明下面将是程序块\n通过制表符的间隔对齐范围，表示程序块范围\n\n例如\n\n```python\n\twhile True:\n\t\tprint '123'\n\t\tprint '321'\n\t#看到上面的部分代表while的程序块，下面部分代表这while以外的部分\n\tprint '000'\n```\n\n## 定义方法\ndef关键字表示定义一个方法\npythond也有类似三元表达式 true_part if condition else false_part\n```python\n\tdef max_num(a, b):\n\t    print \"最大的是：\", a if a > b else b  \n```\n\n## 方法中默认参数\n如下方法的参数中，带有默认值的参数只能放在其他参数的后面才可以使用,\n原因是：当你在调用方法是第一个参数往往是赋值给第一个形参的\n\n```python\n\tdef method(arg0,arg1=1):\n\t\tprint arg0*arg1\n```\n\n## from xxx import xxx\n\n从某个module中导入参数，这样就不必每次都写xxx.yyy\n\n例如：\n```python\n\timport sys\n\t\n\tfrom sys import argv\n```\n那么以后的argv就可以直接使用，但这将占用一个变量名\n\n## 主modul名称\n```python\n\t# coding:utf-8\n\t# __name__是每一个module在执行是的名称\n\t# __main__是主线程的名称\n\tif __name__ == '__main__':\n\t    print \"I called by myself\"\n\telse:\n\t    print \"who called me?\", __name__\n\t\n\t\n\tdef moduleM():\n\t    print \"Hi! I'm module\"\n\t\n\t\n\tname = \"using\"\n```\n## dir查看命令\ndir()命令在命令行中使用，会打印对应module中的属性列表,方法列表\ndir(xxx)可以打印指定module的信息\n```python\n## del删除命令\n\n\tdef method():\n\t    global x\n\t    print x\n\t    del x\n\t    # del method 不能在方法中删除方法\n\t\n\tx = \"test del\"\n\tmethod()\n\t\n\t# del method # 可以删除变量这样这个变量，他也可以删除一个方法就像没有存在过一样\n\t# method() # 该句将出错因为x已经被删除了\n```\n","source":"_posts/2016-10-28-python入门.md","raw":"---\nlayout: post\ntitle: \"python 入门基本点\"\ndate: 2016-10-28 15:18:18\ncategories: python\ntags: [python]\n---\n\n一些Python的基本用法，目的是看懂它~~\n\n<!-- more -->\n\n## Hello World\nPython文件中输出中文以及中文注释，需要添加\n```python\n\t# -*-coding:utf-8-*-\n\t# 你必须声明文件的编码，方可输出中文以及中文的注释\n\t\n\tprint 'hello world'\n\t\n\tprint 'i\\'m li'\n\t\n\tprint \"i'm shi\"\n\t\n\tprint \"I come from \\n\\\n\tChina\"  # Write as this syntax,if you want change line\n\t\n\tprint \"\"\"I'm li shi hao.\n\tYou see!I'm Chinese!\"\"\"  # This will get a new line\n\t\n\tprint \"you can compare next statement different\"\n\tprint \"1\\n2\\n3\\n4\\t5\\t6\\t\"\n\tprint r\"1\\n2\\n3\\n4\\t5\\t6\\t\"\n\t\n\tprint u\"厉害了 word中国！\"\n```\n\n注意上面每一个print就自动换行一次\n\n## 不同的运算符\n运算符\n**幂运算\n\n2**2 = 4 \n\n/ 除法运算(带小数) //除法取整 %取余\n\nand 逻辑与 not逻辑非 or逻辑或 同样都是短路的\n\n~x 翻转x 即-(x+1)\n\n## 严格的缩进控制代码的区块\n\npython中通过 : 来表明下面将是程序块\n通过制表符的间隔对齐范围，表示程序块范围\n\n例如\n\n```python\n\twhile True:\n\t\tprint '123'\n\t\tprint '321'\n\t#看到上面的部分代表while的程序块，下面部分代表这while以外的部分\n\tprint '000'\n```\n\n## 定义方法\ndef关键字表示定义一个方法\npythond也有类似三元表达式 true_part if condition else false_part\n```python\n\tdef max_num(a, b):\n\t    print \"最大的是：\", a if a > b else b  \n```\n\n## 方法中默认参数\n如下方法的参数中，带有默认值的参数只能放在其他参数的后面才可以使用,\n原因是：当你在调用方法是第一个参数往往是赋值给第一个形参的\n\n```python\n\tdef method(arg0,arg1=1):\n\t\tprint arg0*arg1\n```\n\n## from xxx import xxx\n\n从某个module中导入参数，这样就不必每次都写xxx.yyy\n\n例如：\n```python\n\timport sys\n\t\n\tfrom sys import argv\n```\n那么以后的argv就可以直接使用，但这将占用一个变量名\n\n## 主modul名称\n```python\n\t# coding:utf-8\n\t# __name__是每一个module在执行是的名称\n\t# __main__是主线程的名称\n\tif __name__ == '__main__':\n\t    print \"I called by myself\"\n\telse:\n\t    print \"who called me?\", __name__\n\t\n\t\n\tdef moduleM():\n\t    print \"Hi! I'm module\"\n\t\n\t\n\tname = \"using\"\n```\n## dir查看命令\ndir()命令在命令行中使用，会打印对应module中的属性列表,方法列表\ndir(xxx)可以打印指定module的信息\n```python\n## del删除命令\n\n\tdef method():\n\t    global x\n\t    print x\n\t    del x\n\t    # del method 不能在方法中删除方法\n\t\n\tx = \"test del\"\n\tmethod()\n\t\n\t# del method # 可以删除变量这样这个变量，他也可以删除一个方法就像没有存在过一样\n\t# method() # 该句将出错因为x已经被删除了\n```\n","slug":"2016-10-28-python入门","published":1,"updated":"2018-01-02T01:08:38.446Z","comments":1,"photos":[],"link":"","_id":"cjbx3x34c0000izij9ss4sdon","content":"<p>一些Python的基本用法，目的是看懂它~~</p>\n<a id=\"more\"></a>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><p>Python文件中输出中文以及中文注释，需要添加<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*-coding:utf-8-*-</span></span><br><span class=\"line\"><span class=\"comment\"># 你必须声明文件的编码，方可输出中文以及中文的注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'hello world'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'i\\'m li'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"i'm shi\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"I come from \\n\\</span></span><br><span class=\"line\"><span class=\"string\">China\"</span>  <span class=\"comment\"># Write as this syntax,if you want change line</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"\"\"I'm li shi hao.</span></span><br><span class=\"line\"><span class=\"string\">You see!I'm Chinese!\"\"\"</span>  <span class=\"comment\"># This will get a new line</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"you can compare next statement different\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"1\\n2\\n3\\n4\\t5\\t6\\t\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">r\"1\\n2\\n3\\n4\\t5\\t6\\t\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">u\"厉害了 word中国！\"</span></span><br></pre></td></tr></table></figure></p>\n<p>注意上面每一个print就自动换行一次</p>\n<h2 id=\"不同的运算符\"><a href=\"#不同的运算符\" class=\"headerlink\" title=\"不同的运算符\"></a>不同的运算符</h2><p>运算符<br>**幂运算</p>\n<p>2**2 = 4 </p>\n<p>/ 除法运算(带小数) //除法取整 %取余</p>\n<p>and 逻辑与 not逻辑非 or逻辑或 同样都是短路的</p>\n<p>~x 翻转x 即-(x+1)</p>\n<h2 id=\"严格的缩进控制代码的区块\"><a href=\"#严格的缩进控制代码的区块\" class=\"headerlink\" title=\"严格的缩进控制代码的区块\"></a>严格的缩进控制代码的区块</h2><p>python中通过 : 来表明下面将是程序块<br>通过制表符的间隔对齐范围，表示程序块范围</p>\n<p>例如</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'123'</span></span><br><span class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'321'</span></span><br><span class=\"line\"><span class=\"comment\">#看到上面的部分代表while的程序块，下面部分代表这while以外的部分</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'000'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"定义方法\"><a href=\"#定义方法\" class=\"headerlink\" title=\"定义方法\"></a>定义方法</h2><p>def关键字表示定义一个方法<br>pythond也有类似三元表达式 true_part if condition else false_part<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_num</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"最大的是：\"</span>, a <span class=\"keyword\">if</span> a &gt; b <span class=\"keyword\">else</span> b</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法中默认参数\"><a href=\"#方法中默认参数\" class=\"headerlink\" title=\"方法中默认参数\"></a>方法中默认参数</h2><p>如下方法的参数中，带有默认值的参数只能放在其他参数的后面才可以使用,<br>原因是：当你在调用方法是第一个参数往往是赋值给第一个形参的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method</span><span class=\"params\">(arg0,arg1=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">print</span> arg0*arg1</span><br></pre></td></tr></table></figure>\n<h2 id=\"from-xxx-import-xxx\"><a href=\"#from-xxx-import-xxx\" class=\"headerlink\" title=\"from xxx import xxx\"></a>from xxx import xxx</h2><p>从某个module中导入参数，这样就不必每次都写xxx.yyy</p>\n<p>例如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sys <span class=\"keyword\">import</span> argv</span><br></pre></td></tr></table></figure></p>\n<p>那么以后的argv就可以直接使用，但这将占用一个变量名</p>\n<h2 id=\"主modul名称\"><a href=\"#主modul名称\" class=\"headerlink\" title=\"主modul名称\"></a>主modul名称</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\"># __name__是每一个module在执行是的名称</span></span><br><span class=\"line\"><span class=\"comment\"># __main__是主线程的名称</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"I called by myself\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"who called me?\"</span>, __name__</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">moduleM</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"Hi! I'm module\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">\"using\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"dir查看命令\"><a href=\"#dir查看命令\" class=\"headerlink\" title=\"dir查看命令\"></a>dir查看命令</h2><p>dir()命令在命令行中使用，会打印对应module中的属性列表,方法列表<br>dir(xxx)可以打印指定module的信息<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## del删除命令</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t    <span class=\"keyword\">global</span> x</span><br><span class=\"line\">\t    <span class=\"keyword\">print</span> x</span><br><span class=\"line\">\t    <span class=\"keyword\">del</span> x</span><br><span class=\"line\">\t    <span class=\"comment\"># del method 不能在方法中删除方法</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tx = <span class=\"string\">\"test del\"</span></span><br><span class=\"line\">\tmethod()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># del method # 可以删除变量这样这个变量，他也可以删除一个方法就像没有存在过一样</span></span><br><span class=\"line\">\t<span class=\"comment\"># method() # 该句将出错因为x已经被删除了</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>一些Python的基本用法，目的是看懂它~~</p>","more":"<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><p>Python文件中输出中文以及中文注释，需要添加<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*-coding:utf-8-*-</span></span><br><span class=\"line\"><span class=\"comment\"># 你必须声明文件的编码，方可输出中文以及中文的注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'hello world'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'i\\'m li'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"i'm shi\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"I come from \\n\\</span></span><br><span class=\"line\"><span class=\"string\">China\"</span>  <span class=\"comment\"># Write as this syntax,if you want change line</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"\"\"I'm li shi hao.</span></span><br><span class=\"line\"><span class=\"string\">You see!I'm Chinese!\"\"\"</span>  <span class=\"comment\"># This will get a new line</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"you can compare next statement different\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"1\\n2\\n3\\n4\\t5\\t6\\t\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">r\"1\\n2\\n3\\n4\\t5\\t6\\t\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">u\"厉害了 word中国！\"</span></span><br></pre></td></tr></table></figure></p>\n<p>注意上面每一个print就自动换行一次</p>\n<h2 id=\"不同的运算符\"><a href=\"#不同的运算符\" class=\"headerlink\" title=\"不同的运算符\"></a>不同的运算符</h2><p>运算符<br>**幂运算</p>\n<p>2**2 = 4 </p>\n<p>/ 除法运算(带小数) //除法取整 %取余</p>\n<p>and 逻辑与 not逻辑非 or逻辑或 同样都是短路的</p>\n<p>~x 翻转x 即-(x+1)</p>\n<h2 id=\"严格的缩进控制代码的区块\"><a href=\"#严格的缩进控制代码的区块\" class=\"headerlink\" title=\"严格的缩进控制代码的区块\"></a>严格的缩进控制代码的区块</h2><p>python中通过 : 来表明下面将是程序块<br>通过制表符的间隔对齐范围，表示程序块范围</p>\n<p>例如</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'123'</span></span><br><span class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'321'</span></span><br><span class=\"line\"><span class=\"comment\">#看到上面的部分代表while的程序块，下面部分代表这while以外的部分</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'000'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"定义方法\"><a href=\"#定义方法\" class=\"headerlink\" title=\"定义方法\"></a>定义方法</h2><p>def关键字表示定义一个方法<br>pythond也有类似三元表达式 true_part if condition else false_part<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_num</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"最大的是：\"</span>, a <span class=\"keyword\">if</span> a &gt; b <span class=\"keyword\">else</span> b</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法中默认参数\"><a href=\"#方法中默认参数\" class=\"headerlink\" title=\"方法中默认参数\"></a>方法中默认参数</h2><p>如下方法的参数中，带有默认值的参数只能放在其他参数的后面才可以使用,<br>原因是：当你在调用方法是第一个参数往往是赋值给第一个形参的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method</span><span class=\"params\">(arg0,arg1=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">print</span> arg0*arg1</span><br></pre></td></tr></table></figure>\n<h2 id=\"from-xxx-import-xxx\"><a href=\"#from-xxx-import-xxx\" class=\"headerlink\" title=\"from xxx import xxx\"></a>from xxx import xxx</h2><p>从某个module中导入参数，这样就不必每次都写xxx.yyy</p>\n<p>例如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sys <span class=\"keyword\">import</span> argv</span><br></pre></td></tr></table></figure></p>\n<p>那么以后的argv就可以直接使用，但这将占用一个变量名</p>\n<h2 id=\"主modul名称\"><a href=\"#主modul名称\" class=\"headerlink\" title=\"主modul名称\"></a>主modul名称</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\"># __name__是每一个module在执行是的名称</span></span><br><span class=\"line\"><span class=\"comment\"># __main__是主线程的名称</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"I called by myself\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"who called me?\"</span>, __name__</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">moduleM</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"Hi! I'm module\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">\"using\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"dir查看命令\"><a href=\"#dir查看命令\" class=\"headerlink\" title=\"dir查看命令\"></a>dir查看命令</h2><p>dir()命令在命令行中使用，会打印对应module中的属性列表,方法列表<br>dir(xxx)可以打印指定module的信息<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## del删除命令</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t    <span class=\"keyword\">global</span> x</span><br><span class=\"line\">\t    <span class=\"keyword\">print</span> x</span><br><span class=\"line\">\t    <span class=\"keyword\">del</span> x</span><br><span class=\"line\">\t    <span class=\"comment\"># del method 不能在方法中删除方法</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tx = <span class=\"string\">\"test del\"</span></span><br><span class=\"line\">\tmethod()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># del method # 可以删除变量这样这个变量，他也可以删除一个方法就像没有存在过一样</span></span><br><span class=\"line\">\t<span class=\"comment\"># method() # 该句将出错因为x已经被删除了</span></span><br></pre></td></tr></table></figure></p>"},{"layout":"post","title":"Android调H5","date":"2016-11-06T18:21:05.000Z","_content":"\n如何使用Android中的WebView与JavaScript交互？\n\n<!-- more -->\n\n# Android调H5\n\n1.WebView\n\n> 可以加载链接，也可以加载本地网页\n> 加载assets文件夹中的网页：loadUrl(\"file:///android_asset/name\")\n\n2.java调js\n\n> 注意参数加‘’\n> \"javascript:jsName('\"+params+\"')\"-->这是js的一种写法\n> webView.loadUrl(\"javascript:jsName('\"+params+\"')\");\n\n3.js调java\n\n> 1.android\n> 声明js对应接口，webWiew.addJavascriptInterface(new Class(), \"字段名\")\n> 字段对应的android类中方法名需要添加注解@JavascriptInterface\n> 2.js\n> window.字段名.方法名\n\n# ScrollView结合ListView使用\n\t\n结合使用会造成listview只显示一行，因为listview需要重新测量高度，两种方法进行测量。\n\n1、重新测量每一项高度+divider的总高度最后得到精确值，\n2、重写onMeasure方法，直接设置高度测量规则为，\n\tMeasureSpec.makeMeasureSpec(Integer.MAX_VALUE>>2,AT_MOST);\n即给一个非常大的值让其自己适配\n","source":"_posts/2016-11-07-Android调H5.md","raw":"---\nlayout: post\ntitle: \"Android调H5\"\ndate: 2016-11-07 02:21:05\ncategories: Android\ntags: [Android,WebView,Js]\n---\n\n如何使用Android中的WebView与JavaScript交互？\n\n<!-- more -->\n\n# Android调H5\n\n1.WebView\n\n> 可以加载链接，也可以加载本地网页\n> 加载assets文件夹中的网页：loadUrl(\"file:///android_asset/name\")\n\n2.java调js\n\n> 注意参数加‘’\n> \"javascript:jsName('\"+params+\"')\"-->这是js的一种写法\n> webView.loadUrl(\"javascript:jsName('\"+params+\"')\");\n\n3.js调java\n\n> 1.android\n> 声明js对应接口，webWiew.addJavascriptInterface(new Class(), \"字段名\")\n> 字段对应的android类中方法名需要添加注解@JavascriptInterface\n> 2.js\n> window.字段名.方法名\n\n# ScrollView结合ListView使用\n\t\n结合使用会造成listview只显示一行，因为listview需要重新测量高度，两种方法进行测量。\n\n1、重新测量每一项高度+divider的总高度最后得到精确值，\n2、重写onMeasure方法，直接设置高度测量规则为，\n\tMeasureSpec.makeMeasureSpec(Integer.MAX_VALUE>>2,AT_MOST);\n即给一个非常大的值让其自己适配\n","slug":"2016-11-07-Android调H5","published":1,"updated":"2018-01-02T01:08:38.446Z","comments":1,"photos":[],"link":"","_id":"cjbx3x34m0002izij2zwajd72","content":"<p>如何使用Android中的WebView与JavaScript交互？</p>\n<a id=\"more\"></a>\n<h1 id=\"Android调H5\"><a href=\"#Android调H5\" class=\"headerlink\" title=\"Android调H5\"></a>Android调H5</h1><p>1.WebView</p>\n<blockquote>\n<p>可以加载链接，也可以加载本地网页<br>加载assets文件夹中的网页：loadUrl(“file:///android_asset/name”)</p>\n</blockquote>\n<p>2.java调js</p>\n<blockquote>\n<p>注意参数加‘’<br>“javascript:jsName(‘“+params+”‘)”–&gt;这是js的一种写法<br>webView.loadUrl(“javascript:jsName(‘“+params+”‘)”);</p>\n</blockquote>\n<p>3.js调java</p>\n<blockquote>\n<p>1.android<br>声明js对应接口，webWiew.addJavascriptInterface(new Class(), “字段名”)<br>字段对应的android类中方法名需要添加注解@JavascriptInterface<br>2.js<br>window.字段名.方法名</p>\n</blockquote>\n<h1 id=\"ScrollView结合ListView使用\"><a href=\"#ScrollView结合ListView使用\" class=\"headerlink\" title=\"ScrollView结合ListView使用\"></a>ScrollView结合ListView使用</h1><p>结合使用会造成listview只显示一行，因为listview需要重新测量高度，两种方法进行测量。</p>\n<p>1、重新测量每一项高度+divider的总高度最后得到精确值，<br>2、重写onMeasure方法，直接设置高度测量规则为，<br>    MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE&gt;&gt;2,AT_MOST);<br>即给一个非常大的值让其自己适配</p>\n","site":{"data":{}},"excerpt":"<p>如何使用Android中的WebView与JavaScript交互？</p>","more":"<h1 id=\"Android调H5\"><a href=\"#Android调H5\" class=\"headerlink\" title=\"Android调H5\"></a>Android调H5</h1><p>1.WebView</p>\n<blockquote>\n<p>可以加载链接，也可以加载本地网页<br>加载assets文件夹中的网页：loadUrl(“file:///android_asset/name”)</p>\n</blockquote>\n<p>2.java调js</p>\n<blockquote>\n<p>注意参数加‘’<br>“javascript:jsName(‘“+params+”‘)”–&gt;这是js的一种写法<br>webView.loadUrl(“javascript:jsName(‘“+params+”‘)”);</p>\n</blockquote>\n<p>3.js调java</p>\n<blockquote>\n<p>1.android<br>声明js对应接口，webWiew.addJavascriptInterface(new Class(), “字段名”)<br>字段对应的android类中方法名需要添加注解@JavascriptInterface<br>2.js<br>window.字段名.方法名</p>\n</blockquote>\n<h1 id=\"ScrollView结合ListView使用\"><a href=\"#ScrollView结合ListView使用\" class=\"headerlink\" title=\"ScrollView结合ListView使用\"></a>ScrollView结合ListView使用</h1><p>结合使用会造成listview只显示一行，因为listview需要重新测量高度，两种方法进行测量。</p>\n<p>1、重新测量每一项高度+divider的总高度最后得到精确值，<br>2、重写onMeasure方法，直接设置高度测量规则为，<br>    MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE&gt;&gt;2,AT_MOST);<br>即给一个非常大的值让其自己适配</p>"},{"layout":"post","title":"SurfaceView的使用","date":"2016-11-12T18:12:08.000Z","_content":"\nSurfaceView的基本逻辑\n<!-- more -->\n\n## SurfaceView\n\n主要的类：\n> SurfaceView 展示内容的地方\n> \n> ↓\tgetHolder()\n> \n> SurfaceHolder 展示的内容\n> \n> ↓\taddCallback() → getSurface() 获取 surface\n> \n> SurfaceHolder.Callback\n> \n> ↓\t线程需要在surfaceCreate时创建，surfaceDestroy停止\n> \n> Thread 持续展示内容的工人\n\n## Surface\n\n> lockCanvas 锁定画布 保证线程安全\n> \n> ↓ 开启线程\n> \n> 绘制界面 \n> \n> unlockCanvasAndPost 解锁画布\n> \n> ↓ 关闭线程\n\n## 绘制背景\n\n`每次一个对象重新绘制位置的时候都会造成叠加的效果`，\n如何解决：是通过不断重新绘制背景来覆盖原来的图片\n\n## Rect 矩形类\n\nandroid提供的范围类，可以检测是否包含某点\n\n## Cocos2dx\nCCGLSurfaceView surfaceview类\n\nCCDirector 导演类 （单例的）CCDirector.sharedDirector\n\nCCScene 场景类 CCScene.node() 展示节点的根节点\n\nCCLayer 图层类 CCSense.addChild() 添加图层\n\nCCSprite 精灵类\n\n默认图片放在asset中\n\n坐标都是左下角开始的正常坐标系，Sprite的默认锚点在中间点\n默认从锚点绘制\n\ndirector可以和activity生命周期绑定，手动绑定(在各个周期内绑定)\n\n## layer处理触摸事件 \n\n> 都是在子线程中进行的，不能进行UI操作，当然surfaceView可以\n\nlayer事件中开启\nsetIsTouchEnabled(true);触摸事件开关\n\nccTOuchedBegan(event);按下事件\n\nandorid坐标系的点转换为cocos中的点converTouchToNodeSpace\n\n## CCNode\n\n获取单元的范围:CGRect rect = ccNode.getBoundingBox();\n\n获取单元的大小：CGSize size = ccNode.getBoundingBox().size;\n\n将Android的MotionEvent转换成 Cocos2d上的点\nCGPoint cgPoint = convertTouchToNodeSpace(event);\n\n\n## CCAction\n\n动作\n\nCCSequence `串行动作` CCSequence.action(xx,xx);\nCCSpawn `并行动作` \n\nCCRepeatForever 重复的动作，用于包装Action\n\nCCEaseIn 具备加速的动作，用于包装Action\n\nCCLabel 专门显示文字的sprite\n\nccColor3B 颜色渐变的action cc3(r,g,b);\n\nxxxBy 事件都重写了reserver 而 xxxTo都没有重写reserver会报异常。例如：CCTintTo CCRotateTo CCJumpTo","source":"_posts/2016-11-13-SurfaceView的使用.md","raw":"---\nlayout: post\ntitle: \"SurfaceView的使用\"\ndate: 2016-11-13 02:12:08\ncategories: Android\ntags: [Android]\n---\n\nSurfaceView的基本逻辑\n<!-- more -->\n\n## SurfaceView\n\n主要的类：\n> SurfaceView 展示内容的地方\n> \n> ↓\tgetHolder()\n> \n> SurfaceHolder 展示的内容\n> \n> ↓\taddCallback() → getSurface() 获取 surface\n> \n> SurfaceHolder.Callback\n> \n> ↓\t线程需要在surfaceCreate时创建，surfaceDestroy停止\n> \n> Thread 持续展示内容的工人\n\n## Surface\n\n> lockCanvas 锁定画布 保证线程安全\n> \n> ↓ 开启线程\n> \n> 绘制界面 \n> \n> unlockCanvasAndPost 解锁画布\n> \n> ↓ 关闭线程\n\n## 绘制背景\n\n`每次一个对象重新绘制位置的时候都会造成叠加的效果`，\n如何解决：是通过不断重新绘制背景来覆盖原来的图片\n\n## Rect 矩形类\n\nandroid提供的范围类，可以检测是否包含某点\n\n## Cocos2dx\nCCGLSurfaceView surfaceview类\n\nCCDirector 导演类 （单例的）CCDirector.sharedDirector\n\nCCScene 场景类 CCScene.node() 展示节点的根节点\n\nCCLayer 图层类 CCSense.addChild() 添加图层\n\nCCSprite 精灵类\n\n默认图片放在asset中\n\n坐标都是左下角开始的正常坐标系，Sprite的默认锚点在中间点\n默认从锚点绘制\n\ndirector可以和activity生命周期绑定，手动绑定(在各个周期内绑定)\n\n## layer处理触摸事件 \n\n> 都是在子线程中进行的，不能进行UI操作，当然surfaceView可以\n\nlayer事件中开启\nsetIsTouchEnabled(true);触摸事件开关\n\nccTOuchedBegan(event);按下事件\n\nandorid坐标系的点转换为cocos中的点converTouchToNodeSpace\n\n## CCNode\n\n获取单元的范围:CGRect rect = ccNode.getBoundingBox();\n\n获取单元的大小：CGSize size = ccNode.getBoundingBox().size;\n\n将Android的MotionEvent转换成 Cocos2d上的点\nCGPoint cgPoint = convertTouchToNodeSpace(event);\n\n\n## CCAction\n\n动作\n\nCCSequence `串行动作` CCSequence.action(xx,xx);\nCCSpawn `并行动作` \n\nCCRepeatForever 重复的动作，用于包装Action\n\nCCEaseIn 具备加速的动作，用于包装Action\n\nCCLabel 专门显示文字的sprite\n\nccColor3B 颜色渐变的action cc3(r,g,b);\n\nxxxBy 事件都重写了reserver 而 xxxTo都没有重写reserver会报异常。例如：CCTintTo CCRotateTo CCJumpTo","slug":"2016-11-13-SurfaceView的使用","published":1,"updated":"2018-01-02T01:08:38.446Z","comments":1,"photos":[],"link":"","_id":"cjbx3x34r0005izijb7qyq8y1","content":"<p>SurfaceView的基本逻辑<br><a id=\"more\"></a></p>\n<h2 id=\"SurfaceView\"><a href=\"#SurfaceView\" class=\"headerlink\" title=\"SurfaceView\"></a>SurfaceView</h2><p>主要的类：</p>\n<blockquote>\n<p>SurfaceView 展示内容的地方</p>\n<p>↓    getHolder()</p>\n<p>SurfaceHolder 展示的内容</p>\n<p>↓    addCallback() → getSurface() 获取 surface</p>\n<p>SurfaceHolder.Callback</p>\n<p>↓    线程需要在surfaceCreate时创建，surfaceDestroy停止</p>\n<p>Thread 持续展示内容的工人</p>\n</blockquote>\n<h2 id=\"Surface\"><a href=\"#Surface\" class=\"headerlink\" title=\"Surface\"></a>Surface</h2><blockquote>\n<p>lockCanvas 锁定画布 保证线程安全</p>\n<p>↓ 开启线程</p>\n<p>绘制界面 </p>\n<p>unlockCanvasAndPost 解锁画布</p>\n<p>↓ 关闭线程</p>\n</blockquote>\n<h2 id=\"绘制背景\"><a href=\"#绘制背景\" class=\"headerlink\" title=\"绘制背景\"></a>绘制背景</h2><p><code>每次一个对象重新绘制位置的时候都会造成叠加的效果</code>，<br>如何解决：是通过不断重新绘制背景来覆盖原来的图片</p>\n<h2 id=\"Rect-矩形类\"><a href=\"#Rect-矩形类\" class=\"headerlink\" title=\"Rect 矩形类\"></a>Rect 矩形类</h2><p>android提供的范围类，可以检测是否包含某点</p>\n<h2 id=\"Cocos2dx\"><a href=\"#Cocos2dx\" class=\"headerlink\" title=\"Cocos2dx\"></a>Cocos2dx</h2><p>CCGLSurfaceView surfaceview类</p>\n<p>CCDirector 导演类 （单例的）CCDirector.sharedDirector</p>\n<p>CCScene 场景类 CCScene.node() 展示节点的根节点</p>\n<p>CCLayer 图层类 CCSense.addChild() 添加图层</p>\n<p>CCSprite 精灵类</p>\n<p>默认图片放在asset中</p>\n<p>坐标都是左下角开始的正常坐标系，Sprite的默认锚点在中间点<br>默认从锚点绘制</p>\n<p>director可以和activity生命周期绑定，手动绑定(在各个周期内绑定)</p>\n<h2 id=\"layer处理触摸事件\"><a href=\"#layer处理触摸事件\" class=\"headerlink\" title=\"layer处理触摸事件\"></a>layer处理触摸事件</h2><blockquote>\n<p>都是在子线程中进行的，不能进行UI操作，当然surfaceView可以</p>\n</blockquote>\n<p>layer事件中开启<br>setIsTouchEnabled(true);触摸事件开关</p>\n<p>ccTOuchedBegan(event);按下事件</p>\n<p>andorid坐标系的点转换为cocos中的点converTouchToNodeSpace</p>\n<h2 id=\"CCNode\"><a href=\"#CCNode\" class=\"headerlink\" title=\"CCNode\"></a>CCNode</h2><p>获取单元的范围:CGRect rect = ccNode.getBoundingBox();</p>\n<p>获取单元的大小：CGSize size = ccNode.getBoundingBox().size;</p>\n<p>将Android的MotionEvent转换成 Cocos2d上的点<br>CGPoint cgPoint = convertTouchToNodeSpace(event);</p>\n<h2 id=\"CCAction\"><a href=\"#CCAction\" class=\"headerlink\" title=\"CCAction\"></a>CCAction</h2><p>动作</p>\n<p>CCSequence <code>串行动作</code> CCSequence.action(xx,xx);<br>CCSpawn <code>并行动作</code> </p>\n<p>CCRepeatForever 重复的动作，用于包装Action</p>\n<p>CCEaseIn 具备加速的动作，用于包装Action</p>\n<p>CCLabel 专门显示文字的sprite</p>\n<p>ccColor3B 颜色渐变的action cc3(r,g,b);</p>\n<p>xxxBy 事件都重写了reserver 而 xxxTo都没有重写reserver会报异常。例如：CCTintTo CCRotateTo CCJumpTo</p>\n","site":{"data":{}},"excerpt":"<p>SurfaceView的基本逻辑<br>","more":"</p>\n<h2 id=\"SurfaceView\"><a href=\"#SurfaceView\" class=\"headerlink\" title=\"SurfaceView\"></a>SurfaceView</h2><p>主要的类：</p>\n<blockquote>\n<p>SurfaceView 展示内容的地方</p>\n<p>↓    getHolder()</p>\n<p>SurfaceHolder 展示的内容</p>\n<p>↓    addCallback() → getSurface() 获取 surface</p>\n<p>SurfaceHolder.Callback</p>\n<p>↓    线程需要在surfaceCreate时创建，surfaceDestroy停止</p>\n<p>Thread 持续展示内容的工人</p>\n</blockquote>\n<h2 id=\"Surface\"><a href=\"#Surface\" class=\"headerlink\" title=\"Surface\"></a>Surface</h2><blockquote>\n<p>lockCanvas 锁定画布 保证线程安全</p>\n<p>↓ 开启线程</p>\n<p>绘制界面 </p>\n<p>unlockCanvasAndPost 解锁画布</p>\n<p>↓ 关闭线程</p>\n</blockquote>\n<h2 id=\"绘制背景\"><a href=\"#绘制背景\" class=\"headerlink\" title=\"绘制背景\"></a>绘制背景</h2><p><code>每次一个对象重新绘制位置的时候都会造成叠加的效果</code>，<br>如何解决：是通过不断重新绘制背景来覆盖原来的图片</p>\n<h2 id=\"Rect-矩形类\"><a href=\"#Rect-矩形类\" class=\"headerlink\" title=\"Rect 矩形类\"></a>Rect 矩形类</h2><p>android提供的范围类，可以检测是否包含某点</p>\n<h2 id=\"Cocos2dx\"><a href=\"#Cocos2dx\" class=\"headerlink\" title=\"Cocos2dx\"></a>Cocos2dx</h2><p>CCGLSurfaceView surfaceview类</p>\n<p>CCDirector 导演类 （单例的）CCDirector.sharedDirector</p>\n<p>CCScene 场景类 CCScene.node() 展示节点的根节点</p>\n<p>CCLayer 图层类 CCSense.addChild() 添加图层</p>\n<p>CCSprite 精灵类</p>\n<p>默认图片放在asset中</p>\n<p>坐标都是左下角开始的正常坐标系，Sprite的默认锚点在中间点<br>默认从锚点绘制</p>\n<p>director可以和activity生命周期绑定，手动绑定(在各个周期内绑定)</p>\n<h2 id=\"layer处理触摸事件\"><a href=\"#layer处理触摸事件\" class=\"headerlink\" title=\"layer处理触摸事件\"></a>layer处理触摸事件</h2><blockquote>\n<p>都是在子线程中进行的，不能进行UI操作，当然surfaceView可以</p>\n</blockquote>\n<p>layer事件中开启<br>setIsTouchEnabled(true);触摸事件开关</p>\n<p>ccTOuchedBegan(event);按下事件</p>\n<p>andorid坐标系的点转换为cocos中的点converTouchToNodeSpace</p>\n<h2 id=\"CCNode\"><a href=\"#CCNode\" class=\"headerlink\" title=\"CCNode\"></a>CCNode</h2><p>获取单元的范围:CGRect rect = ccNode.getBoundingBox();</p>\n<p>获取单元的大小：CGSize size = ccNode.getBoundingBox().size;</p>\n<p>将Android的MotionEvent转换成 Cocos2d上的点<br>CGPoint cgPoint = convertTouchToNodeSpace(event);</p>\n<h2 id=\"CCAction\"><a href=\"#CCAction\" class=\"headerlink\" title=\"CCAction\"></a>CCAction</h2><p>动作</p>\n<p>CCSequence <code>串行动作</code> CCSequence.action(xx,xx);<br>CCSpawn <code>并行动作</code> </p>\n<p>CCRepeatForever 重复的动作，用于包装Action</p>\n<p>CCEaseIn 具备加速的动作，用于包装Action</p>\n<p>CCLabel 专门显示文字的sprite</p>\n<p>ccColor3B 颜色渐变的action cc3(r,g,b);</p>\n<p>xxxBy 事件都重写了reserver 而 xxxTo都没有重写reserver会报异常。例如：CCTintTo CCRotateTo CCJumpTo</p>"},{"title":"2017-1-1-自定义View高级知识点(二)","date":"2017-01-01T14:40:41.000Z","layout":"post","_content":"\n如何使用Canvas操作图片和文字\n\n<!-- more -->\n\n## drawPicture()\n\nPicture可以记录下Canvas的绘画过程并重复利用。\n\npicture的创建过程\n\n```java\n        mPicture = new Picture();\n\t\t// 开始记录\n        Canvas canvas = mPicture.beginRecording(Integer.MAX_VALUE >> 2, Integer.MAX_VALUE >> 2);\n        canvas.drawRoundRect(new RectF(0, 0, 100, 100), 10, 10, mPaint);\n        canvas.translate(200, 200);\n\n        for (int i = 0; i < 60; i++) {\n            if (i % 5 == 0) {\n                mPaint.setColor(Color.RED);\n                canvas.drawLine(0, 60, 0, 100, mPaint);\n            } else {\n                mPaint.setColor(Color.BLUE);\n                canvas.drawLine(0, 80, 0, 100, mPaint);\n            }\n            canvas.rotate(6);\n        }\n        canvas.drawCircle(0, 0, 100, mPaint);\n\t\t// 结束记录\n        mPicture.endRecording();\n\t\t\n\t\t/*\n\t\t可以通过PictureDrawable的方式设置绘画的区域\n        mPictureDrawable = new PictureDrawable(mPicture);\n        mPictureDrawable.setBounds(0, 0,320, 480);\n\t\t*/\n\t\t\n```\n\n如何将Picture画出来？\n\n```java\n//1. 使用Canvas进行绘画\ncanvas.drawPicture(Picture picture);\ncanvas.drawPicture(Picture picture,RectF dst); // 画到指定的区域\n\n//2. 通过转化成PictureDrawable的形式进行绘画\nmPictureDrawable.draw(canvas);\n\n//3. 使用Picture 画到指定的画布上面\nmPicture.draw(canvas);\n```\n\n## drawBitmap()\n\nBitmapFactory获取Bitmap的常用方法：\n\n```java\n// 资源文件(drawable/mipmap/raw):\nBitmap bitmap = BitmapFactory.decodeResource(mContext.getResources(),R.raw.bitmap);\n\n// 资源文件(assets):\nBitmap bitmap=null;\ntry {\n    InputStream is = mContext.getAssets().open(\"bitmap.png\");\n    bitmap = BitmapFactory.decodeStream(is);\n    is.close();\n} catch (IOException e) {\n    e.printStackTrace();\n}\n\n// 内存卡文件:\nBitmap bitmap = BitmapFactory.decodeFile(\"/sdcard/bitmap.png\");\n网络文件:\n\n// 获取网络流中的Bitmap:\nBitmap bitmap = BitmapFactory.decodeStream(is);\nis.close();\n```\n\ncanvas画Bitmap的常用方法：\n\n```java\n// 第一种\npublic void drawBitmap (Bitmap bitmap, Matrix matrix, Paint paint)\n\n// 第二种\npublic void drawBitmap (Bitmap bitmap, float left, float top, Paint paint)\n\n// 第三种\npublic void drawBitmap (Bitmap bitmap, Rect src, Rect dst, Paint paint)\npublic void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint)\n```\n\n1.其中`public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint)`该方法的效果为，将Bitmap上的Src部分画到Canvas上的Dst区域，这里dst和src与在Paint.setXfermode中的意义相同。（这种绘制方式会让src的内容**拉伸**到整个dst区域）\n\n2.同时通过改变不同的Scr位置可以的到gif的效果。\n\n效果如下：\n![DrawBitmap的拉伸效果图][1]\n\n## drawText\n\n其中绘制文字的配置方法均在Paint中：\n\n| 标题   | 相关方法                      | 作用                                       |\n| -------- | ------------------------- | ---------------------------------------- |\n| 色彩   | setColor setARGB setAlpha | 设置颜色，透明度                                 |\n| 大小   | setTextSize               | 设置文本字体大小                                 |\n| 字体   | setTypeface               | 设置或清除字体样式                                |\n| 样式   | setStyle                  | 填充(FILL),描边(STROKE),填充加描边(FILL_AND_STROKE) |\n| 对齐   | setTextAlign              | 左对齐(LEFT),居中对齐(CENTER),右对齐(RIGHT)        |\n| 测量   | measureText               | 测量文本大小(注意，请在设置完文本各项参数后调用) |\n\nCanvas中有多个绘制的方法：\n\n```java\n// 第一类\npublic void drawText (String text, float x, float y, Paint paint)\npublic void drawText (String text, int start, int end, float x, float y, Paint paint)\npublic void drawText (CharSequence text, int start, int end, float x, float y, Paint paint)\npublic void drawText (char[] text, int index, int count, float x, float y, Paint paint)\n\n// 第二类\npublic void drawPosText (String text, float[] pos, Paint paint)\npublic void drawPosText (char[] text, int index, int count, float[] pos, Paint paint)\n\n// 第三类\npublic void drawTextOnPath (String text, Path path, float hOffset, float vOffset, Paint paint)\npublic void drawTextOnPath (char[] text, int index, int count, Path path, float hOffset, float vOffset, Paint paint)\n```\n\n\n\n\n\n\n\n\n\n  [1]: /img/2017-1-1-自定义View高级知识点(二)/drawBitmapEffect01.gif \"drawBitmapEffect01.gif\"","source":"_posts/2017-1-1-自定义View高级知识点(二).md","raw":"---\ntitle: 2017-1-1-自定义View高级知识点(二)\ndate: 2017-1-1 22:40:41 \ncategories: Android\ntags: [自定义View]\nlayout: post\n---\n\n如何使用Canvas操作图片和文字\n\n<!-- more -->\n\n## drawPicture()\n\nPicture可以记录下Canvas的绘画过程并重复利用。\n\npicture的创建过程\n\n```java\n        mPicture = new Picture();\n\t\t// 开始记录\n        Canvas canvas = mPicture.beginRecording(Integer.MAX_VALUE >> 2, Integer.MAX_VALUE >> 2);\n        canvas.drawRoundRect(new RectF(0, 0, 100, 100), 10, 10, mPaint);\n        canvas.translate(200, 200);\n\n        for (int i = 0; i < 60; i++) {\n            if (i % 5 == 0) {\n                mPaint.setColor(Color.RED);\n                canvas.drawLine(0, 60, 0, 100, mPaint);\n            } else {\n                mPaint.setColor(Color.BLUE);\n                canvas.drawLine(0, 80, 0, 100, mPaint);\n            }\n            canvas.rotate(6);\n        }\n        canvas.drawCircle(0, 0, 100, mPaint);\n\t\t// 结束记录\n        mPicture.endRecording();\n\t\t\n\t\t/*\n\t\t可以通过PictureDrawable的方式设置绘画的区域\n        mPictureDrawable = new PictureDrawable(mPicture);\n        mPictureDrawable.setBounds(0, 0,320, 480);\n\t\t*/\n\t\t\n```\n\n如何将Picture画出来？\n\n```java\n//1. 使用Canvas进行绘画\ncanvas.drawPicture(Picture picture);\ncanvas.drawPicture(Picture picture,RectF dst); // 画到指定的区域\n\n//2. 通过转化成PictureDrawable的形式进行绘画\nmPictureDrawable.draw(canvas);\n\n//3. 使用Picture 画到指定的画布上面\nmPicture.draw(canvas);\n```\n\n## drawBitmap()\n\nBitmapFactory获取Bitmap的常用方法：\n\n```java\n// 资源文件(drawable/mipmap/raw):\nBitmap bitmap = BitmapFactory.decodeResource(mContext.getResources(),R.raw.bitmap);\n\n// 资源文件(assets):\nBitmap bitmap=null;\ntry {\n    InputStream is = mContext.getAssets().open(\"bitmap.png\");\n    bitmap = BitmapFactory.decodeStream(is);\n    is.close();\n} catch (IOException e) {\n    e.printStackTrace();\n}\n\n// 内存卡文件:\nBitmap bitmap = BitmapFactory.decodeFile(\"/sdcard/bitmap.png\");\n网络文件:\n\n// 获取网络流中的Bitmap:\nBitmap bitmap = BitmapFactory.decodeStream(is);\nis.close();\n```\n\ncanvas画Bitmap的常用方法：\n\n```java\n// 第一种\npublic void drawBitmap (Bitmap bitmap, Matrix matrix, Paint paint)\n\n// 第二种\npublic void drawBitmap (Bitmap bitmap, float left, float top, Paint paint)\n\n// 第三种\npublic void drawBitmap (Bitmap bitmap, Rect src, Rect dst, Paint paint)\npublic void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint)\n```\n\n1.其中`public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint)`该方法的效果为，将Bitmap上的Src部分画到Canvas上的Dst区域，这里dst和src与在Paint.setXfermode中的意义相同。（这种绘制方式会让src的内容**拉伸**到整个dst区域）\n\n2.同时通过改变不同的Scr位置可以的到gif的效果。\n\n效果如下：\n![DrawBitmap的拉伸效果图][1]\n\n## drawText\n\n其中绘制文字的配置方法均在Paint中：\n\n| 标题   | 相关方法                      | 作用                                       |\n| -------- | ------------------------- | ---------------------------------------- |\n| 色彩   | setColor setARGB setAlpha | 设置颜色，透明度                                 |\n| 大小   | setTextSize               | 设置文本字体大小                                 |\n| 字体   | setTypeface               | 设置或清除字体样式                                |\n| 样式   | setStyle                  | 填充(FILL),描边(STROKE),填充加描边(FILL_AND_STROKE) |\n| 对齐   | setTextAlign              | 左对齐(LEFT),居中对齐(CENTER),右对齐(RIGHT)        |\n| 测量   | measureText               | 测量文本大小(注意，请在设置完文本各项参数后调用) |\n\nCanvas中有多个绘制的方法：\n\n```java\n// 第一类\npublic void drawText (String text, float x, float y, Paint paint)\npublic void drawText (String text, int start, int end, float x, float y, Paint paint)\npublic void drawText (CharSequence text, int start, int end, float x, float y, Paint paint)\npublic void drawText (char[] text, int index, int count, float x, float y, Paint paint)\n\n// 第二类\npublic void drawPosText (String text, float[] pos, Paint paint)\npublic void drawPosText (char[] text, int index, int count, float[] pos, Paint paint)\n\n// 第三类\npublic void drawTextOnPath (String text, Path path, float hOffset, float vOffset, Paint paint)\npublic void drawTextOnPath (char[] text, int index, int count, Path path, float hOffset, float vOffset, Paint paint)\n```\n\n\n\n\n\n\n\n\n\n  [1]: /img/2017-1-1-自定义View高级知识点(二)/drawBitmapEffect01.gif \"drawBitmapEffect01.gif\"","slug":"2017-1-1-自定义View高级知识点(二)","published":1,"updated":"2018-01-02T01:08:38.446Z","comments":1,"photos":[],"link":"","_id":"cjbx3x34x0006izij0wgsyohu","content":"<p>如何使用Canvas操作图片和文字</p>\n<a id=\"more\"></a>\n<h2 id=\"drawPicture\"><a href=\"#drawPicture\" class=\"headerlink\" title=\"drawPicture()\"></a>drawPicture()</h2><p>Picture可以记录下Canvas的绘画过程并重复利用。</p>\n<p>picture的创建过程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      mPicture = <span class=\"keyword\">new</span> Picture();</span><br><span class=\"line\"><span class=\"comment\">// 开始记录</span></span><br><span class=\"line\">      Canvas canvas = mPicture.beginRecording(Integer.MAX_VALUE &gt;&gt; <span class=\"number\">2</span>, Integer.MAX_VALUE &gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">      canvas.drawRoundRect(<span class=\"keyword\">new</span> RectF(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>), <span class=\"number\">10</span>, <span class=\"number\">10</span>, mPaint);</span><br><span class=\"line\">      canvas.translate(<span class=\"number\">200</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">60</span>; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (i % <span class=\"number\">5</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">              mPaint.setColor(Color.RED);</span><br><span class=\"line\">              canvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">60</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, mPaint);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              mPaint.setColor(Color.BLUE);</span><br><span class=\"line\">              canvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">80</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, mPaint);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          canvas.rotate(<span class=\"number\">6</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      canvas.drawCircle(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, mPaint);</span><br><span class=\"line\"><span class=\"comment\">// 结束记录</span></span><br><span class=\"line\">      mPicture.endRecording();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">可以通过PictureDrawable的方式设置绘画的区域</span></span><br><span class=\"line\"><span class=\"comment\">      mPictureDrawable = new PictureDrawable(mPicture);</span></span><br><span class=\"line\"><span class=\"comment\">      mPictureDrawable.setBounds(0, 0,320, 480);</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>如何将Picture画出来？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 使用Canvas进行绘画</span></span><br><span class=\"line\">canvas.drawPicture(Picture picture);</span><br><span class=\"line\">canvas.drawPicture(Picture picture,RectF dst); <span class=\"comment\">// 画到指定的区域</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 通过转化成PictureDrawable的形式进行绘画</span></span><br><span class=\"line\">mPictureDrawable.draw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. 使用Picture 画到指定的画布上面</span></span><br><span class=\"line\">mPicture.draw(canvas);</span><br></pre></td></tr></table></figure>\n<h2 id=\"drawBitmap\"><a href=\"#drawBitmap\" class=\"headerlink\" title=\"drawBitmap()\"></a>drawBitmap()</h2><p>BitmapFactory获取Bitmap的常用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 资源文件(drawable/mipmap/raw):</span></span><br><span class=\"line\">Bitmap bitmap = BitmapFactory.decodeResource(mContext.getResources(),R.raw.bitmap);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 资源文件(assets):</span></span><br><span class=\"line\">Bitmap bitmap=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    InputStream is = mContext.getAssets().open(<span class=\"string\">\"bitmap.png\"</span>);</span><br><span class=\"line\">    bitmap = BitmapFactory.decodeStream(is);</span><br><span class=\"line\">    is.close();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内存卡文件:</span></span><br><span class=\"line\">Bitmap bitmap = BitmapFactory.decodeFile(<span class=\"string\">\"/sdcard/bitmap.png\"</span>);</span><br><span class=\"line\">网络文件:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取网络流中的Bitmap:</span></span><br><span class=\"line\">Bitmap bitmap = BitmapFactory.decodeStream(is);</span><br><span class=\"line\">is.close();</span><br></pre></td></tr></table></figure>\n<p>canvas画Bitmap的常用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBitmap</span> <span class=\"params\">(Bitmap bitmap, Matrix matrix, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 第二种</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBitmap</span> <span class=\"params\">(Bitmap bitmap, <span class=\"keyword\">float</span> left, <span class=\"keyword\">float</span> top, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 第三种</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBitmap</span> <span class=\"params\">(Bitmap bitmap, Rect src, Rect dst, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBitmap</span> <span class=\"params\">(Bitmap bitmap, Rect src, RectF dst, Paint paint)</span></span></span><br></pre></td></tr></table></figure>\n<p>1.其中<code>public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint)</code>该方法的效果为，将Bitmap上的Src部分画到Canvas上的Dst区域，这里dst和src与在Paint.setXfermode中的意义相同。（这种绘制方式会让src的内容<strong>拉伸</strong>到整个dst区域）</p>\n<p>2.同时通过改变不同的Scr位置可以的到gif的效果。</p>\n<p>效果如下：<br><img src=\"/img/2017-1-1-自定义View高级知识点(二)/drawBitmapEffect01.gif\" alt=\"DrawBitmap的拉伸效果图\" title=\"drawBitmapEffect01.gif\"></p>\n<h2 id=\"drawText\"><a href=\"#drawText\" class=\"headerlink\" title=\"drawText\"></a>drawText</h2><p>其中绘制文字的配置方法均在Paint中：</p>\n<table>\n<thead>\n<tr>\n<th>标题</th>\n<th>相关方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>色彩</td>\n<td>setColor setARGB setAlpha</td>\n<td>设置颜色，透明度</td>\n</tr>\n<tr>\n<td>大小</td>\n<td>setTextSize</td>\n<td>设置文本字体大小</td>\n</tr>\n<tr>\n<td>字体</td>\n<td>setTypeface</td>\n<td>设置或清除字体样式</td>\n</tr>\n<tr>\n<td>样式</td>\n<td>setStyle</td>\n<td>填充(FILL),描边(STROKE),填充加描边(FILL_AND_STROKE)</td>\n</tr>\n<tr>\n<td>对齐</td>\n<td>setTextAlign</td>\n<td>左对齐(LEFT),居中对齐(CENTER),右对齐(RIGHT)</td>\n</tr>\n<tr>\n<td>测量</td>\n<td>measureText</td>\n<td>测量文本大小(注意，请在设置完文本各项参数后调用)</td>\n</tr>\n</tbody>\n</table>\n<p>Canvas中有多个绘制的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawText</span> <span class=\"params\">(String text, <span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawText</span> <span class=\"params\">(String text, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawText</span> <span class=\"params\">(CharSequence text, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawText</span> <span class=\"params\">(<span class=\"keyword\">char</span>[] text, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> count, <span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 第二类</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawPosText</span> <span class=\"params\">(String text, <span class=\"keyword\">float</span>[] pos, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawPosText</span> <span class=\"params\">(<span class=\"keyword\">char</span>[] text, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> count, <span class=\"keyword\">float</span>[] pos, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 第三类</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawTextOnPath</span> <span class=\"params\">(String text, Path path, <span class=\"keyword\">float</span> hOffset, <span class=\"keyword\">float</span> vOffset, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawTextOnPath</span> <span class=\"params\">(<span class=\"keyword\">char</span>[] text, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> count, Path path, <span class=\"keyword\">float</span> hOffset, <span class=\"keyword\">float</span> vOffset, Paint paint)</span></span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>如何使用Canvas操作图片和文字</p>","more":"<h2 id=\"drawPicture\"><a href=\"#drawPicture\" class=\"headerlink\" title=\"drawPicture()\"></a>drawPicture()</h2><p>Picture可以记录下Canvas的绘画过程并重复利用。</p>\n<p>picture的创建过程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      mPicture = <span class=\"keyword\">new</span> Picture();</span><br><span class=\"line\"><span class=\"comment\">// 开始记录</span></span><br><span class=\"line\">      Canvas canvas = mPicture.beginRecording(Integer.MAX_VALUE &gt;&gt; <span class=\"number\">2</span>, Integer.MAX_VALUE &gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">      canvas.drawRoundRect(<span class=\"keyword\">new</span> RectF(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>), <span class=\"number\">10</span>, <span class=\"number\">10</span>, mPaint);</span><br><span class=\"line\">      canvas.translate(<span class=\"number\">200</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">60</span>; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (i % <span class=\"number\">5</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">              mPaint.setColor(Color.RED);</span><br><span class=\"line\">              canvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">60</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, mPaint);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              mPaint.setColor(Color.BLUE);</span><br><span class=\"line\">              canvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">80</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, mPaint);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          canvas.rotate(<span class=\"number\">6</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      canvas.drawCircle(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, mPaint);</span><br><span class=\"line\"><span class=\"comment\">// 结束记录</span></span><br><span class=\"line\">      mPicture.endRecording();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">可以通过PictureDrawable的方式设置绘画的区域</span></span><br><span class=\"line\"><span class=\"comment\">      mPictureDrawable = new PictureDrawable(mPicture);</span></span><br><span class=\"line\"><span class=\"comment\">      mPictureDrawable.setBounds(0, 0,320, 480);</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>如何将Picture画出来？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 使用Canvas进行绘画</span></span><br><span class=\"line\">canvas.drawPicture(Picture picture);</span><br><span class=\"line\">canvas.drawPicture(Picture picture,RectF dst); <span class=\"comment\">// 画到指定的区域</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 通过转化成PictureDrawable的形式进行绘画</span></span><br><span class=\"line\">mPictureDrawable.draw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. 使用Picture 画到指定的画布上面</span></span><br><span class=\"line\">mPicture.draw(canvas);</span><br></pre></td></tr></table></figure>\n<h2 id=\"drawBitmap\"><a href=\"#drawBitmap\" class=\"headerlink\" title=\"drawBitmap()\"></a>drawBitmap()</h2><p>BitmapFactory获取Bitmap的常用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 资源文件(drawable/mipmap/raw):</span></span><br><span class=\"line\">Bitmap bitmap = BitmapFactory.decodeResource(mContext.getResources(),R.raw.bitmap);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 资源文件(assets):</span></span><br><span class=\"line\">Bitmap bitmap=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    InputStream is = mContext.getAssets().open(<span class=\"string\">\"bitmap.png\"</span>);</span><br><span class=\"line\">    bitmap = BitmapFactory.decodeStream(is);</span><br><span class=\"line\">    is.close();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内存卡文件:</span></span><br><span class=\"line\">Bitmap bitmap = BitmapFactory.decodeFile(<span class=\"string\">\"/sdcard/bitmap.png\"</span>);</span><br><span class=\"line\">网络文件:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取网络流中的Bitmap:</span></span><br><span class=\"line\">Bitmap bitmap = BitmapFactory.decodeStream(is);</span><br><span class=\"line\">is.close();</span><br></pre></td></tr></table></figure>\n<p>canvas画Bitmap的常用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBitmap</span> <span class=\"params\">(Bitmap bitmap, Matrix matrix, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 第二种</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBitmap</span> <span class=\"params\">(Bitmap bitmap, <span class=\"keyword\">float</span> left, <span class=\"keyword\">float</span> top, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 第三种</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBitmap</span> <span class=\"params\">(Bitmap bitmap, Rect src, Rect dst, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawBitmap</span> <span class=\"params\">(Bitmap bitmap, Rect src, RectF dst, Paint paint)</span></span></span><br></pre></td></tr></table></figure>\n<p>1.其中<code>public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint)</code>该方法的效果为，将Bitmap上的Src部分画到Canvas上的Dst区域，这里dst和src与在Paint.setXfermode中的意义相同。（这种绘制方式会让src的内容<strong>拉伸</strong>到整个dst区域）</p>\n<p>2.同时通过改变不同的Scr位置可以的到gif的效果。</p>\n<p>效果如下：<br><img src=\"/img/2017-1-1-自定义View高级知识点(二)/drawBitmapEffect01.gif\" alt=\"DrawBitmap的拉伸效果图\" title=\"drawBitmapEffect01.gif\"></p>\n<h2 id=\"drawText\"><a href=\"#drawText\" class=\"headerlink\" title=\"drawText\"></a>drawText</h2><p>其中绘制文字的配置方法均在Paint中：</p>\n<table>\n<thead>\n<tr>\n<th>标题</th>\n<th>相关方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>色彩</td>\n<td>setColor setARGB setAlpha</td>\n<td>设置颜色，透明度</td>\n</tr>\n<tr>\n<td>大小</td>\n<td>setTextSize</td>\n<td>设置文本字体大小</td>\n</tr>\n<tr>\n<td>字体</td>\n<td>setTypeface</td>\n<td>设置或清除字体样式</td>\n</tr>\n<tr>\n<td>样式</td>\n<td>setStyle</td>\n<td>填充(FILL),描边(STROKE),填充加描边(FILL_AND_STROKE)</td>\n</tr>\n<tr>\n<td>对齐</td>\n<td>setTextAlign</td>\n<td>左对齐(LEFT),居中对齐(CENTER),右对齐(RIGHT)</td>\n</tr>\n<tr>\n<td>测量</td>\n<td>measureText</td>\n<td>测量文本大小(注意，请在设置完文本各项参数后调用)</td>\n</tr>\n</tbody>\n</table>\n<p>Canvas中有多个绘制的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawText</span> <span class=\"params\">(String text, <span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawText</span> <span class=\"params\">(String text, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawText</span> <span class=\"params\">(CharSequence text, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawText</span> <span class=\"params\">(<span class=\"keyword\">char</span>[] text, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> count, <span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 第二类</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawPosText</span> <span class=\"params\">(String text, <span class=\"keyword\">float</span>[] pos, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawPosText</span> <span class=\"params\">(<span class=\"keyword\">char</span>[] text, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> count, <span class=\"keyword\">float</span>[] pos, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 第三类</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawTextOnPath</span> <span class=\"params\">(String text, Path path, <span class=\"keyword\">float</span> hOffset, <span class=\"keyword\">float</span> vOffset, Paint paint)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawTextOnPath</span> <span class=\"params\">(<span class=\"keyword\">char</span>[] text, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> count, Path path, <span class=\"keyword\">float</span> hOffset, <span class=\"keyword\">float</span> vOffset, Paint paint)</span></span></span><br></pre></td></tr></table></figure>"},{"title":"2017-1-17-Jsp的使用","date":"2017-01-17T04:56:33.000Z","layout":"post","_content":"\n<!-- more -->\n\n## 基本知识\n\n转发：`request.getRequestDispatcher(\"success.jsp\").forward(request, response);`\n重定向：`response.sendRedirect(request.getContextPath() + \"/login.jsp\");`\n\nJsp中声明方法和全局变量，静态变量等 `<%! ... %>`\n\n## jsp具有4大域对象\n\n1.PageContext （每个Jsp中都会通过JspFactory生成一个对应本Servlet的对象（非静态），只代表当前的Servlet。类似Android中的Activity的Context）\n2.request （一次向服务器的请求） \n3.session （一个Session在服务器上有指定的存活时间，关闭浏览器会切断当前的Session）\n4.application (全局应用，是一个大容器可以包含多个Servlet和Session)\n\n## jsp中6个常用指令\n\n```html\n<!-- 创建一个Bean放到作用域里 -->\n<jsp:useBean id=\"对象在域中的name\" class=\"com.xxx.xx.xx\" scope=\"application|session|request|page\">\n<!-- 设置域中的对象属性 -->\n<jsp:setProperty property=\"对象的参数名\" name=\"对象在域中的name\" param=\"请求参数中的值，可代替value\" value=\"值\"/>\n<!-- 获取与对象中的属性 -->\n<jsp:getProperty property=\"对象的参数名\" name=\"对象在域中的name\" />\t\n\n<!-- 转发 -->\n<jsp:forward page=\"转发到的页面\"> \n\t<!-- 附带的get参数 -->\n\t<jsp:param value=\"\" name=\"\"/>\n</jsp:forward>\n\n<!-- 动态包含页面 flush为true将包含的页面刷新出去 -->\n<jsp:include page=\"指定页面\" flush=\"true\"></jsp:include>\n\n```\n## jsp中有 9 个内置对象\n\nRequest、Response\nPage(this)、PageContext\nSession、Application\nException( 错误页面使用 )、out( request.getWriter() )\nconfig(即ServletConfig)\n\nPageContext具有获取其他 8 个对象的方法\n\n所谓9个内置对象，因为Jsp被转换为java代码，所以这9大对象也意味着在Java代码中能取得的对象。\n\n那么自定义的Servlet中同样可以获取以上9个对象\n\n|对象名|\t类型\t|说明|\n|---|---|---|\n|request|\tjavax.servlet.http.HttpServletRequest\t| |\n|response|\tjavax.servlet.http.HttpServletResponse | |\t\n|session|\tjavax.servlet.http.HttpSession|\t由session=\"true\"开关|\n|application|\tjavax.servlet.ServletContext\t| |\n|exception|\tjava.lang.Throwable|由isErrorPage=\"false\"开关|\n|page|\tjava.lang.Object当前对象this\t|当前servlet实例|\n|config|\tjavax.servlet.ServletConfig\t| |\n|out|\t javax.servlet.jsp.JspWriter\t|字符输出流，相当于 printWriter对象|\n|pageContext|\t javax.servlet.jsp.PageContext\t| |\n\n\n## EL表达式\nEL表达式的存在是为了减少 jsp中频繁的调用java对象所产生的复杂语句，将大部分的对象获取和打印精简为一句，实际上底层是对java语法的封装，同时避免了空指针等现象。\neg：\n查找一个存储到了request对象的参数\n```java\n\t// java中的写法\n\n\trequest.setAttribute(name, o);\n\t\n\tObject obj = request.getAttribute(name);\n\t\n\tout.print(obj.xxx);\n```\n\n```\n\t// el表达式中将直接遍历所有域对象去寻找这个值\n\t${name[“xxx”]}\n\t${name.xxxx}\n```\n\nEL表达式中可以做一些简单的运算操作\n\n```\n${ empty XXX } // 是否为空 null / 0\n${ empty xxx ? \"是\" : \"否\" } // 三项表达式\n${ 10+5 } // 逻辑运算等\n```\n\n## EL表达式里有隐藏的 11 个对象\n\n在EL表达式中同样具有隐藏的对象，与jsp的9大对象不同的是除了pageContext 与java中的pageContext对应外其他均为EL中的map集合\n\n|EL隐式对象引用名称|\t类型|\tJSP内置对象名称|\t说明|\n|---|---|---|---|\n|pageContext\t|javax.servlet.jsp.PageContext\t|pageContext|\t一样的|\n|pageScope\t|java.util.Map<String,Object>|\t没有对应的\t|pageContext范围中存放的数据,页面范围|\n|requestScope\t|java.util.Map<String,Object>|\t没有对应的\t|请求范围数据|\n|sessionScope\t|java.util.Map<String,Object>|\t没有对应的\t|会话范围数据|\n|applicationScope\t|java.util.Map<String,Object>|\t没有对应的\t|应用范围数据|\n|param\t|java.util.Map<String,String>|\trequest.getParameter()\t|一个请求参数|\n|paramValues\t|java.util.Map<String,String[]>\t|request.getParameterValues()\t|重名请求参数|\n|header\t|java.util.Map<String,String>\t|request.getHeader()\t|一个请求消息头|\n|headerValues\t|java.util.Map<String,String[]>\t|request.getHeaders()\t|重名请求消息头|\n|initParam\t|java.util.Map<String,String>\t|getServletConfig().getInitParameter()\t|web.xml中全局参数|\n|cookie\t|java.util.Map<String,Cookie>\t|request.getCookies()\t|key:cookie对象的name值|\n\n ![EL表达式][1]\n\n因此 EL表达式中可以使用 pageContext 获取更多信息，例如：`${pageContext.request.contextPath}`（同时也证明了 EL表达式是封装了Java代码）\n\n## JSTL\n\n全称 jsp standard tag library。调用方法 \n`<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>`\n\n![jstl 核心库常用方法][2]\n\nForEach 仿 java增强for循环\n\n下方items不使用${list} 仍然可以输出，其原因是，该标签只对“ ， ”进行分割\n\n```html\n\t<table border=\"1\" bordercolor=\"red\">\n\t\t<c:forEach\n\t\t\titems=\"[jstl foreach 100, jstl foreach 300, jstl foreach 100]\"\n\t\t\tvar=\"bean\" varStatus=\"vs\">\n\t\t\t<tr>\n\t\t\t\t<td>${bean }</td>\n\t\t\t\t<td>${list }</td>\n\t\t\t\t<td>${vs }</td>\n\t\t\t\t<td>${vs.index }</td>\n\t\t\t\t<td>${vs.count }</td>\n\t\t\t\t<td>${vs.first }</td>\n\t\t\t\t<td>${vs.last }</td>\n\t\t\t</tr>\n\t\t</c:forEach>\n\t</table>\n```\n\nForToken 对指定items按照delims中指定的标识符进行切割。它是上面的拓展，同时也可以切割${list}\n\n```html\n<c:forTokens items=\"[jstl foreach 100, jstl foreach 300, jstl foreach 100]\" delims=\" \" var=\"l\">\n\t\t${l }<br/>\n</c:forTokens>\n```\n\n  [1]: /img/2017-1-17-Jsp的使用/el.jpg \"el.jpg\"\n  [2]: /img/2017-1-17-Jsp的使用/jstl.jpg \"jstl.jpg\"","source":"_posts/2017-1-17-Jsp的使用.md","raw":"---\ntitle: 2017-1-17-Jsp的使用\ndate: 2017-1-17 12:56:33 \ncategories: Java EE\ntags: [Jsp]\nlayout: post\n---\n\n<!-- more -->\n\n## 基本知识\n\n转发：`request.getRequestDispatcher(\"success.jsp\").forward(request, response);`\n重定向：`response.sendRedirect(request.getContextPath() + \"/login.jsp\");`\n\nJsp中声明方法和全局变量，静态变量等 `<%! ... %>`\n\n## jsp具有4大域对象\n\n1.PageContext （每个Jsp中都会通过JspFactory生成一个对应本Servlet的对象（非静态），只代表当前的Servlet。类似Android中的Activity的Context）\n2.request （一次向服务器的请求） \n3.session （一个Session在服务器上有指定的存活时间，关闭浏览器会切断当前的Session）\n4.application (全局应用，是一个大容器可以包含多个Servlet和Session)\n\n## jsp中6个常用指令\n\n```html\n<!-- 创建一个Bean放到作用域里 -->\n<jsp:useBean id=\"对象在域中的name\" class=\"com.xxx.xx.xx\" scope=\"application|session|request|page\">\n<!-- 设置域中的对象属性 -->\n<jsp:setProperty property=\"对象的参数名\" name=\"对象在域中的name\" param=\"请求参数中的值，可代替value\" value=\"值\"/>\n<!-- 获取与对象中的属性 -->\n<jsp:getProperty property=\"对象的参数名\" name=\"对象在域中的name\" />\t\n\n<!-- 转发 -->\n<jsp:forward page=\"转发到的页面\"> \n\t<!-- 附带的get参数 -->\n\t<jsp:param value=\"\" name=\"\"/>\n</jsp:forward>\n\n<!-- 动态包含页面 flush为true将包含的页面刷新出去 -->\n<jsp:include page=\"指定页面\" flush=\"true\"></jsp:include>\n\n```\n## jsp中有 9 个内置对象\n\nRequest、Response\nPage(this)、PageContext\nSession、Application\nException( 错误页面使用 )、out( request.getWriter() )\nconfig(即ServletConfig)\n\nPageContext具有获取其他 8 个对象的方法\n\n所谓9个内置对象，因为Jsp被转换为java代码，所以这9大对象也意味着在Java代码中能取得的对象。\n\n那么自定义的Servlet中同样可以获取以上9个对象\n\n|对象名|\t类型\t|说明|\n|---|---|---|\n|request|\tjavax.servlet.http.HttpServletRequest\t| |\n|response|\tjavax.servlet.http.HttpServletResponse | |\t\n|session|\tjavax.servlet.http.HttpSession|\t由session=\"true\"开关|\n|application|\tjavax.servlet.ServletContext\t| |\n|exception|\tjava.lang.Throwable|由isErrorPage=\"false\"开关|\n|page|\tjava.lang.Object当前对象this\t|当前servlet实例|\n|config|\tjavax.servlet.ServletConfig\t| |\n|out|\t javax.servlet.jsp.JspWriter\t|字符输出流，相当于 printWriter对象|\n|pageContext|\t javax.servlet.jsp.PageContext\t| |\n\n\n## EL表达式\nEL表达式的存在是为了减少 jsp中频繁的调用java对象所产生的复杂语句，将大部分的对象获取和打印精简为一句，实际上底层是对java语法的封装，同时避免了空指针等现象。\neg：\n查找一个存储到了request对象的参数\n```java\n\t// java中的写法\n\n\trequest.setAttribute(name, o);\n\t\n\tObject obj = request.getAttribute(name);\n\t\n\tout.print(obj.xxx);\n```\n\n```\n\t// el表达式中将直接遍历所有域对象去寻找这个值\n\t${name[“xxx”]}\n\t${name.xxxx}\n```\n\nEL表达式中可以做一些简单的运算操作\n\n```\n${ empty XXX } // 是否为空 null / 0\n${ empty xxx ? \"是\" : \"否\" } // 三项表达式\n${ 10+5 } // 逻辑运算等\n```\n\n## EL表达式里有隐藏的 11 个对象\n\n在EL表达式中同样具有隐藏的对象，与jsp的9大对象不同的是除了pageContext 与java中的pageContext对应外其他均为EL中的map集合\n\n|EL隐式对象引用名称|\t类型|\tJSP内置对象名称|\t说明|\n|---|---|---|---|\n|pageContext\t|javax.servlet.jsp.PageContext\t|pageContext|\t一样的|\n|pageScope\t|java.util.Map<String,Object>|\t没有对应的\t|pageContext范围中存放的数据,页面范围|\n|requestScope\t|java.util.Map<String,Object>|\t没有对应的\t|请求范围数据|\n|sessionScope\t|java.util.Map<String,Object>|\t没有对应的\t|会话范围数据|\n|applicationScope\t|java.util.Map<String,Object>|\t没有对应的\t|应用范围数据|\n|param\t|java.util.Map<String,String>|\trequest.getParameter()\t|一个请求参数|\n|paramValues\t|java.util.Map<String,String[]>\t|request.getParameterValues()\t|重名请求参数|\n|header\t|java.util.Map<String,String>\t|request.getHeader()\t|一个请求消息头|\n|headerValues\t|java.util.Map<String,String[]>\t|request.getHeaders()\t|重名请求消息头|\n|initParam\t|java.util.Map<String,String>\t|getServletConfig().getInitParameter()\t|web.xml中全局参数|\n|cookie\t|java.util.Map<String,Cookie>\t|request.getCookies()\t|key:cookie对象的name值|\n\n ![EL表达式][1]\n\n因此 EL表达式中可以使用 pageContext 获取更多信息，例如：`${pageContext.request.contextPath}`（同时也证明了 EL表达式是封装了Java代码）\n\n## JSTL\n\n全称 jsp standard tag library。调用方法 \n`<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>`\n\n![jstl 核心库常用方法][2]\n\nForEach 仿 java增强for循环\n\n下方items不使用${list} 仍然可以输出，其原因是，该标签只对“ ， ”进行分割\n\n```html\n\t<table border=\"1\" bordercolor=\"red\">\n\t\t<c:forEach\n\t\t\titems=\"[jstl foreach 100, jstl foreach 300, jstl foreach 100]\"\n\t\t\tvar=\"bean\" varStatus=\"vs\">\n\t\t\t<tr>\n\t\t\t\t<td>${bean }</td>\n\t\t\t\t<td>${list }</td>\n\t\t\t\t<td>${vs }</td>\n\t\t\t\t<td>${vs.index }</td>\n\t\t\t\t<td>${vs.count }</td>\n\t\t\t\t<td>${vs.first }</td>\n\t\t\t\t<td>${vs.last }</td>\n\t\t\t</tr>\n\t\t</c:forEach>\n\t</table>\n```\n\nForToken 对指定items按照delims中指定的标识符进行切割。它是上面的拓展，同时也可以切割${list}\n\n```html\n<c:forTokens items=\"[jstl foreach 100, jstl foreach 300, jstl foreach 100]\" delims=\" \" var=\"l\">\n\t\t${l }<br/>\n</c:forTokens>\n```\n\n  [1]: /img/2017-1-17-Jsp的使用/el.jpg \"el.jpg\"\n  [2]: /img/2017-1-17-Jsp的使用/jstl.jpg \"jstl.jpg\"","slug":"2017-1-17-Jsp的使用","published":1,"updated":"2018-01-02T01:08:38.446Z","comments":1,"photos":[],"link":"","_id":"cjbx3x34z0007izij42h6o6tz","content":"<a id=\"more\"></a>\n<h2 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识\"></a>基本知识</h2><p>转发：<code>request.getRequestDispatcher(&quot;success.jsp&quot;).forward(request, response);</code><br>重定向：<code>response.sendRedirect(request.getContextPath() + &quot;/login.jsp&quot;);</code></p>\n<p>Jsp中声明方法和全局变量，静态变量等 <code>&lt;%! ... %&gt;</code></p>\n<h2 id=\"jsp具有4大域对象\"><a href=\"#jsp具有4大域对象\" class=\"headerlink\" title=\"jsp具有4大域对象\"></a>jsp具有4大域对象</h2><p>1.PageContext （每个Jsp中都会通过JspFactory生成一个对应本Servlet的对象（非静态），只代表当前的Servlet。类似Android中的Activity的Context）<br>2.request （一次向服务器的请求）<br>3.session （一个Session在服务器上有指定的存活时间，关闭浏览器会切断当前的Session）<br>4.application (全局应用，是一个大容器可以包含多个Servlet和Session)</p>\n<h2 id=\"jsp中6个常用指令\"><a href=\"#jsp中6个常用指令\" class=\"headerlink\" title=\"jsp中6个常用指令\"></a>jsp中6个常用指令</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 创建一个Bean放到作用域里 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:useBean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"对象在域中的name\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.xxx.xx.xx\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"application|session|request|page\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 设置域中的对象属性 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:setProperty</span> <span class=\"attr\">property</span>=<span class=\"string\">\"对象的参数名\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"对象在域中的name\"</span> <span class=\"attr\">param</span>=<span class=\"string\">\"请求参数中的值，可代替value\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"值\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 获取与对象中的属性 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:getProperty</span> <span class=\"attr\">property</span>=<span class=\"string\">\"对象的参数名\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"对象在域中的name\"</span> /&gt;</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 转发 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:forward</span> <span class=\"attr\">page</span>=<span class=\"string\">\"转发到的页面\"</span>&gt;</span> </span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 附带的get参数 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">jsp:param</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">jsp:forward</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态包含页面 flush为true将包含的页面刷新出去 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">\"指定页面\"</span> <span class=\"attr\">flush</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:include</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"jsp中有-9-个内置对象\"><a href=\"#jsp中有-9-个内置对象\" class=\"headerlink\" title=\"jsp中有 9 个内置对象\"></a>jsp中有 9 个内置对象</h2><p>Request、Response<br>Page(this)、PageContext<br>Session、Application<br>Exception( 错误页面使用 )、out( request.getWriter() )<br>config(即ServletConfig)</p>\n<p>PageContext具有获取其他 8 个对象的方法</p>\n<p>所谓9个内置对象，因为Jsp被转换为java代码，所以这9大对象也意味着在Java代码中能取得的对象。</p>\n<p>那么自定义的Servlet中同样可以获取以上9个对象</p>\n<table>\n<thead>\n<tr>\n<th>对象名</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>request</td>\n<td>javax.servlet.http.HttpServletRequest</td>\n<td></td>\n</tr>\n<tr>\n<td>response</td>\n<td>javax.servlet.http.HttpServletResponse</td>\n<td></td>\n</tr>\n<tr>\n<td>session</td>\n<td>javax.servlet.http.HttpSession</td>\n<td>由session=”true”开关</td>\n</tr>\n<tr>\n<td>application</td>\n<td>javax.servlet.ServletContext</td>\n<td></td>\n</tr>\n<tr>\n<td>exception</td>\n<td>java.lang.Throwable</td>\n<td>由isErrorPage=”false”开关</td>\n</tr>\n<tr>\n<td>page</td>\n<td>java.lang.Object当前对象this</td>\n<td>当前servlet实例</td>\n</tr>\n<tr>\n<td>config</td>\n<td>javax.servlet.ServletConfig</td>\n<td></td>\n</tr>\n<tr>\n<td>out</td>\n<td>javax.servlet.jsp.JspWriter</td>\n<td>字符输出流，相当于 printWriter对象</td>\n</tr>\n<tr>\n<td>pageContext</td>\n<td>javax.servlet.jsp.PageContext</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"EL表达式\"><a href=\"#EL表达式\" class=\"headerlink\" title=\"EL表达式\"></a>EL表达式</h2><p>EL表达式的存在是为了减少 jsp中频繁的调用java对象所产生的复杂语句，将大部分的对象获取和打印精简为一句，实际上底层是对java语法的封装，同时避免了空指针等现象。<br>eg：<br>查找一个存储到了request对象的参数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// java中的写法</span></span><br><span class=\"line\"></span><br><span class=\"line\">request.setAttribute(name, o);</span><br><span class=\"line\"></span><br><span class=\"line\">Object obj = request.getAttribute(name);</span><br><span class=\"line\"></span><br><span class=\"line\">out.print(obj.xxx);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// el表达式中将直接遍历所有域对象去寻找这个值</span><br><span class=\"line\">$&#123;name[“xxx”]&#125;</span><br><span class=\"line\">$&#123;name.xxxx&#125;</span><br></pre></td></tr></table></figure>\n<p>EL表达式中可以做一些简单的运算操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123; empty XXX &#125; // 是否为空 null / 0</span><br><span class=\"line\">$&#123; empty xxx ? &quot;是&quot; : &quot;否&quot; &#125; // 三项表达式</span><br><span class=\"line\">$&#123; 10+5 &#125; // 逻辑运算等</span><br></pre></td></tr></table></figure>\n<h2 id=\"EL表达式里有隐藏的-11-个对象\"><a href=\"#EL表达式里有隐藏的-11-个对象\" class=\"headerlink\" title=\"EL表达式里有隐藏的 11 个对象\"></a>EL表达式里有隐藏的 11 个对象</h2><p>在EL表达式中同样具有隐藏的对象，与jsp的9大对象不同的是除了pageContext 与java中的pageContext对应外其他均为EL中的map集合</p>\n<table>\n<thead>\n<tr>\n<th>EL隐式对象引用名称</th>\n<th>类型</th>\n<th>JSP内置对象名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pageContext</td>\n<td>javax.servlet.jsp.PageContext</td>\n<td>pageContext</td>\n<td>一样的</td>\n</tr>\n<tr>\n<td>pageScope</td>\n<td>java.util.Map<string,object></string,object></td>\n<td>没有对应的</td>\n<td>pageContext范围中存放的数据,页面范围</td>\n</tr>\n<tr>\n<td>requestScope</td>\n<td>java.util.Map<string,object></string,object></td>\n<td>没有对应的</td>\n<td>请求范围数据</td>\n</tr>\n<tr>\n<td>sessionScope</td>\n<td>java.util.Map<string,object></string,object></td>\n<td>没有对应的</td>\n<td>会话范围数据</td>\n</tr>\n<tr>\n<td>applicationScope</td>\n<td>java.util.Map<string,object></string,object></td>\n<td>没有对应的</td>\n<td>应用范围数据</td>\n</tr>\n<tr>\n<td>param</td>\n<td>java.util.Map<string,string></string,string></td>\n<td>request.getParameter()</td>\n<td>一个请求参数</td>\n</tr>\n<tr>\n<td>paramValues</td>\n<td>java.util.Map<string,string[]></string,string[]></td>\n<td>request.getParameterValues()</td>\n<td>重名请求参数</td>\n</tr>\n<tr>\n<td>header</td>\n<td>java.util.Map<string,string></string,string></td>\n<td>request.getHeader()</td>\n<td>一个请求消息头</td>\n</tr>\n<tr>\n<td>headerValues</td>\n<td>java.util.Map<string,string[]></string,string[]></td>\n<td>request.getHeaders()</td>\n<td>重名请求消息头</td>\n</tr>\n<tr>\n<td>initParam</td>\n<td>java.util.Map<string,string></string,string></td>\n<td>getServletConfig().getInitParameter()</td>\n<td>web.xml中全局参数</td>\n</tr>\n<tr>\n<td>cookie</td>\n<td>java.util.Map<string,cookie></string,cookie></td>\n<td>request.getCookies()</td>\n<td>key:cookie对象的name值</td>\n</tr>\n</tbody>\n</table>\n<p> <img src=\"/img/2017-1-17-Jsp的使用/el.jpg\" alt=\"EL表达式\" title=\"el.jpg\"></p>\n<p>因此 EL表达式中可以使用 pageContext 获取更多信息，例如：<code>${pageContext.request.contextPath}</code>（同时也证明了 EL表达式是封装了Java代码）</p>\n<h2 id=\"JSTL\"><a href=\"#JSTL\" class=\"headerlink\" title=\"JSTL\"></a>JSTL</h2><p>全称 jsp standard tag library。调用方法<br><code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;</code></p>\n<p><img src=\"/img/2017-1-17-Jsp的使用/jstl.jpg\" alt=\"jstl 核心库常用方法\" title=\"jstl.jpg\"></p>\n<p>ForEach 仿 java增强for循环</p>\n<p>下方items不使用${list} 仍然可以输出，其原因是，该标签只对“ ， ”进行分割</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">bordercolor</span>=<span class=\"string\">\"red\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">c:forEach</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">items</span>=<span class=\"string\">\"[jstl foreach 100, jstl foreach 300, jstl foreach 100]\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">var</span>=<span class=\"string\">\"bean\"</span> <span class=\"attr\">varStatus</span>=<span class=\"string\">\"vs\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;bean &#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;list &#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;vs &#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;vs.index &#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;vs.count &#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;vs.first &#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;vs.last &#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>ForToken 对指定items按照delims中指定的标识符进行切割。它是上面的拓展，同时也可以切割${list}</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c:forTokens</span> <span class=\"attr\">items</span>=<span class=\"string\">\"[jstl foreach 100, jstl foreach 300, jstl foreach 100]\"</span> <span class=\"attr\">delims</span>=<span class=\"string\">\" \"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"l\"</span>&gt;</span></span><br><span class=\"line\">\t\t$&#123;l &#125;<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">c:forTokens</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识\"></a>基本知识</h2><p>转发：<code>request.getRequestDispatcher(&quot;success.jsp&quot;).forward(request, response);</code><br>重定向：<code>response.sendRedirect(request.getContextPath() + &quot;/login.jsp&quot;);</code></p>\n<p>Jsp中声明方法和全局变量，静态变量等 <code>&lt;%! ... %&gt;</code></p>\n<h2 id=\"jsp具有4大域对象\"><a href=\"#jsp具有4大域对象\" class=\"headerlink\" title=\"jsp具有4大域对象\"></a>jsp具有4大域对象</h2><p>1.PageContext （每个Jsp中都会通过JspFactory生成一个对应本Servlet的对象（非静态），只代表当前的Servlet。类似Android中的Activity的Context）<br>2.request （一次向服务器的请求）<br>3.session （一个Session在服务器上有指定的存活时间，关闭浏览器会切断当前的Session）<br>4.application (全局应用，是一个大容器可以包含多个Servlet和Session)</p>\n<h2 id=\"jsp中6个常用指令\"><a href=\"#jsp中6个常用指令\" class=\"headerlink\" title=\"jsp中6个常用指令\"></a>jsp中6个常用指令</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 创建一个Bean放到作用域里 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:useBean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"对象在域中的name\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.xxx.xx.xx\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"application|session|request|page\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 设置域中的对象属性 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:setProperty</span> <span class=\"attr\">property</span>=<span class=\"string\">\"对象的参数名\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"对象在域中的name\"</span> <span class=\"attr\">param</span>=<span class=\"string\">\"请求参数中的值，可代替value\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"值\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 获取与对象中的属性 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:getProperty</span> <span class=\"attr\">property</span>=<span class=\"string\">\"对象的参数名\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"对象在域中的name\"</span> /&gt;</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 转发 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:forward</span> <span class=\"attr\">page</span>=<span class=\"string\">\"转发到的页面\"</span>&gt;</span> </span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 附带的get参数 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">jsp:param</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">jsp:forward</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态包含页面 flush为true将包含的页面刷新出去 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jsp:include</span> <span class=\"attr\">page</span>=<span class=\"string\">\"指定页面\"</span> <span class=\"attr\">flush</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jsp:include</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"jsp中有-9-个内置对象\"><a href=\"#jsp中有-9-个内置对象\" class=\"headerlink\" title=\"jsp中有 9 个内置对象\"></a>jsp中有 9 个内置对象</h2><p>Request、Response<br>Page(this)、PageContext<br>Session、Application<br>Exception( 错误页面使用 )、out( request.getWriter() )<br>config(即ServletConfig)</p>\n<p>PageContext具有获取其他 8 个对象的方法</p>\n<p>所谓9个内置对象，因为Jsp被转换为java代码，所以这9大对象也意味着在Java代码中能取得的对象。</p>\n<p>那么自定义的Servlet中同样可以获取以上9个对象</p>\n<table>\n<thead>\n<tr>\n<th>对象名</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>request</td>\n<td>javax.servlet.http.HttpServletRequest</td>\n<td></td>\n</tr>\n<tr>\n<td>response</td>\n<td>javax.servlet.http.HttpServletResponse</td>\n<td></td>\n</tr>\n<tr>\n<td>session</td>\n<td>javax.servlet.http.HttpSession</td>\n<td>由session=”true”开关</td>\n</tr>\n<tr>\n<td>application</td>\n<td>javax.servlet.ServletContext</td>\n<td></td>\n</tr>\n<tr>\n<td>exception</td>\n<td>java.lang.Throwable</td>\n<td>由isErrorPage=”false”开关</td>\n</tr>\n<tr>\n<td>page</td>\n<td>java.lang.Object当前对象this</td>\n<td>当前servlet实例</td>\n</tr>\n<tr>\n<td>config</td>\n<td>javax.servlet.ServletConfig</td>\n<td></td>\n</tr>\n<tr>\n<td>out</td>\n<td>javax.servlet.jsp.JspWriter</td>\n<td>字符输出流，相当于 printWriter对象</td>\n</tr>\n<tr>\n<td>pageContext</td>\n<td>javax.servlet.jsp.PageContext</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"EL表达式\"><a href=\"#EL表达式\" class=\"headerlink\" title=\"EL表达式\"></a>EL表达式</h2><p>EL表达式的存在是为了减少 jsp中频繁的调用java对象所产生的复杂语句，将大部分的对象获取和打印精简为一句，实际上底层是对java语法的封装，同时避免了空指针等现象。<br>eg：<br>查找一个存储到了request对象的参数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// java中的写法</span></span><br><span class=\"line\"></span><br><span class=\"line\">request.setAttribute(name, o);</span><br><span class=\"line\"></span><br><span class=\"line\">Object obj = request.getAttribute(name);</span><br><span class=\"line\"></span><br><span class=\"line\">out.print(obj.xxx);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// el表达式中将直接遍历所有域对象去寻找这个值</span><br><span class=\"line\">$&#123;name[“xxx”]&#125;</span><br><span class=\"line\">$&#123;name.xxxx&#125;</span><br></pre></td></tr></table></figure>\n<p>EL表达式中可以做一些简单的运算操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123; empty XXX &#125; // 是否为空 null / 0</span><br><span class=\"line\">$&#123; empty xxx ? &quot;是&quot; : &quot;否&quot; &#125; // 三项表达式</span><br><span class=\"line\">$&#123; 10+5 &#125; // 逻辑运算等</span><br></pre></td></tr></table></figure>\n<h2 id=\"EL表达式里有隐藏的-11-个对象\"><a href=\"#EL表达式里有隐藏的-11-个对象\" class=\"headerlink\" title=\"EL表达式里有隐藏的 11 个对象\"></a>EL表达式里有隐藏的 11 个对象</h2><p>在EL表达式中同样具有隐藏的对象，与jsp的9大对象不同的是除了pageContext 与java中的pageContext对应外其他均为EL中的map集合</p>\n<table>\n<thead>\n<tr>\n<th>EL隐式对象引用名称</th>\n<th>类型</th>\n<th>JSP内置对象名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pageContext</td>\n<td>javax.servlet.jsp.PageContext</td>\n<td>pageContext</td>\n<td>一样的</td>\n</tr>\n<tr>\n<td>pageScope</td>\n<td>java.util.Map<string,object></string,object></td>\n<td>没有对应的</td>\n<td>pageContext范围中存放的数据,页面范围</td>\n</tr>\n<tr>\n<td>requestScope</td>\n<td>java.util.Map<string,object></string,object></td>\n<td>没有对应的</td>\n<td>请求范围数据</td>\n</tr>\n<tr>\n<td>sessionScope</td>\n<td>java.util.Map<string,object></string,object></td>\n<td>没有对应的</td>\n<td>会话范围数据</td>\n</tr>\n<tr>\n<td>applicationScope</td>\n<td>java.util.Map<string,object></string,object></td>\n<td>没有对应的</td>\n<td>应用范围数据</td>\n</tr>\n<tr>\n<td>param</td>\n<td>java.util.Map<string,string></string,string></td>\n<td>request.getParameter()</td>\n<td>一个请求参数</td>\n</tr>\n<tr>\n<td>paramValues</td>\n<td>java.util.Map<string,string[]></string,string[]></td>\n<td>request.getParameterValues()</td>\n<td>重名请求参数</td>\n</tr>\n<tr>\n<td>header</td>\n<td>java.util.Map<string,string></string,string></td>\n<td>request.getHeader()</td>\n<td>一个请求消息头</td>\n</tr>\n<tr>\n<td>headerValues</td>\n<td>java.util.Map<string,string[]></string,string[]></td>\n<td>request.getHeaders()</td>\n<td>重名请求消息头</td>\n</tr>\n<tr>\n<td>initParam</td>\n<td>java.util.Map<string,string></string,string></td>\n<td>getServletConfig().getInitParameter()</td>\n<td>web.xml中全局参数</td>\n</tr>\n<tr>\n<td>cookie</td>\n<td>java.util.Map<string,cookie></string,cookie></td>\n<td>request.getCookies()</td>\n<td>key:cookie对象的name值</td>\n</tr>\n</tbody>\n</table>\n<p> <img src=\"/img/2017-1-17-Jsp的使用/el.jpg\" alt=\"EL表达式\" title=\"el.jpg\"></p>\n<p>因此 EL表达式中可以使用 pageContext 获取更多信息，例如：<code>${pageContext.request.contextPath}</code>（同时也证明了 EL表达式是封装了Java代码）</p>\n<h2 id=\"JSTL\"><a href=\"#JSTL\" class=\"headerlink\" title=\"JSTL\"></a>JSTL</h2><p>全称 jsp standard tag library。调用方法<br><code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;</code></p>\n<p><img src=\"/img/2017-1-17-Jsp的使用/jstl.jpg\" alt=\"jstl 核心库常用方法\" title=\"jstl.jpg\"></p>\n<p>ForEach 仿 java增强for循环</p>\n<p>下方items不使用${list} 仍然可以输出，其原因是，该标签只对“ ， ”进行分割</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">bordercolor</span>=<span class=\"string\">\"red\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">c:forEach</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">items</span>=<span class=\"string\">\"[jstl foreach 100, jstl foreach 300, jstl foreach 100]\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">var</span>=<span class=\"string\">\"bean\"</span> <span class=\"attr\">varStatus</span>=<span class=\"string\">\"vs\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;bean &#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;list &#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;vs &#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;vs.index &#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;vs.count &#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;vs.first &#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$&#123;vs.last &#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">c:forEach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>ForToken 对指定items按照delims中指定的标识符进行切割。它是上面的拓展，同时也可以切割${list}</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c:forTokens</span> <span class=\"attr\">items</span>=<span class=\"string\">\"[jstl foreach 100, jstl foreach 300, jstl foreach 100]\"</span> <span class=\"attr\">delims</span>=<span class=\"string\">\" \"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"l\"</span>&gt;</span></span><br><span class=\"line\">\t\t$&#123;l &#125;<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">c:forTokens</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"MD控件的使用","date":"2016-12-23T20:02:36.000Z","_content":"\nMaterial Desgin风格控件的使用。Google官方design support包里的新控件，虽然好看，但是用起来还真不是一次就能搞定的。\n\n<!-- more -->\n\n### layout_scrollFlags属性\n\nAppBarLayout的子布局有5种滚动标识(就是上面代码CollapsingToolbarLayout中配置的app:layout_scrollFlags属性)：\n\n1、scroll:将此布局和滚动时间关联。这个标识要设置在其他标识之前，没有这个标识则布局不会滚动且其他标识设置无效。\n\n2、enterAlways:任何向下滚动操作都会使此布局可见。这个标识通常被称为“快速返回”模式。\n\n3、enterAlwaysCollapsed：假设你定义了一个最小高度（minHeight）同时enterAlways也定义了，那么view将在到达这个最小高度的时候开始显示，并且从这个时候开始慢慢展开，当滚动到顶部的时候展开完。\n\n4、exitUntilCollapsed：当你定义了一个minHeight，此布局将在滚动到达这个最小高度的时候折叠。\n\n5、snap:当一个滚动事件结束，如果视图是部分可见的，那么它将被滚动到收缩或展开。例如，如果视图只有底部25%显示，它将折叠。相反，如果它的底部75%可见，那么它将完全展开。\n\n\n### fitSystemWindow\n\n以CoordinatorLayout为根布局时且设置 fit = true 控件会自己适应并填充状态栏\n\n\n而普通的控件 fit = true 则会与状态栏间隔，fit = false 则会跑到状态中去\n``` xml\n    <item name=\"android:statusBarColor\">@android:color/transparent</item> （5.0） 该属性 不会让布局内容填充到状态栏中 就算设置fitSystemWindow = false\n\n    <item name=\"android:windowTranslucentStatus\">true</item> （4.4属性） 该属性会让布局内容填充到状态栏中 不想填充到状态栏的控件设置 fit = true ； 想填充到状态栏的设置 fit = false （4.4中填充到状态栏就看不到控件了）\n```\n\n\n### ActionBar 颜色 对应的主题\n\n黑字 黑图标： app:theme=\"@style/Theme.AppCompat.Light\"\n\n白字 白图标： app:theme=\"@style/Theme.AppCompat\"\n\n### PopuWindow 颜色 对应的主题\n\n黑底 白字：app:popupTheme=\"@style/ThemeOverlay.AppCompat.Dark\"\n\n白底 黑字：app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n\n### CollapseToolBarLayout 的使用\nCollapseToolBarLayout中 ：\n1、toolbar 要写在最下面 否则会有一系列失效\n\n2、同时配置的ImageView要 fit = true才会填充状态栏\n\n3、toolBar不随折叠变换 设置 collapsing.setTitleEnabled(false); 或 app:titleEnabled=\"false\" \n\n4、title 改变文字 文字可折叠时通过collapse设置 不可折叠时通过toolbar先app:title=\"tool bar 先设置一次 才可以写字\" 然后才可以设置文字\n\n5、折叠后内容的颜色 app:contentScrim=\"#FF4081\" 状态栏的颜色 app:statusBarScrim=\"@android:color/transparent\"\n\n如下是一个标准的配置\n``` xml\n\n        <android.support.design.widget.AppBarLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"260dp\"\n            android:fitsSystemWindows=\"true\"------》》》fit后填充状态栏\n            app:theme=\"@style/Theme.AppCompat\"\n            >\n\n            <android.support.design.widget.CollapsingToolbarLayout\n                android:id=\"@+id/collapsing\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                app:contentScrim=\"#FF4081\" ----------》》》折叠后颜色\n\t\t\t\tapp:statusBarScrim=\"@android:color/transparent\"\n                app:titleEnabled=\"false\"------------》》》title不伸缩\n                app:layout_scrollFlags=\"scroll|snap|exitUntilCollapsed\" ----》》》滑动类型\n                >\n\n                <ImageView\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"match_parent\"\n                    android:fitsSystemWindows=\"true\"------》》》fit后图片填充状态栏\n                    android:scaleType=\"centerCrop\"\n                    android:src=\"@drawable/test_pic\"\n                    app:layout_collapseMode=\"parallax\"----》》》缩放模式\n                    app:layout_collapseParallaxMultiplier=\"0.7\"---》》》缩放比例\n\t\t\t\t/>\n\n                <android.support.v7.widget.Toolbar-------》》》toolbar要写在最下面\n                    android:id=\"@+id/toolbar\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"?attr/actionBarSize\"\n                    android:theme=\"@style/Theme.AppCompat\"\n                    app:title=\"tool bar 先设置一次 才可以写字\" ----》》》必须先设置一次\n                    app:layout_collapseMode=\"pin\"-----》》》固定模式\n                    app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n                    />\n            </android.support.design.widget.CollapsingToolbarLayout>\n        </android.support.design.widget.AppBarLayout>\n```\n\n效果图：<img src=\"/img/collapselayout.gif\" width=\"320\" height=\"480\"></img>\n\n### CoordinatorLayout 是怎么做到适应状态栏的？\n\n构造函数中调用 setupForInsets\n\n``` java\n    public CoordinatorLayout(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n\t\t...\n\t\t\n        mStatusBarBackground = a.getDrawable(R.styleable.CoordinatorLayout_statusBarBackground);//-----》》》获取背景drawable\n        \n\t\t...\n\n        setupForInsets();//-------------》》》》调用\n\n        super.setOnHierarchyChangeListener(new HierarchyChangeListener());\n    }\n```\n\n根据是否fitsSystemWindows来设置不同的 ui标签\n``` java\n    private void setupForInsets() {\n\t\t\n        if (Build.VERSION.SDK_INT < 21) {// ----》》》5.0一下不适用\n            return;\n        }\n\n        if (ViewCompat.getFitsSystemWindows(this)) {\n            if (mApplyWindowInsetsListener == null) {\n                mApplyWindowInsetsListener =\n                        new android.support.v4.view.OnApplyWindowInsetsListener() {\n                            @Override\n                            public WindowInsetsCompat onApplyWindowInsets(View v,\n                                    WindowInsetsCompat insets) {\n                                return setWindowInsets(insets);\n                            }\n                        };\n            }\n            // First apply the insets listener\n            ViewCompat.setOnApplyWindowInsetsListener(this, mApplyWindowInsetsListener);\n\n            // Now set the sys ui flags to enable us to lay out in the window insets\n            setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);//----》》》设置UI标签\n        } else {\n            ViewCompat.setOnApplyWindowInsetsListener(this, null);\n        }\n    }\n```\n\n### 水波纹特效\n``` xml\n<ripple xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:color=\"@color/touch_effect\">\n    <item android:id=\"@android:id/mask\">\n\t<shape android:shape=\"rectangle\">\n\t    <solid android:color=\"@android:color/white\" />\n\t</shape>\n    </item>\n</ripple>\n```\n\n### 水波纹揭示效果\n``` java\nViewAnimationUtils.createCircularReveal(View view, int centerX, int centerY, float startRadius, float endRadius)\n```\n","source":"_posts/2016-12-24-MD控件的使用.md","raw":"---\nlayout: post\ntitle: \"MD控件的使用\"\ndate: 2016-12-24 04:02:36\ncategories: Android\ntags: [android,Material Design]\n---\n\nMaterial Desgin风格控件的使用。Google官方design support包里的新控件，虽然好看，但是用起来还真不是一次就能搞定的。\n\n<!-- more -->\n\n### layout_scrollFlags属性\n\nAppBarLayout的子布局有5种滚动标识(就是上面代码CollapsingToolbarLayout中配置的app:layout_scrollFlags属性)：\n\n1、scroll:将此布局和滚动时间关联。这个标识要设置在其他标识之前，没有这个标识则布局不会滚动且其他标识设置无效。\n\n2、enterAlways:任何向下滚动操作都会使此布局可见。这个标识通常被称为“快速返回”模式。\n\n3、enterAlwaysCollapsed：假设你定义了一个最小高度（minHeight）同时enterAlways也定义了，那么view将在到达这个最小高度的时候开始显示，并且从这个时候开始慢慢展开，当滚动到顶部的时候展开完。\n\n4、exitUntilCollapsed：当你定义了一个minHeight，此布局将在滚动到达这个最小高度的时候折叠。\n\n5、snap:当一个滚动事件结束，如果视图是部分可见的，那么它将被滚动到收缩或展开。例如，如果视图只有底部25%显示，它将折叠。相反，如果它的底部75%可见，那么它将完全展开。\n\n\n### fitSystemWindow\n\n以CoordinatorLayout为根布局时且设置 fit = true 控件会自己适应并填充状态栏\n\n\n而普通的控件 fit = true 则会与状态栏间隔，fit = false 则会跑到状态中去\n``` xml\n    <item name=\"android:statusBarColor\">@android:color/transparent</item> （5.0） 该属性 不会让布局内容填充到状态栏中 就算设置fitSystemWindow = false\n\n    <item name=\"android:windowTranslucentStatus\">true</item> （4.4属性） 该属性会让布局内容填充到状态栏中 不想填充到状态栏的控件设置 fit = true ； 想填充到状态栏的设置 fit = false （4.4中填充到状态栏就看不到控件了）\n```\n\n\n### ActionBar 颜色 对应的主题\n\n黑字 黑图标： app:theme=\"@style/Theme.AppCompat.Light\"\n\n白字 白图标： app:theme=\"@style/Theme.AppCompat\"\n\n### PopuWindow 颜色 对应的主题\n\n黑底 白字：app:popupTheme=\"@style/ThemeOverlay.AppCompat.Dark\"\n\n白底 黑字：app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n\n### CollapseToolBarLayout 的使用\nCollapseToolBarLayout中 ：\n1、toolbar 要写在最下面 否则会有一系列失效\n\n2、同时配置的ImageView要 fit = true才会填充状态栏\n\n3、toolBar不随折叠变换 设置 collapsing.setTitleEnabled(false); 或 app:titleEnabled=\"false\" \n\n4、title 改变文字 文字可折叠时通过collapse设置 不可折叠时通过toolbar先app:title=\"tool bar 先设置一次 才可以写字\" 然后才可以设置文字\n\n5、折叠后内容的颜色 app:contentScrim=\"#FF4081\" 状态栏的颜色 app:statusBarScrim=\"@android:color/transparent\"\n\n如下是一个标准的配置\n``` xml\n\n        <android.support.design.widget.AppBarLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"260dp\"\n            android:fitsSystemWindows=\"true\"------》》》fit后填充状态栏\n            app:theme=\"@style/Theme.AppCompat\"\n            >\n\n            <android.support.design.widget.CollapsingToolbarLayout\n                android:id=\"@+id/collapsing\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                app:contentScrim=\"#FF4081\" ----------》》》折叠后颜色\n\t\t\t\tapp:statusBarScrim=\"@android:color/transparent\"\n                app:titleEnabled=\"false\"------------》》》title不伸缩\n                app:layout_scrollFlags=\"scroll|snap|exitUntilCollapsed\" ----》》》滑动类型\n                >\n\n                <ImageView\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"match_parent\"\n                    android:fitsSystemWindows=\"true\"------》》》fit后图片填充状态栏\n                    android:scaleType=\"centerCrop\"\n                    android:src=\"@drawable/test_pic\"\n                    app:layout_collapseMode=\"parallax\"----》》》缩放模式\n                    app:layout_collapseParallaxMultiplier=\"0.7\"---》》》缩放比例\n\t\t\t\t/>\n\n                <android.support.v7.widget.Toolbar-------》》》toolbar要写在最下面\n                    android:id=\"@+id/toolbar\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"?attr/actionBarSize\"\n                    android:theme=\"@style/Theme.AppCompat\"\n                    app:title=\"tool bar 先设置一次 才可以写字\" ----》》》必须先设置一次\n                    app:layout_collapseMode=\"pin\"-----》》》固定模式\n                    app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n                    />\n            </android.support.design.widget.CollapsingToolbarLayout>\n        </android.support.design.widget.AppBarLayout>\n```\n\n效果图：<img src=\"/img/collapselayout.gif\" width=\"320\" height=\"480\"></img>\n\n### CoordinatorLayout 是怎么做到适应状态栏的？\n\n构造函数中调用 setupForInsets\n\n``` java\n    public CoordinatorLayout(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n\t\t...\n\t\t\n        mStatusBarBackground = a.getDrawable(R.styleable.CoordinatorLayout_statusBarBackground);//-----》》》获取背景drawable\n        \n\t\t...\n\n        setupForInsets();//-------------》》》》调用\n\n        super.setOnHierarchyChangeListener(new HierarchyChangeListener());\n    }\n```\n\n根据是否fitsSystemWindows来设置不同的 ui标签\n``` java\n    private void setupForInsets() {\n\t\t\n        if (Build.VERSION.SDK_INT < 21) {// ----》》》5.0一下不适用\n            return;\n        }\n\n        if (ViewCompat.getFitsSystemWindows(this)) {\n            if (mApplyWindowInsetsListener == null) {\n                mApplyWindowInsetsListener =\n                        new android.support.v4.view.OnApplyWindowInsetsListener() {\n                            @Override\n                            public WindowInsetsCompat onApplyWindowInsets(View v,\n                                    WindowInsetsCompat insets) {\n                                return setWindowInsets(insets);\n                            }\n                        };\n            }\n            // First apply the insets listener\n            ViewCompat.setOnApplyWindowInsetsListener(this, mApplyWindowInsetsListener);\n\n            // Now set the sys ui flags to enable us to lay out in the window insets\n            setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);//----》》》设置UI标签\n        } else {\n            ViewCompat.setOnApplyWindowInsetsListener(this, null);\n        }\n    }\n```\n\n### 水波纹特效\n``` xml\n<ripple xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:color=\"@color/touch_effect\">\n    <item android:id=\"@android:id/mask\">\n\t<shape android:shape=\"rectangle\">\n\t    <solid android:color=\"@android:color/white\" />\n\t</shape>\n    </item>\n</ripple>\n```\n\n### 水波纹揭示效果\n``` java\nViewAnimationUtils.createCircularReveal(View view, int centerX, int centerY, float startRadius, float endRadius)\n```\n","slug":"2016-12-24-MD控件的使用","published":1,"updated":"2018-01-02T01:08:38.446Z","comments":1,"photos":[],"link":"","_id":"cjbx3x351000bizij3u22dp43","content":"<p>Material Desgin风格控件的使用。Google官方design support包里的新控件，虽然好看，但是用起来还真不是一次就能搞定的。</p>\n<a id=\"more\"></a>\n<h3 id=\"layout-scrollFlags属性\"><a href=\"#layout-scrollFlags属性\" class=\"headerlink\" title=\"layout_scrollFlags属性\"></a>layout_scrollFlags属性</h3><p>AppBarLayout的子布局有5种滚动标识(就是上面代码CollapsingToolbarLayout中配置的app:layout_scrollFlags属性)：</p>\n<p>1、scroll:将此布局和滚动时间关联。这个标识要设置在其他标识之前，没有这个标识则布局不会滚动且其他标识设置无效。</p>\n<p>2、enterAlways:任何向下滚动操作都会使此布局可见。这个标识通常被称为“快速返回”模式。</p>\n<p>3、enterAlwaysCollapsed：假设你定义了一个最小高度（minHeight）同时enterAlways也定义了，那么view将在到达这个最小高度的时候开始显示，并且从这个时候开始慢慢展开，当滚动到顶部的时候展开完。</p>\n<p>4、exitUntilCollapsed：当你定义了一个minHeight，此布局将在滚动到达这个最小高度的时候折叠。</p>\n<p>5、snap:当一个滚动事件结束，如果视图是部分可见的，那么它将被滚动到收缩或展开。例如，如果视图只有底部25%显示，它将折叠。相反，如果它的底部75%可见，那么它将完全展开。</p>\n<h3 id=\"fitSystemWindow\"><a href=\"#fitSystemWindow\" class=\"headerlink\" title=\"fitSystemWindow\"></a>fitSystemWindow</h3><p>以CoordinatorLayout为根布局时且设置 fit = true 控件会自己适应并填充状态栏</p>\n<p>而普通的控件 fit = true 则会与状态栏间隔，fit = false 则会跑到状态中去<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:statusBarColor\"</span>&gt;</span>@android:color/transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> （5.0） 该属性 不会让布局内容填充到状态栏中 就算设置fitSystemWindow = false</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowTranslucentStatus\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> （4.4属性） 该属性会让布局内容填充到状态栏中 不想填充到状态栏的控件设置 fit = true ； 想填充到状态栏的设置 fit = false （4.4中填充到状态栏就看不到控件了）</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ActionBar-颜色-对应的主题\"><a href=\"#ActionBar-颜色-对应的主题\" class=\"headerlink\" title=\"ActionBar 颜色 对应的主题\"></a>ActionBar 颜色 对应的主题</h3><p>黑字 黑图标： app:theme=”@style/Theme.AppCompat.Light”</p>\n<p>白字 白图标： app:theme=”@style/Theme.AppCompat”</p>\n<h3 id=\"PopuWindow-颜色-对应的主题\"><a href=\"#PopuWindow-颜色-对应的主题\" class=\"headerlink\" title=\"PopuWindow 颜色 对应的主题\"></a>PopuWindow 颜色 对应的主题</h3><p>黑底 白字：app:popupTheme=”@style/ThemeOverlay.AppCompat.Dark”</p>\n<p>白底 黑字：app:popupTheme=”@style/ThemeOverlay.AppCompat.Light”</p>\n<h3 id=\"CollapseToolBarLayout-的使用\"><a href=\"#CollapseToolBarLayout-的使用\" class=\"headerlink\" title=\"CollapseToolBarLayout 的使用\"></a>CollapseToolBarLayout 的使用</h3><p>CollapseToolBarLayout中 ：<br>1、toolbar 要写在最下面 否则会有一系列失效</p>\n<p>2、同时配置的ImageView要 fit = true才会填充状态栏</p>\n<p>3、toolBar不随折叠变换 设置 collapsing.setTitleEnabled(false); 或 app:titleEnabled=”false” </p>\n<p>4、title 改变文字 文字可折叠时通过collapse设置 不可折叠时通过toolbar先app:title=”tool bar 先设置一次 才可以写字” 然后才可以设置文字</p>\n<p>5、折叠后内容的颜色 app:contentScrim=”#FF4081” 状态栏的颜色 app:statusBarScrim=”@android:color/transparent”</p>\n<p>如下是一个标准的配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"260dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span><span class=\"attr\">------</span>》》》<span class=\"attr\">fit</span>后填充状态栏</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:theme</span>=<span class=\"string\">\"@style/Theme.AppCompat\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/collapsing\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:contentScrim</span>=<span class=\"string\">\"#FF4081\"</span> <span class=\"attr\">----------</span>》》》折叠后颜色</span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">app:statusBarScrim</span>=<span class=\"string\">\"@android:color/transparent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:titleEnabled</span>=<span class=\"string\">\"false\"</span><span class=\"attr\">------------</span>》》》<span class=\"attr\">title</span>不伸缩</span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|snap|exitUntilCollapsed\"</span> <span class=\"attr\">----</span>》》》滑动类型</span></span><br><span class=\"line\"><span class=\"tag\">            &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span><span class=\"attr\">------</span>》》》<span class=\"attr\">fit</span>后图片填充状态栏</span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/test_pic\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"parallax\"</span><span class=\"attr\">----</span>》》》缩放模式</span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_collapseParallaxMultiplier</span>=<span class=\"string\">\"0.7\"</span><span class=\"attr\">---</span>》》》缩放比例</span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar-------》》》toolbar要写在最下面</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/Theme.AppCompat\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:title</span>=<span class=\"string\">\"tool bar 先设置一次 才可以写字\"</span> <span class=\"attr\">----</span>》》》必须先设置一次</span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"pin\"</span><span class=\"attr\">-----</span>》》》固定模式</span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>效果图：<img src=\"/img/collapselayout.gif\" width=\"320\" height=\"480\"></p>\n<h3 id=\"CoordinatorLayout-是怎么做到适应状态栏的？\"><a href=\"#CoordinatorLayout-是怎么做到适应状态栏的？\" class=\"headerlink\" title=\"CoordinatorLayout 是怎么做到适应状态栏的？\"></a>CoordinatorLayout 是怎么做到适应状态栏的？</h3><p>构造函数中调用 setupForInsets</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CoordinatorLayout</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">      mStatusBarBackground = a.getDrawable(R.styleable.CoordinatorLayout_statusBarBackground);<span class=\"comment\">//-----》》》获取背景drawable</span></span><br><span class=\"line\">      </span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">      setupForInsets();<span class=\"comment\">//-------------》》》》调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">super</span>.setOnHierarchyChangeListener(<span class=\"keyword\">new</span> HierarchyChangeListener());</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>根据是否fitsSystemWindows来设置不同的 ui标签<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupForInsets</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &lt; <span class=\"number\">21</span>) &#123;<span class=\"comment\">// ----》》》5.0一下不适用</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ViewCompat.getFitsSystemWindows(<span class=\"keyword\">this</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mApplyWindowInsetsListener == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mApplyWindowInsetsListener =</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> android.support.v4.view.OnApplyWindowInsetsListener() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> WindowInsetsCompat <span class=\"title\">onApplyWindowInsets</span><span class=\"params\">(View v,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                WindowInsetsCompat insets)</span> </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> setWindowInsets(insets);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// First apply the insets listener</span></span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(<span class=\"keyword\">this</span>, mApplyWindowInsetsListener);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Now set the sys ui flags to enable us to lay out in the window insets</span></span><br><span class=\"line\">        setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE</span><br><span class=\"line\">                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);<span class=\"comment\">//----》》》设置UI标签</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(<span class=\"keyword\">this</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"水波纹特效\"><a href=\"#水波纹特效\" class=\"headerlink\" title=\"水波纹特效\"></a>水波纹特效</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ripple</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/touch_effect\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/mask\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">\"rectangle\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@android:color/white\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ripple</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"水波纹揭示效果\"><a href=\"#水波纹揭示效果\" class=\"headerlink\" title=\"水波纹揭示效果\"></a>水波纹揭示效果</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewAnimationUtils.createCircularReveal(View view, <span class=\"keyword\">int</span> centerX, <span class=\"keyword\">int</span> centerY, <span class=\"keyword\">float</span> startRadius, <span class=\"keyword\">float</span> endRadius)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Material Desgin风格控件的使用。Google官方design support包里的新控件，虽然好看，但是用起来还真不是一次就能搞定的。</p>","more":"<h3 id=\"layout-scrollFlags属性\"><a href=\"#layout-scrollFlags属性\" class=\"headerlink\" title=\"layout_scrollFlags属性\"></a>layout_scrollFlags属性</h3><p>AppBarLayout的子布局有5种滚动标识(就是上面代码CollapsingToolbarLayout中配置的app:layout_scrollFlags属性)：</p>\n<p>1、scroll:将此布局和滚动时间关联。这个标识要设置在其他标识之前，没有这个标识则布局不会滚动且其他标识设置无效。</p>\n<p>2、enterAlways:任何向下滚动操作都会使此布局可见。这个标识通常被称为“快速返回”模式。</p>\n<p>3、enterAlwaysCollapsed：假设你定义了一个最小高度（minHeight）同时enterAlways也定义了，那么view将在到达这个最小高度的时候开始显示，并且从这个时候开始慢慢展开，当滚动到顶部的时候展开完。</p>\n<p>4、exitUntilCollapsed：当你定义了一个minHeight，此布局将在滚动到达这个最小高度的时候折叠。</p>\n<p>5、snap:当一个滚动事件结束，如果视图是部分可见的，那么它将被滚动到收缩或展开。例如，如果视图只有底部25%显示，它将折叠。相反，如果它的底部75%可见，那么它将完全展开。</p>\n<h3 id=\"fitSystemWindow\"><a href=\"#fitSystemWindow\" class=\"headerlink\" title=\"fitSystemWindow\"></a>fitSystemWindow</h3><p>以CoordinatorLayout为根布局时且设置 fit = true 控件会自己适应并填充状态栏</p>\n<p>而普通的控件 fit = true 则会与状态栏间隔，fit = false 则会跑到状态中去<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:statusBarColor\"</span>&gt;</span>@android:color/transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> （5.0） 该属性 不会让布局内容填充到状态栏中 就算设置fitSystemWindow = false</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowTranslucentStatus\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span> （4.4属性） 该属性会让布局内容填充到状态栏中 不想填充到状态栏的控件设置 fit = true ； 想填充到状态栏的设置 fit = false （4.4中填充到状态栏就看不到控件了）</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ActionBar-颜色-对应的主题\"><a href=\"#ActionBar-颜色-对应的主题\" class=\"headerlink\" title=\"ActionBar 颜色 对应的主题\"></a>ActionBar 颜色 对应的主题</h3><p>黑字 黑图标： app:theme=”@style/Theme.AppCompat.Light”</p>\n<p>白字 白图标： app:theme=”@style/Theme.AppCompat”</p>\n<h3 id=\"PopuWindow-颜色-对应的主题\"><a href=\"#PopuWindow-颜色-对应的主题\" class=\"headerlink\" title=\"PopuWindow 颜色 对应的主题\"></a>PopuWindow 颜色 对应的主题</h3><p>黑底 白字：app:popupTheme=”@style/ThemeOverlay.AppCompat.Dark”</p>\n<p>白底 黑字：app:popupTheme=”@style/ThemeOverlay.AppCompat.Light”</p>\n<h3 id=\"CollapseToolBarLayout-的使用\"><a href=\"#CollapseToolBarLayout-的使用\" class=\"headerlink\" title=\"CollapseToolBarLayout 的使用\"></a>CollapseToolBarLayout 的使用</h3><p>CollapseToolBarLayout中 ：<br>1、toolbar 要写在最下面 否则会有一系列失效</p>\n<p>2、同时配置的ImageView要 fit = true才会填充状态栏</p>\n<p>3、toolBar不随折叠变换 设置 collapsing.setTitleEnabled(false); 或 app:titleEnabled=”false” </p>\n<p>4、title 改变文字 文字可折叠时通过collapse设置 不可折叠时通过toolbar先app:title=”tool bar 先设置一次 才可以写字” 然后才可以设置文字</p>\n<p>5、折叠后内容的颜色 app:contentScrim=”#FF4081” 状态栏的颜色 app:statusBarScrim=”@android:color/transparent”</p>\n<p>如下是一个标准的配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"260dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span><span class=\"attr\">------</span>》》》<span class=\"attr\">fit</span>后填充状态栏</span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:theme</span>=<span class=\"string\">\"@style/Theme.AppCompat\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/collapsing\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:contentScrim</span>=<span class=\"string\">\"#FF4081\"</span> <span class=\"attr\">----------</span>》》》折叠后颜色</span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">app:statusBarScrim</span>=<span class=\"string\">\"@android:color/transparent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:titleEnabled</span>=<span class=\"string\">\"false\"</span><span class=\"attr\">------------</span>》》》<span class=\"attr\">title</span>不伸缩</span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|snap|exitUntilCollapsed\"</span> <span class=\"attr\">----</span>》》》滑动类型</span></span><br><span class=\"line\"><span class=\"tag\">            &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span><span class=\"attr\">------</span>》》》<span class=\"attr\">fit</span>后图片填充状态栏</span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/test_pic\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"parallax\"</span><span class=\"attr\">----</span>》》》缩放模式</span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_collapseParallaxMultiplier</span>=<span class=\"string\">\"0.7\"</span><span class=\"attr\">---</span>》》》缩放比例</span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar-------》》》toolbar要写在最下面</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/Theme.AppCompat\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:title</span>=<span class=\"string\">\"tool bar 先设置一次 才可以写字\"</span> <span class=\"attr\">----</span>》》》必须先设置一次</span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"pin\"</span><span class=\"attr\">-----</span>》》》固定模式</span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>效果图：<img src=\"/img/collapselayout.gif\" width=\"320\" height=\"480\"></p>\n<h3 id=\"CoordinatorLayout-是怎么做到适应状态栏的？\"><a href=\"#CoordinatorLayout-是怎么做到适应状态栏的？\" class=\"headerlink\" title=\"CoordinatorLayout 是怎么做到适应状态栏的？\"></a>CoordinatorLayout 是怎么做到适应状态栏的？</h3><p>构造函数中调用 setupForInsets</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CoordinatorLayout</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">      mStatusBarBackground = a.getDrawable(R.styleable.CoordinatorLayout_statusBarBackground);<span class=\"comment\">//-----》》》获取背景drawable</span></span><br><span class=\"line\">      </span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">      setupForInsets();<span class=\"comment\">//-------------》》》》调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">super</span>.setOnHierarchyChangeListener(<span class=\"keyword\">new</span> HierarchyChangeListener());</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>根据是否fitsSystemWindows来设置不同的 ui标签<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupForInsets</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &lt; <span class=\"number\">21</span>) &#123;<span class=\"comment\">// ----》》》5.0一下不适用</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ViewCompat.getFitsSystemWindows(<span class=\"keyword\">this</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mApplyWindowInsetsListener == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mApplyWindowInsetsListener =</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> android.support.v4.view.OnApplyWindowInsetsListener() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> WindowInsetsCompat <span class=\"title\">onApplyWindowInsets</span><span class=\"params\">(View v,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                WindowInsetsCompat insets)</span> </span>&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> setWindowInsets(insets);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// First apply the insets listener</span></span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(<span class=\"keyword\">this</span>, mApplyWindowInsetsListener);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Now set the sys ui flags to enable us to lay out in the window insets</span></span><br><span class=\"line\">        setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE</span><br><span class=\"line\">                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);<span class=\"comment\">//----》》》设置UI标签</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ViewCompat.setOnApplyWindowInsetsListener(<span class=\"keyword\">this</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"水波纹特效\"><a href=\"#水波纹特效\" class=\"headerlink\" title=\"水波纹特效\"></a>水波纹特效</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ripple</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/touch_effect\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/mask\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">\"rectangle\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@android:color/white\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ripple</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"水波纹揭示效果\"><a href=\"#水波纹揭示效果\" class=\"headerlink\" title=\"水波纹揭示效果\"></a>水波纹揭示效果</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewAnimationUtils.createCircularReveal(View view, <span class=\"keyword\">int</span> centerX, <span class=\"keyword\">int</span> centerY, <span class=\"keyword\">float</span> startRadius, <span class=\"keyword\">float</span> endRadius)</span><br></pre></td></tr></table></figure>"},{"title":"2016-12-30-自定义View高级知识点（一）","date":"2016-12-30T07:02:40.000Z","layout":"post","_content":"\n自定义View中比较重要的一些知识点，本篇主要学习Canvas的一些基本使用。\n\n<!-- more -->\n\n## Canvas可以画的东西\n\n| 操作类型       | 相关API                                    | 备注                                       |\n| ---------- | ---------------------------------------- | ---------------------------------------- |\n| 绘制颜色       | drawColor, drawRGB, drawARGB             | 使用单一颜色填充整个画布                             |\n| 绘制基本形状     | drawPoint, drawPoints, drawLine, drawLines, drawRect, drawRoundRect, drawOval, drawCircle, drawArc | 依次为 点、线、矩形、圆角矩形、椭圆、圆、圆弧                  |\n| 绘制图片       | drawBitmap, drawPicture                  | 绘制位图和图片                                  |\n| 绘制文本       | drawText,    drawPosText, drawTextOnPath | 依次为 绘制文字、绘制文字时指定每个文字位置、根据路径绘制文字          |\n| 绘制路径       | drawPath                                 | 绘制路径，绘制贝塞尔曲线时也需要用到该函数                    |\n| 顶点操作       | drawVertices, drawBitmapMesh             | 通过对顶点操作可以使图像形变，drawVertices直接对画布作用、 drawBitmapMesh只对绘制的Bitmap作用 |\n| 画布剪裁       | clipPath,    clipRect                    | 设置画布的显示区域                                |\n| 画布快照       | save, restore, saveLayerXxx, restoreToCount, getSaveCount | 依次为 保存当前状态、 回滚到上一次保存的状态、 保存图层状态、 回滚到指定状态、 获取保存次数 |\n| 画布变换       | translate, scale, rotate, skew           | 依次为 位移、缩放、 旋转、错切                         |\n| Matrix(矩阵) | getMatrix, setMatrix, concat             | 实际画布的位移，缩放等操作的都是图像矩阵Matrix，只不过Matrix比较难以理解和使用，故封装了一些常用的方法。 |\n\n## 颜色混合模式(Alpha通道相关)\n\n通过前面介绍我们知道颜色一般都是四个通道(ARGB)的，其中(RGB)控制的是颜色,而A(Alpha)控制的是透明度。\n\n因为我们的显示屏是没法透明的，因此最终显示在屏幕上的颜色里可以认为没有Alpha通道。Alpha通道主要在两个图像混合的时候生效。\n\n默认情况下，当一个颜色绘制到Canvas上时的混合模式是这样计算的：\n\n(RGB通道) 最终颜色 = 绘制的颜色 + (1 - 绘制颜色的透明度) × Canvas上的原有颜色。\n\n注意：\n\n1.这里我们一般把每个通道的取值从0(ox00)到255(0xff)映射到0到1的浮点数表示。\n\n2.这里等式右边的“绘制的颜色”、“Canvas上的原有颜色” 都是经过预乘了自己的Alpha通道的值。如绘制颜色：0x88ffffff，那么参与运算时的每个颜色通道的值不是1.0，而是(1.0 * 0.5333 = 0.5333)。 (其中0.5333 = 0x88/0xff)\n\n使用这种方式的混合，就会造成后绘制的内容以半透明的方式叠在上面的视觉效果。\n\n\n## Paint.setXfermode模式\n\n下表是各个PorterDuff模式的混合计算公式：（D指原本在Canvas上的内容dst，S指绘制输入的内容src，a指alpha通道，c指RGB各个通道）,各种模式如下图所示。\n\n![porterDuff的模式][1]\n\n\n## onMeasure\n\n真正进行测量的是 setMeasuredDimension\n如果对View的宽高进行修改了，不要调用 super.onMeasure( widthMeasureSpec, heightMeasureSpec); 要调用 setMeasuredDimension( widthsize, heightsize); 这个函数。\n\n## paint绘制图形\n\n>一个要点：绘制的基本形状由Canvas确定，但绘制出来的颜色,具体效果则由Paint确定\n> STROKE                //描边\n> FILL                  //填充\n> FILL_AND_STROKE       //描边加填充\n\n1.圆角矩形\n\n利用圆角矩形也可以绘制出椭圆\n\n```java\nRectF rectF = new RectF(100, 100, 300, 300);\nmPaint.setColor(Color.BLACK);\ncanvas.drawRect(rectF, mPaint);\nmPaint.setColor(Color.RED);\ncanvas.drawRoundRect(rectF, 100, 50, mPaint);\n```\n\n2.椭圆\n\n椭圆绘制可以理解为做一个矩形的内切圆，如果这是一个正方形那么绘制出来的就是一个圆形\n\n```java\nRectF rectF = new RectF(100, 100, 400, 300);\nmPaint.setColor(Color.BLACK);\ncanvas.drawOval(rectF, mPaint);\n```\n\n3.扇形\n\n```java\ndrawArc(RectF oval, float startAngle(开始角度0-360), float sweepAngle(扫过角度0-360), boolean useCenter(是否连接圆心),Paint paint) \n```\n\n```java\n    // 使用中心\n    RectF rectF = new RectF(100, 100, 200, 200);\n    mPaint.setStyle(Paint.Style.FILL_AND_STROKE); \n    mPaint.setColor(Color.GRAY);\n    canvas.drawRect(rectF, mPaint);\n    mPaint.setStyle(Paint.Style.STROKE);\n    mPaint.setColor(Color.BLACK);\n    canvas.drawArc(rectF, 0, 90, true, mPaint);\n\n    // 不使用中心\n    rectF = new RectF(100, 300, 200, 400);\n    mPaint.setStyle(Paint.Style.FILL_AND_STROKE); // 填充 并描边\n    mPaint.setColor(Color.GRAY);\n    canvas.drawRect(rectF, mPaint);\n    mPaint.setStyle(Paint.Style.STROKE); // 仅描边\n    mPaint.setColor(Color.RED);\n    canvas.drawArc(rectF, 0, -90, false, mPaint);\n```\n![扇形][2]\n\n4.画一个圆饼图\n\n```java\npublic class PieChartView extends View {\n\n    private Paint mPaint;\n\n    private List<Percent> mPercentList;\n\n    public PieChartView(Context context) {\n        super(context);\n        init();\n    }\n\n    public PieChartView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public PieChartView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n\n    public void init() {\n        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);\n        mPaint.setStrokeCap(Paint.Cap.ROUND);\n        mPaint.setStrokeWidth(2);\n\n        mPercentList = new LinkedList<>();\n        mPercentList.add(new Percent(\"1\", 0.4f, Color.WHITE));\n        mPercentList.add(new Percent(\"2\", 0.4f, Color.BLUE));\n        mPercentList.add(new Percent(\"3\", 0.2f, Color.RED));\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        RectF rectF = new RectF(100, 100, 400, 400);\n        canvas.drawOval(rectF, mPaint);\n\n        float surplus = 1.0f; // 剩余的范围\n        float startAngle = 0;\n        Percent percent;\n        for (int i = 0, size = mPercentList.size(); i < size; i++) {\n            percent = mPercentList.get(i);\n            if (percent.percent <= surplus) {\n                surplus -= percent.percent;\n                startAngle += percent.drawArc(mPaint, canvas, startAngle, rectF);\n            }\n        }\n\n    }\n\n\t/**\n\t* 采用封装的思想\n\t*/\n    public static class Percent {\n        String tag;\n        float percent;\n        int color;\n\n        public Percent(String tag, float percent, int color) {\n            this.tag = tag;\n            this.percent = percent;\n            this.color = color;\n        }\n\n        /**\n         * 绘制 这个百分比\n         *\n         * @param paint\n         * @param canvas\n         * @param startAngle\n         * @param rectF\n         * @return 返回绘制的角度大小\n         */\n        public float drawArc(Paint paint, Canvas canvas, float startAngle, RectF rectF) {\n            int oldColor = paint.getColor();\n            Paint.Style oldStyle = paint.getStyle();\n\n            paint.setColor(color);\n            paint.setStyle(Paint.Style.FILL);\n\n            canvas.drawArc(rectF, startAngle, 360 * percent, true, paint);\n\n            paint.setColor(oldColor);\n            paint.setStyle(oldStyle);\n\n            return 360 * percent;\n        }\n    }\n}\n```\n![圆饼图][3]\n\n## 操作画布\n\n操作画布，操作的都是坐标系，是对当前坐标系进行移动、旋转、缩放、错切等操作\n\n操作画布只会影响接下来的绘画，而不会影响之前已经绘画完成的图像\n\n1.移动画布\n\n```java\n\t// 移动画布\n\tcanvas.translate(getWidth() / 2, getHeight() / 2);\n\tcanvas.drawCircle(0, 0, 200, mPaint);\n\tcanvas.drawCircle(0, 0, 180, mPaint);\n\n\t// 旋转画布 并画线\n\tfor (int i = 0; i < 36; i++) {\n\t\tcanvas.drawLine(0, 180, 0, 200, mPaint);\n\t\tcanvas.rotate(10);\n\t}\n```\n\n![通过旋转画布实现两圆之间的连线][4]\n\n2.旋转画布\n\n```java\n    public void rotate(float degrees) {\n        native_rotate(mNativeCanvasWrapper, degrees);\n    }\n\n    /**\n     * 相对某点缩放\n     */\n    public final void rotate(float degrees, float px, float py) {\n        translate(px, py);\n        rotate(degrees);\n        translate(-px, -py);\n    }\n```\n看下图为相对某点进行缩放，图中的绘制顺序 1.红 2.黄 3.蓝 4.绿\n\n![相对某点缩放][5]\n\n```java\n        RectF rectF = new RectF(100, 100, 200, 200);\n        mPaint.setColor(Color.RED);\n        canvas.drawRect(rectF, mPaint);\n\n        canvas.translate(200,200); // 先将坐标系O移动到相对点P\n        mPaint.setColor(Color.YELLOW);\n        canvas.drawRect(rectF, mPaint);\n\n        canvas.rotate(90);// 在相对点P处将坐标系O进行旋转 O-->o P-->p\n        mPaint.setColor(Color.BLUE);\n        canvas.drawRect(rectF, mPaint);\n\n        canvas.translate(-200,-200);// 将旋转后的坐标系o中的p与P对齐，让以后的操作都仍然相对于P点\n        mPaint.setColor(Color.GREEN);\n        canvas.drawRect(rectF, mPaint);\n```\n\n3.缩放画布\n\n```java\n    public void scale(float sx, float sy) {\n        native_scale(mNativeCanvasWrapper, sx, sy);\n    }\n\n    /**\n     * 相对于某点进行缩放，其相对原理与相对某点旋转相同\n     */\n    public final void scale(float sx, float sy, float px, float py) {\n        translate(px, py);\n        scale(sx, sy);\n        translate(-px, -py);\n    }\n```\n\n缩放比例(sx,sy)取值范围详解：\n\n| 取值范围(n)  | 说明                         |\n| -------- | -------------------------- |\n| [-∞, -1) | 先根据缩放中心放大n倍，再根据中心轴进行翻转     |\n| -1       | 根据缩放中心轴进行翻转                |\n| (-1, 0)  | 先根据缩放中心缩小到n，再根据中心轴进行翻转     |\n| 0        | 不会显示，若sx为0，则宽度为0，不会显示，sy同理 |\n| (0, 1)   | 根据缩放中心缩小到n                 |\n| 1        | 没有变化                       |\n| (1, +∞)  | 根据缩放中心放大n倍                 |\n\n负值时，坐标系方向取反，scale(1,-1)这个操作将使得坐标系变为数学中常用坐标系\n\n旋转，缩放，位移三者应用\n```java\n\t// 移动画布\n\tcanvas.translate(getWidth() / 2, getHeight() / 2);\n\n\tmPaint.setColor(Color.BLUE);\n\tfor (int j = 0; j < 10; j++) {\n\t\tcanvas.drawCircle(0, 0, 200, mPaint);\n\t\tcanvas.drawCircle(0, 0, 180, mPaint);\n\t\tcanvas.rotate(j);\n\t\t// 旋转画布 并画线![enter description here][6]\n\t\tfor (float i = j; i <= 360f; i += 10f) {\n\t\t\tcanvas.drawLine(0, 180, 0, 200, mPaint);\n\t\t\tcanvas.rotate(10);\n\t\t}\n\t\tcanvas.scale(0.75f, 0.75f);\n\t}\n```\n![nothing][6]\n\n\n4.错切（skew）\n\n>错切是在某方向上，按照一定的比例对图形的每个点到某条平行于该方向的直线的有向距离做放缩得到的平面图形。(度娘)\n\n```java\n    public void skew(float sx, float sy) {\n        native_skew(mNativeCanvasWrapper, sx, sy);\n    }\n```\n用法：\n```java\n        canvas.translate(getWidth()/2,getHeight()/2);\n        RectF rectF = new RectF(0, 0, 100, 100);\n        mPaint.setColor(Color.RED);\n        canvas.drawRect(rectF, mPaint);\n\n        canvas.skew(-1,0); // 向左倾斜45度\n        canvas.drawRect(rectF, mPaint);\n```\n效果图：\n\n![错切][7]\n\n\n  [1]: /img/2016-12-30-自定义View高级知识点(一)/PorterDuffMode.jpg \"PorterDuffMode.jpg\"\n  [2]: /img/2016-12-30-自定义View高级知识点(一)/drawArc.png \"drawArc.png\"\n  [3]: /img/2016-12-30-自定义View高级知识点(一)/pieChart.png \"pieChart.png\"\n  [4]: /img/2016-12-30-自定义View高级知识点(一)/circleView.png \"circleView.png\"\n  [5]: /img/2016-12-30-自定义View高级知识点(一)/scale.png \"scale.png\"\n  [6]: /img/2016-12-30-自定义View高级知识点(一)/scale_ratote_translate.png \"scale_ratote_translate.png\"\n  [7]: /img/2016-12-30-自定义View高级知识点(一)/skew.png \"skew.png\"","source":"_posts/2016-12-30-自定义View高级知识点(一).md","raw":"---\ntitle: 2016-12-30-自定义View高级知识点（一）\ndate: 2016-12-30 15:02:40\nlayout: post\ncategories: Android\ntags: [自定义View]\n---\n\n自定义View中比较重要的一些知识点，本篇主要学习Canvas的一些基本使用。\n\n<!-- more -->\n\n## Canvas可以画的东西\n\n| 操作类型       | 相关API                                    | 备注                                       |\n| ---------- | ---------------------------------------- | ---------------------------------------- |\n| 绘制颜色       | drawColor, drawRGB, drawARGB             | 使用单一颜色填充整个画布                             |\n| 绘制基本形状     | drawPoint, drawPoints, drawLine, drawLines, drawRect, drawRoundRect, drawOval, drawCircle, drawArc | 依次为 点、线、矩形、圆角矩形、椭圆、圆、圆弧                  |\n| 绘制图片       | drawBitmap, drawPicture                  | 绘制位图和图片                                  |\n| 绘制文本       | drawText,    drawPosText, drawTextOnPath | 依次为 绘制文字、绘制文字时指定每个文字位置、根据路径绘制文字          |\n| 绘制路径       | drawPath                                 | 绘制路径，绘制贝塞尔曲线时也需要用到该函数                    |\n| 顶点操作       | drawVertices, drawBitmapMesh             | 通过对顶点操作可以使图像形变，drawVertices直接对画布作用、 drawBitmapMesh只对绘制的Bitmap作用 |\n| 画布剪裁       | clipPath,    clipRect                    | 设置画布的显示区域                                |\n| 画布快照       | save, restore, saveLayerXxx, restoreToCount, getSaveCount | 依次为 保存当前状态、 回滚到上一次保存的状态、 保存图层状态、 回滚到指定状态、 获取保存次数 |\n| 画布变换       | translate, scale, rotate, skew           | 依次为 位移、缩放、 旋转、错切                         |\n| Matrix(矩阵) | getMatrix, setMatrix, concat             | 实际画布的位移，缩放等操作的都是图像矩阵Matrix，只不过Matrix比较难以理解和使用，故封装了一些常用的方法。 |\n\n## 颜色混合模式(Alpha通道相关)\n\n通过前面介绍我们知道颜色一般都是四个通道(ARGB)的，其中(RGB)控制的是颜色,而A(Alpha)控制的是透明度。\n\n因为我们的显示屏是没法透明的，因此最终显示在屏幕上的颜色里可以认为没有Alpha通道。Alpha通道主要在两个图像混合的时候生效。\n\n默认情况下，当一个颜色绘制到Canvas上时的混合模式是这样计算的：\n\n(RGB通道) 最终颜色 = 绘制的颜色 + (1 - 绘制颜色的透明度) × Canvas上的原有颜色。\n\n注意：\n\n1.这里我们一般把每个通道的取值从0(ox00)到255(0xff)映射到0到1的浮点数表示。\n\n2.这里等式右边的“绘制的颜色”、“Canvas上的原有颜色” 都是经过预乘了自己的Alpha通道的值。如绘制颜色：0x88ffffff，那么参与运算时的每个颜色通道的值不是1.0，而是(1.0 * 0.5333 = 0.5333)。 (其中0.5333 = 0x88/0xff)\n\n使用这种方式的混合，就会造成后绘制的内容以半透明的方式叠在上面的视觉效果。\n\n\n## Paint.setXfermode模式\n\n下表是各个PorterDuff模式的混合计算公式：（D指原本在Canvas上的内容dst，S指绘制输入的内容src，a指alpha通道，c指RGB各个通道）,各种模式如下图所示。\n\n![porterDuff的模式][1]\n\n\n## onMeasure\n\n真正进行测量的是 setMeasuredDimension\n如果对View的宽高进行修改了，不要调用 super.onMeasure( widthMeasureSpec, heightMeasureSpec); 要调用 setMeasuredDimension( widthsize, heightsize); 这个函数。\n\n## paint绘制图形\n\n>一个要点：绘制的基本形状由Canvas确定，但绘制出来的颜色,具体效果则由Paint确定\n> STROKE                //描边\n> FILL                  //填充\n> FILL_AND_STROKE       //描边加填充\n\n1.圆角矩形\n\n利用圆角矩形也可以绘制出椭圆\n\n```java\nRectF rectF = new RectF(100, 100, 300, 300);\nmPaint.setColor(Color.BLACK);\ncanvas.drawRect(rectF, mPaint);\nmPaint.setColor(Color.RED);\ncanvas.drawRoundRect(rectF, 100, 50, mPaint);\n```\n\n2.椭圆\n\n椭圆绘制可以理解为做一个矩形的内切圆，如果这是一个正方形那么绘制出来的就是一个圆形\n\n```java\nRectF rectF = new RectF(100, 100, 400, 300);\nmPaint.setColor(Color.BLACK);\ncanvas.drawOval(rectF, mPaint);\n```\n\n3.扇形\n\n```java\ndrawArc(RectF oval, float startAngle(开始角度0-360), float sweepAngle(扫过角度0-360), boolean useCenter(是否连接圆心),Paint paint) \n```\n\n```java\n    // 使用中心\n    RectF rectF = new RectF(100, 100, 200, 200);\n    mPaint.setStyle(Paint.Style.FILL_AND_STROKE); \n    mPaint.setColor(Color.GRAY);\n    canvas.drawRect(rectF, mPaint);\n    mPaint.setStyle(Paint.Style.STROKE);\n    mPaint.setColor(Color.BLACK);\n    canvas.drawArc(rectF, 0, 90, true, mPaint);\n\n    // 不使用中心\n    rectF = new RectF(100, 300, 200, 400);\n    mPaint.setStyle(Paint.Style.FILL_AND_STROKE); // 填充 并描边\n    mPaint.setColor(Color.GRAY);\n    canvas.drawRect(rectF, mPaint);\n    mPaint.setStyle(Paint.Style.STROKE); // 仅描边\n    mPaint.setColor(Color.RED);\n    canvas.drawArc(rectF, 0, -90, false, mPaint);\n```\n![扇形][2]\n\n4.画一个圆饼图\n\n```java\npublic class PieChartView extends View {\n\n    private Paint mPaint;\n\n    private List<Percent> mPercentList;\n\n    public PieChartView(Context context) {\n        super(context);\n        init();\n    }\n\n    public PieChartView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public PieChartView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n\n    public void init() {\n        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);\n        mPaint.setStrokeCap(Paint.Cap.ROUND);\n        mPaint.setStrokeWidth(2);\n\n        mPercentList = new LinkedList<>();\n        mPercentList.add(new Percent(\"1\", 0.4f, Color.WHITE));\n        mPercentList.add(new Percent(\"2\", 0.4f, Color.BLUE));\n        mPercentList.add(new Percent(\"3\", 0.2f, Color.RED));\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        RectF rectF = new RectF(100, 100, 400, 400);\n        canvas.drawOval(rectF, mPaint);\n\n        float surplus = 1.0f; // 剩余的范围\n        float startAngle = 0;\n        Percent percent;\n        for (int i = 0, size = mPercentList.size(); i < size; i++) {\n            percent = mPercentList.get(i);\n            if (percent.percent <= surplus) {\n                surplus -= percent.percent;\n                startAngle += percent.drawArc(mPaint, canvas, startAngle, rectF);\n            }\n        }\n\n    }\n\n\t/**\n\t* 采用封装的思想\n\t*/\n    public static class Percent {\n        String tag;\n        float percent;\n        int color;\n\n        public Percent(String tag, float percent, int color) {\n            this.tag = tag;\n            this.percent = percent;\n            this.color = color;\n        }\n\n        /**\n         * 绘制 这个百分比\n         *\n         * @param paint\n         * @param canvas\n         * @param startAngle\n         * @param rectF\n         * @return 返回绘制的角度大小\n         */\n        public float drawArc(Paint paint, Canvas canvas, float startAngle, RectF rectF) {\n            int oldColor = paint.getColor();\n            Paint.Style oldStyle = paint.getStyle();\n\n            paint.setColor(color);\n            paint.setStyle(Paint.Style.FILL);\n\n            canvas.drawArc(rectF, startAngle, 360 * percent, true, paint);\n\n            paint.setColor(oldColor);\n            paint.setStyle(oldStyle);\n\n            return 360 * percent;\n        }\n    }\n}\n```\n![圆饼图][3]\n\n## 操作画布\n\n操作画布，操作的都是坐标系，是对当前坐标系进行移动、旋转、缩放、错切等操作\n\n操作画布只会影响接下来的绘画，而不会影响之前已经绘画完成的图像\n\n1.移动画布\n\n```java\n\t// 移动画布\n\tcanvas.translate(getWidth() / 2, getHeight() / 2);\n\tcanvas.drawCircle(0, 0, 200, mPaint);\n\tcanvas.drawCircle(0, 0, 180, mPaint);\n\n\t// 旋转画布 并画线\n\tfor (int i = 0; i < 36; i++) {\n\t\tcanvas.drawLine(0, 180, 0, 200, mPaint);\n\t\tcanvas.rotate(10);\n\t}\n```\n\n![通过旋转画布实现两圆之间的连线][4]\n\n2.旋转画布\n\n```java\n    public void rotate(float degrees) {\n        native_rotate(mNativeCanvasWrapper, degrees);\n    }\n\n    /**\n     * 相对某点缩放\n     */\n    public final void rotate(float degrees, float px, float py) {\n        translate(px, py);\n        rotate(degrees);\n        translate(-px, -py);\n    }\n```\n看下图为相对某点进行缩放，图中的绘制顺序 1.红 2.黄 3.蓝 4.绿\n\n![相对某点缩放][5]\n\n```java\n        RectF rectF = new RectF(100, 100, 200, 200);\n        mPaint.setColor(Color.RED);\n        canvas.drawRect(rectF, mPaint);\n\n        canvas.translate(200,200); // 先将坐标系O移动到相对点P\n        mPaint.setColor(Color.YELLOW);\n        canvas.drawRect(rectF, mPaint);\n\n        canvas.rotate(90);// 在相对点P处将坐标系O进行旋转 O-->o P-->p\n        mPaint.setColor(Color.BLUE);\n        canvas.drawRect(rectF, mPaint);\n\n        canvas.translate(-200,-200);// 将旋转后的坐标系o中的p与P对齐，让以后的操作都仍然相对于P点\n        mPaint.setColor(Color.GREEN);\n        canvas.drawRect(rectF, mPaint);\n```\n\n3.缩放画布\n\n```java\n    public void scale(float sx, float sy) {\n        native_scale(mNativeCanvasWrapper, sx, sy);\n    }\n\n    /**\n     * 相对于某点进行缩放，其相对原理与相对某点旋转相同\n     */\n    public final void scale(float sx, float sy, float px, float py) {\n        translate(px, py);\n        scale(sx, sy);\n        translate(-px, -py);\n    }\n```\n\n缩放比例(sx,sy)取值范围详解：\n\n| 取值范围(n)  | 说明                         |\n| -------- | -------------------------- |\n| [-∞, -1) | 先根据缩放中心放大n倍，再根据中心轴进行翻转     |\n| -1       | 根据缩放中心轴进行翻转                |\n| (-1, 0)  | 先根据缩放中心缩小到n，再根据中心轴进行翻转     |\n| 0        | 不会显示，若sx为0，则宽度为0，不会显示，sy同理 |\n| (0, 1)   | 根据缩放中心缩小到n                 |\n| 1        | 没有变化                       |\n| (1, +∞)  | 根据缩放中心放大n倍                 |\n\n负值时，坐标系方向取反，scale(1,-1)这个操作将使得坐标系变为数学中常用坐标系\n\n旋转，缩放，位移三者应用\n```java\n\t// 移动画布\n\tcanvas.translate(getWidth() / 2, getHeight() / 2);\n\n\tmPaint.setColor(Color.BLUE);\n\tfor (int j = 0; j < 10; j++) {\n\t\tcanvas.drawCircle(0, 0, 200, mPaint);\n\t\tcanvas.drawCircle(0, 0, 180, mPaint);\n\t\tcanvas.rotate(j);\n\t\t// 旋转画布 并画线![enter description here][6]\n\t\tfor (float i = j; i <= 360f; i += 10f) {\n\t\t\tcanvas.drawLine(0, 180, 0, 200, mPaint);\n\t\t\tcanvas.rotate(10);\n\t\t}\n\t\tcanvas.scale(0.75f, 0.75f);\n\t}\n```\n![nothing][6]\n\n\n4.错切（skew）\n\n>错切是在某方向上，按照一定的比例对图形的每个点到某条平行于该方向的直线的有向距离做放缩得到的平面图形。(度娘)\n\n```java\n    public void skew(float sx, float sy) {\n        native_skew(mNativeCanvasWrapper, sx, sy);\n    }\n```\n用法：\n```java\n        canvas.translate(getWidth()/2,getHeight()/2);\n        RectF rectF = new RectF(0, 0, 100, 100);\n        mPaint.setColor(Color.RED);\n        canvas.drawRect(rectF, mPaint);\n\n        canvas.skew(-1,0); // 向左倾斜45度\n        canvas.drawRect(rectF, mPaint);\n```\n效果图：\n\n![错切][7]\n\n\n  [1]: /img/2016-12-30-自定义View高级知识点(一)/PorterDuffMode.jpg \"PorterDuffMode.jpg\"\n  [2]: /img/2016-12-30-自定义View高级知识点(一)/drawArc.png \"drawArc.png\"\n  [3]: /img/2016-12-30-自定义View高级知识点(一)/pieChart.png \"pieChart.png\"\n  [4]: /img/2016-12-30-自定义View高级知识点(一)/circleView.png \"circleView.png\"\n  [5]: /img/2016-12-30-自定义View高级知识点(一)/scale.png \"scale.png\"\n  [6]: /img/2016-12-30-自定义View高级知识点(一)/scale_ratote_translate.png \"scale_ratote_translate.png\"\n  [7]: /img/2016-12-30-自定义View高级知识点(一)/skew.png \"skew.png\"","slug":"2016-12-30-自定义View高级知识点(一)","published":1,"updated":"2018-01-02T01:08:38.446Z","comments":1,"photos":[],"link":"","_id":"cjbx3x353000cizijgmtzfltm","content":"<p>自定义View中比较重要的一些知识点，本篇主要学习Canvas的一些基本使用。</p>\n<a id=\"more\"></a>\n<h2 id=\"Canvas可以画的东西\"><a href=\"#Canvas可以画的东西\" class=\"headerlink\" title=\"Canvas可以画的东西\"></a>Canvas可以画的东西</h2><table>\n<thead>\n<tr>\n<th>操作类型</th>\n<th>相关API</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>绘制颜色</td>\n<td>drawColor, drawRGB, drawARGB</td>\n<td>使用单一颜色填充整个画布</td>\n</tr>\n<tr>\n<td>绘制基本形状</td>\n<td>drawPoint, drawPoints, drawLine, drawLines, drawRect, drawRoundRect, drawOval, drawCircle, drawArc</td>\n<td>依次为 点、线、矩形、圆角矩形、椭圆、圆、圆弧</td>\n</tr>\n<tr>\n<td>绘制图片</td>\n<td>drawBitmap, drawPicture</td>\n<td>绘制位图和图片</td>\n</tr>\n<tr>\n<td>绘制文本</td>\n<td>drawText,    drawPosText, drawTextOnPath</td>\n<td>依次为 绘制文字、绘制文字时指定每个文字位置、根据路径绘制文字</td>\n</tr>\n<tr>\n<td>绘制路径</td>\n<td>drawPath</td>\n<td>绘制路径，绘制贝塞尔曲线时也需要用到该函数</td>\n</tr>\n<tr>\n<td>顶点操作</td>\n<td>drawVertices, drawBitmapMesh</td>\n<td>通过对顶点操作可以使图像形变，drawVertices直接对画布作用、 drawBitmapMesh只对绘制的Bitmap作用</td>\n</tr>\n<tr>\n<td>画布剪裁</td>\n<td>clipPath,    clipRect</td>\n<td>设置画布的显示区域</td>\n</tr>\n<tr>\n<td>画布快照</td>\n<td>save, restore, saveLayerXxx, restoreToCount, getSaveCount</td>\n<td>依次为 保存当前状态、 回滚到上一次保存的状态、 保存图层状态、 回滚到指定状态、 获取保存次数</td>\n</tr>\n<tr>\n<td>画布变换</td>\n<td>translate, scale, rotate, skew</td>\n<td>依次为 位移、缩放、 旋转、错切</td>\n</tr>\n<tr>\n<td>Matrix(矩阵)</td>\n<td>getMatrix, setMatrix, concat</td>\n<td>实际画布的位移，缩放等操作的都是图像矩阵Matrix，只不过Matrix比较难以理解和使用，故封装了一些常用的方法。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"颜色混合模式-Alpha通道相关\"><a href=\"#颜色混合模式-Alpha通道相关\" class=\"headerlink\" title=\"颜色混合模式(Alpha通道相关)\"></a>颜色混合模式(Alpha通道相关)</h2><p>通过前面介绍我们知道颜色一般都是四个通道(ARGB)的，其中(RGB)控制的是颜色,而A(Alpha)控制的是透明度。</p>\n<p>因为我们的显示屏是没法透明的，因此最终显示在屏幕上的颜色里可以认为没有Alpha通道。Alpha通道主要在两个图像混合的时候生效。</p>\n<p>默认情况下，当一个颜色绘制到Canvas上时的混合模式是这样计算的：</p>\n<p>(RGB通道) 最终颜色 = 绘制的颜色 + (1 - 绘制颜色的透明度) × Canvas上的原有颜色。</p>\n<p>注意：</p>\n<p>1.这里我们一般把每个通道的取值从0(ox00)到255(0xff)映射到0到1的浮点数表示。</p>\n<p>2.这里等式右边的“绘制的颜色”、“Canvas上的原有颜色” 都是经过预乘了自己的Alpha通道的值。如绘制颜色：0x88ffffff，那么参与运算时的每个颜色通道的值不是1.0，而是(1.0 * 0.5333 = 0.5333)。 (其中0.5333 = 0x88/0xff)</p>\n<p>使用这种方式的混合，就会造成后绘制的内容以半透明的方式叠在上面的视觉效果。</p>\n<h2 id=\"Paint-setXfermode模式\"><a href=\"#Paint-setXfermode模式\" class=\"headerlink\" title=\"Paint.setXfermode模式\"></a>Paint.setXfermode模式</h2><p>下表是各个PorterDuff模式的混合计算公式：（D指原本在Canvas上的内容dst，S指绘制输入的内容src，a指alpha通道，c指RGB各个通道）,各种模式如下图所示。</p>\n<p><img src=\"/img/2016-12-30-自定义View高级知识点(一)/PorterDuffMode.jpg\" alt=\"porterDuff的模式\" title=\"PorterDuffMode.jpg\"></p>\n<h2 id=\"onMeasure\"><a href=\"#onMeasure\" class=\"headerlink\" title=\"onMeasure\"></a>onMeasure</h2><p>真正进行测量的是 setMeasuredDimension<br>如果对View的宽高进行修改了，不要调用 super.onMeasure( widthMeasureSpec, heightMeasureSpec); 要调用 setMeasuredDimension( widthsize, heightsize); 这个函数。</p>\n<h2 id=\"paint绘制图形\"><a href=\"#paint绘制图形\" class=\"headerlink\" title=\"paint绘制图形\"></a>paint绘制图形</h2><blockquote>\n<p>一个要点：绘制的基本形状由Canvas确定，但绘制出来的颜色,具体效果则由Paint确定<br>STROKE                //描边<br>FILL                  //填充<br>FILL_AND_STROKE       //描边加填充</p>\n</blockquote>\n<p>1.圆角矩形</p>\n<p>利用圆角矩形也可以绘制出椭圆</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">mPaint.setColor(Color.BLACK);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br><span class=\"line\">mPaint.setColor(Color.RED);</span><br><span class=\"line\">canvas.drawRoundRect(rectF, <span class=\"number\">100</span>, <span class=\"number\">50</span>, mPaint);</span><br></pre></td></tr></table></figure>\n<p>2.椭圆</p>\n<p>椭圆绘制可以理解为做一个矩形的内切圆，如果这是一个正方形那么绘制出来的就是一个圆形</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">400</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">mPaint.setColor(Color.BLACK);</span><br><span class=\"line\">canvas.drawOval(rectF, mPaint);</span><br></pre></td></tr></table></figure>\n<p>3.扇形</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drawArc(RectF oval, <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">startAngle</span><span class=\"params\">(开始角度<span class=\"number\">0</span><span class=\"number\">-360</span>)</span>, <span class=\"keyword\">float</span> <span class=\"title\">sweepAngle</span><span class=\"params\">(扫过角度<span class=\"number\">0</span><span class=\"number\">-360</span>)</span>, <span class=\"keyword\">boolean</span> <span class=\"title\">useCenter</span><span class=\"params\">(是否连接圆心)</span>,Paint paint)</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用中心</span></span><br><span class=\"line\">RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">mPaint.setStyle(Paint.Style.FILL_AND_STROKE); </span><br><span class=\"line\">mPaint.setColor(Color.GRAY);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br><span class=\"line\">mPaint.setStyle(Paint.Style.STROKE);</span><br><span class=\"line\">mPaint.setColor(Color.BLACK);</span><br><span class=\"line\">canvas.drawArc(rectF, <span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"keyword\">true</span>, mPaint);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不使用中心</span></span><br><span class=\"line\">rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">mPaint.setStyle(Paint.Style.FILL_AND_STROKE); <span class=\"comment\">// 填充 并描边</span></span><br><span class=\"line\">mPaint.setColor(Color.GRAY);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br><span class=\"line\">mPaint.setStyle(Paint.Style.STROKE); <span class=\"comment\">// 仅描边</span></span><br><span class=\"line\">mPaint.setColor(Color.RED);</span><br><span class=\"line\">canvas.drawArc(rectF, <span class=\"number\">0</span>, -<span class=\"number\">90</span>, <span class=\"keyword\">false</span>, mPaint);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/2016-12-30-自定义View高级知识点(一)/drawArc.png\" alt=\"扇形\" title=\"drawArc.png\"></p>\n<p>4.画一个圆饼图</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PieChartView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Percent&gt; mPercentList;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PieChartView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PieChartView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PieChartView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class=\"line\">        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);</span><br><span class=\"line\">        mPaint.setStrokeCap(Paint.Cap.ROUND);</span><br><span class=\"line\">        mPaint.setStrokeWidth(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        mPercentList = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        mPercentList.add(<span class=\"keyword\">new</span> Percent(<span class=\"string\">\"1\"</span>, <span class=\"number\">0.4f</span>, Color.WHITE));</span><br><span class=\"line\">        mPercentList.add(<span class=\"keyword\">new</span> Percent(<span class=\"string\">\"2\"</span>, <span class=\"number\">0.4f</span>, Color.BLUE));</span><br><span class=\"line\">        mPercentList.add(<span class=\"keyword\">new</span> Percent(<span class=\"string\">\"3\"</span>, <span class=\"number\">0.2f</span>, Color.RED));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">        RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">400</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">        canvas.drawOval(rectF, mPaint);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">float</span> surplus = <span class=\"number\">1.0f</span>; <span class=\"comment\">// 剩余的范围</span></span><br><span class=\"line\">        <span class=\"keyword\">float</span> startAngle = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Percent percent;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = mPercentList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">            percent = mPercentList.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (percent.percent &lt;= surplus) &#123;</span><br><span class=\"line\">                surplus -= percent.percent;</span><br><span class=\"line\">                startAngle += percent.drawArc(mPaint, canvas, startAngle, rectF);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* 采用封装的思想</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Percent</span> </span>&#123;</span><br><span class=\"line\">        String tag;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> percent;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> color;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Percent</span><span class=\"params\">(String tag, <span class=\"keyword\">float</span> percent, <span class=\"keyword\">int</span> color)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.tag = tag;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.percent = percent;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 绘制 这个百分比</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> paint</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> canvas</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> startAngle</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> rectF</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span> 返回绘制的角度大小</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">drawArc</span><span class=\"params\">(Paint paint, Canvas canvas, <span class=\"keyword\">float</span> startAngle, RectF rectF)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> oldColor = paint.getColor();</span><br><span class=\"line\">            Paint.Style oldStyle = paint.getStyle();</span><br><span class=\"line\"></span><br><span class=\"line\">            paint.setColor(color);</span><br><span class=\"line\">            paint.setStyle(Paint.Style.FILL);</span><br><span class=\"line\"></span><br><span class=\"line\">            canvas.drawArc(rectF, startAngle, <span class=\"number\">360</span> * percent, <span class=\"keyword\">true</span>, paint);</span><br><span class=\"line\"></span><br><span class=\"line\">            paint.setColor(oldColor);</span><br><span class=\"line\">            paint.setStyle(oldStyle);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">360</span> * percent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/2016-12-30-自定义View高级知识点(一)/pieChart.png\" alt=\"圆饼图\" title=\"pieChart.png\"></p>\n<h2 id=\"操作画布\"><a href=\"#操作画布\" class=\"headerlink\" title=\"操作画布\"></a>操作画布</h2><p>操作画布，操作的都是坐标系，是对当前坐标系进行移动、旋转、缩放、错切等操作</p>\n<p>操作画布只会影响接下来的绘画，而不会影响之前已经绘画完成的图像</p>\n<p>1.移动画布</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 移动画布</span></span><br><span class=\"line\">canvas.translate(getWidth() / <span class=\"number\">2</span>, getHeight() / <span class=\"number\">2</span>);</span><br><span class=\"line\">canvas.drawCircle(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>, mPaint);</span><br><span class=\"line\">canvas.drawCircle(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">180</span>, mPaint);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 旋转画布 并画线</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">36</span>; i++) &#123;</span><br><span class=\"line\">\tcanvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">180</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>, mPaint);</span><br><span class=\"line\">\tcanvas.rotate(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/2016-12-30-自定义View高级知识点(一)/circleView.png\" alt=\"通过旋转画布实现两圆之间的连线\" title=\"circleView.png\"></p>\n<p>2.旋转画布</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">float</span> degrees)</span> </span>&#123;</span><br><span class=\"line\">    native_rotate(mNativeCanvasWrapper, degrees);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 相对某点缩放</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">float</span> degrees, <span class=\"keyword\">float</span> px, <span class=\"keyword\">float</span> py)</span> </span>&#123;</span><br><span class=\"line\">    translate(px, py);</span><br><span class=\"line\">    rotate(degrees);</span><br><span class=\"line\">    translate(-px, -py);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看下图为相对某点进行缩放，图中的绘制顺序 1.红 2.黄 3.蓝 4.绿</p>\n<p><img src=\"/img/2016-12-30-自定义View高级知识点(一)/scale.png\" alt=\"相对某点缩放\" title=\"scale.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">mPaint.setColor(Color.RED);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.translate(<span class=\"number\">200</span>,<span class=\"number\">200</span>); <span class=\"comment\">// 先将坐标系O移动到相对点P</span></span><br><span class=\"line\">mPaint.setColor(Color.YELLOW);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.rotate(<span class=\"number\">90</span>);<span class=\"comment\">// 在相对点P处将坐标系O进行旋转 O--&gt;o P--&gt;p</span></span><br><span class=\"line\">mPaint.setColor(Color.BLUE);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.translate(-<span class=\"number\">200</span>,-<span class=\"number\">200</span>);<span class=\"comment\">// 将旋转后的坐标系o中的p与P对齐，让以后的操作都仍然相对于P点</span></span><br><span class=\"line\">mPaint.setColor(Color.GREEN);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br></pre></td></tr></table></figure>\n<p>3.缩放画布</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scale</span><span class=\"params\">(<span class=\"keyword\">float</span> sx, <span class=\"keyword\">float</span> sy)</span> </span>&#123;</span><br><span class=\"line\">    native_scale(mNativeCanvasWrapper, sx, sy);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 相对于某点进行缩放，其相对原理与相对某点旋转相同</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scale</span><span class=\"params\">(<span class=\"keyword\">float</span> sx, <span class=\"keyword\">float</span> sy, <span class=\"keyword\">float</span> px, <span class=\"keyword\">float</span> py)</span> </span>&#123;</span><br><span class=\"line\">    translate(px, py);</span><br><span class=\"line\">    scale(sx, sy);</span><br><span class=\"line\">    translate(-px, -py);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>缩放比例(sx,sy)取值范围详解：</p>\n<table>\n<thead>\n<tr>\n<th>取值范围(n)</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[-∞, -1)</td>\n<td>先根据缩放中心放大n倍，再根据中心轴进行翻转</td>\n</tr>\n<tr>\n<td>-1</td>\n<td>根据缩放中心轴进行翻转</td>\n</tr>\n<tr>\n<td>(-1, 0)</td>\n<td>先根据缩放中心缩小到n，再根据中心轴进行翻转</td>\n</tr>\n<tr>\n<td>0</td>\n<td>不会显示，若sx为0，则宽度为0，不会显示，sy同理</td>\n</tr>\n<tr>\n<td>(0, 1)</td>\n<td>根据缩放中心缩小到n</td>\n</tr>\n<tr>\n<td>1</td>\n<td>没有变化</td>\n</tr>\n<tr>\n<td>(1, +∞)</td>\n<td>根据缩放中心放大n倍</td>\n</tr>\n</tbody>\n</table>\n<p>负值时，坐标系方向取反，scale(1,-1)这个操作将使得坐标系变为数学中常用坐标系</p>\n<p>旋转，缩放，位移三者应用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 移动画布</span></span><br><span class=\"line\">canvas.translate(getWidth() / <span class=\"number\">2</span>, getHeight() / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mPaint.setColor(Color.BLUE);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++) &#123;</span><br><span class=\"line\">\tcanvas.drawCircle(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>, mPaint);</span><br><span class=\"line\">\tcanvas.drawCircle(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">180</span>, mPaint);</span><br><span class=\"line\">\tcanvas.rotate(j);</span><br><span class=\"line\">\t<span class=\"comment\">// 旋转画布 并画线![enter description here][6]</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">float</span> i = j; i &lt;= <span class=\"number\">360f</span>; i += <span class=\"number\">10f</span>) &#123;</span><br><span class=\"line\">\t\tcanvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">180</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>, mPaint);</span><br><span class=\"line\">\t\tcanvas.rotate(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcanvas.scale(<span class=\"number\">0.75f</span>, <span class=\"number\">0.75f</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/2016-12-30-自定义View高级知识点(一)/scale_ratote_translate.png\" alt=\"nothing\" title=\"scale_ratote_translate.png\"></p>\n<p>4.错切（skew）</p>\n<blockquote>\n<p>错切是在某方向上，按照一定的比例对图形的每个点到某条平行于该方向的直线的有向距离做放缩得到的平面图形。(度娘)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">skew</span><span class=\"params\">(<span class=\"keyword\">float</span> sx, <span class=\"keyword\">float</span> sy)</span> </span>&#123;</span><br><span class=\"line\">    native_skew(mNativeCanvasWrapper, sx, sy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas.translate(getWidth()/<span class=\"number\">2</span>,getHeight()/<span class=\"number\">2</span>);</span><br><span class=\"line\">RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">mPaint.setColor(Color.RED);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.skew(-<span class=\"number\">1</span>,<span class=\"number\">0</span>); <span class=\"comment\">// 向左倾斜45度</span></span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br></pre></td></tr></table></figure></p>\n<p>效果图：</p>\n<p><img src=\"/img/2016-12-30-自定义View高级知识点(一)/skew.png\" alt=\"错切\" title=\"skew.png\"></p>\n","site":{"data":{}},"excerpt":"<p>自定义View中比较重要的一些知识点，本篇主要学习Canvas的一些基本使用。</p>","more":"<h2 id=\"Canvas可以画的东西\"><a href=\"#Canvas可以画的东西\" class=\"headerlink\" title=\"Canvas可以画的东西\"></a>Canvas可以画的东西</h2><table>\n<thead>\n<tr>\n<th>操作类型</th>\n<th>相关API</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>绘制颜色</td>\n<td>drawColor, drawRGB, drawARGB</td>\n<td>使用单一颜色填充整个画布</td>\n</tr>\n<tr>\n<td>绘制基本形状</td>\n<td>drawPoint, drawPoints, drawLine, drawLines, drawRect, drawRoundRect, drawOval, drawCircle, drawArc</td>\n<td>依次为 点、线、矩形、圆角矩形、椭圆、圆、圆弧</td>\n</tr>\n<tr>\n<td>绘制图片</td>\n<td>drawBitmap, drawPicture</td>\n<td>绘制位图和图片</td>\n</tr>\n<tr>\n<td>绘制文本</td>\n<td>drawText,    drawPosText, drawTextOnPath</td>\n<td>依次为 绘制文字、绘制文字时指定每个文字位置、根据路径绘制文字</td>\n</tr>\n<tr>\n<td>绘制路径</td>\n<td>drawPath</td>\n<td>绘制路径，绘制贝塞尔曲线时也需要用到该函数</td>\n</tr>\n<tr>\n<td>顶点操作</td>\n<td>drawVertices, drawBitmapMesh</td>\n<td>通过对顶点操作可以使图像形变，drawVertices直接对画布作用、 drawBitmapMesh只对绘制的Bitmap作用</td>\n</tr>\n<tr>\n<td>画布剪裁</td>\n<td>clipPath,    clipRect</td>\n<td>设置画布的显示区域</td>\n</tr>\n<tr>\n<td>画布快照</td>\n<td>save, restore, saveLayerXxx, restoreToCount, getSaveCount</td>\n<td>依次为 保存当前状态、 回滚到上一次保存的状态、 保存图层状态、 回滚到指定状态、 获取保存次数</td>\n</tr>\n<tr>\n<td>画布变换</td>\n<td>translate, scale, rotate, skew</td>\n<td>依次为 位移、缩放、 旋转、错切</td>\n</tr>\n<tr>\n<td>Matrix(矩阵)</td>\n<td>getMatrix, setMatrix, concat</td>\n<td>实际画布的位移，缩放等操作的都是图像矩阵Matrix，只不过Matrix比较难以理解和使用，故封装了一些常用的方法。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"颜色混合模式-Alpha通道相关\"><a href=\"#颜色混合模式-Alpha通道相关\" class=\"headerlink\" title=\"颜色混合模式(Alpha通道相关)\"></a>颜色混合模式(Alpha通道相关)</h2><p>通过前面介绍我们知道颜色一般都是四个通道(ARGB)的，其中(RGB)控制的是颜色,而A(Alpha)控制的是透明度。</p>\n<p>因为我们的显示屏是没法透明的，因此最终显示在屏幕上的颜色里可以认为没有Alpha通道。Alpha通道主要在两个图像混合的时候生效。</p>\n<p>默认情况下，当一个颜色绘制到Canvas上时的混合模式是这样计算的：</p>\n<p>(RGB通道) 最终颜色 = 绘制的颜色 + (1 - 绘制颜色的透明度) × Canvas上的原有颜色。</p>\n<p>注意：</p>\n<p>1.这里我们一般把每个通道的取值从0(ox00)到255(0xff)映射到0到1的浮点数表示。</p>\n<p>2.这里等式右边的“绘制的颜色”、“Canvas上的原有颜色” 都是经过预乘了自己的Alpha通道的值。如绘制颜色：0x88ffffff，那么参与运算时的每个颜色通道的值不是1.0，而是(1.0 * 0.5333 = 0.5333)。 (其中0.5333 = 0x88/0xff)</p>\n<p>使用这种方式的混合，就会造成后绘制的内容以半透明的方式叠在上面的视觉效果。</p>\n<h2 id=\"Paint-setXfermode模式\"><a href=\"#Paint-setXfermode模式\" class=\"headerlink\" title=\"Paint.setXfermode模式\"></a>Paint.setXfermode模式</h2><p>下表是各个PorterDuff模式的混合计算公式：（D指原本在Canvas上的内容dst，S指绘制输入的内容src，a指alpha通道，c指RGB各个通道）,各种模式如下图所示。</p>\n<p><img src=\"/img/2016-12-30-自定义View高级知识点(一)/PorterDuffMode.jpg\" alt=\"porterDuff的模式\" title=\"PorterDuffMode.jpg\"></p>\n<h2 id=\"onMeasure\"><a href=\"#onMeasure\" class=\"headerlink\" title=\"onMeasure\"></a>onMeasure</h2><p>真正进行测量的是 setMeasuredDimension<br>如果对View的宽高进行修改了，不要调用 super.onMeasure( widthMeasureSpec, heightMeasureSpec); 要调用 setMeasuredDimension( widthsize, heightsize); 这个函数。</p>\n<h2 id=\"paint绘制图形\"><a href=\"#paint绘制图形\" class=\"headerlink\" title=\"paint绘制图形\"></a>paint绘制图形</h2><blockquote>\n<p>一个要点：绘制的基本形状由Canvas确定，但绘制出来的颜色,具体效果则由Paint确定<br>STROKE                //描边<br>FILL                  //填充<br>FILL_AND_STROKE       //描边加填充</p>\n</blockquote>\n<p>1.圆角矩形</p>\n<p>利用圆角矩形也可以绘制出椭圆</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">mPaint.setColor(Color.BLACK);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br><span class=\"line\">mPaint.setColor(Color.RED);</span><br><span class=\"line\">canvas.drawRoundRect(rectF, <span class=\"number\">100</span>, <span class=\"number\">50</span>, mPaint);</span><br></pre></td></tr></table></figure>\n<p>2.椭圆</p>\n<p>椭圆绘制可以理解为做一个矩形的内切圆，如果这是一个正方形那么绘制出来的就是一个圆形</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">400</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">mPaint.setColor(Color.BLACK);</span><br><span class=\"line\">canvas.drawOval(rectF, mPaint);</span><br></pre></td></tr></table></figure>\n<p>3.扇形</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drawArc(RectF oval, <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">startAngle</span><span class=\"params\">(开始角度<span class=\"number\">0</span><span class=\"number\">-360</span>)</span>, <span class=\"keyword\">float</span> <span class=\"title\">sweepAngle</span><span class=\"params\">(扫过角度<span class=\"number\">0</span><span class=\"number\">-360</span>)</span>, <span class=\"keyword\">boolean</span> <span class=\"title\">useCenter</span><span class=\"params\">(是否连接圆心)</span>,Paint paint)</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用中心</span></span><br><span class=\"line\">RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">mPaint.setStyle(Paint.Style.FILL_AND_STROKE); </span><br><span class=\"line\">mPaint.setColor(Color.GRAY);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br><span class=\"line\">mPaint.setStyle(Paint.Style.STROKE);</span><br><span class=\"line\">mPaint.setColor(Color.BLACK);</span><br><span class=\"line\">canvas.drawArc(rectF, <span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"keyword\">true</span>, mPaint);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不使用中心</span></span><br><span class=\"line\">rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">mPaint.setStyle(Paint.Style.FILL_AND_STROKE); <span class=\"comment\">// 填充 并描边</span></span><br><span class=\"line\">mPaint.setColor(Color.GRAY);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br><span class=\"line\">mPaint.setStyle(Paint.Style.STROKE); <span class=\"comment\">// 仅描边</span></span><br><span class=\"line\">mPaint.setColor(Color.RED);</span><br><span class=\"line\">canvas.drawArc(rectF, <span class=\"number\">0</span>, -<span class=\"number\">90</span>, <span class=\"keyword\">false</span>, mPaint);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/2016-12-30-自定义View高级知识点(一)/drawArc.png\" alt=\"扇形\" title=\"drawArc.png\"></p>\n<p>4.画一个圆饼图</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PieChartView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Percent&gt; mPercentList;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PieChartView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PieChartView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PieChartView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class=\"line\">        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);</span><br><span class=\"line\">        mPaint.setStrokeCap(Paint.Cap.ROUND);</span><br><span class=\"line\">        mPaint.setStrokeWidth(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        mPercentList = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        mPercentList.add(<span class=\"keyword\">new</span> Percent(<span class=\"string\">\"1\"</span>, <span class=\"number\">0.4f</span>, Color.WHITE));</span><br><span class=\"line\">        mPercentList.add(<span class=\"keyword\">new</span> Percent(<span class=\"string\">\"2\"</span>, <span class=\"number\">0.4f</span>, Color.BLUE));</span><br><span class=\"line\">        mPercentList.add(<span class=\"keyword\">new</span> Percent(<span class=\"string\">\"3\"</span>, <span class=\"number\">0.2f</span>, Color.RED));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">        RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">400</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">        canvas.drawOval(rectF, mPaint);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">float</span> surplus = <span class=\"number\">1.0f</span>; <span class=\"comment\">// 剩余的范围</span></span><br><span class=\"line\">        <span class=\"keyword\">float</span> startAngle = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Percent percent;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = mPercentList.size(); i &lt; size; i++) &#123;</span><br><span class=\"line\">            percent = mPercentList.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (percent.percent &lt;= surplus) &#123;</span><br><span class=\"line\">                surplus -= percent.percent;</span><br><span class=\"line\">                startAngle += percent.drawArc(mPaint, canvas, startAngle, rectF);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* 采用封装的思想</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Percent</span> </span>&#123;</span><br><span class=\"line\">        String tag;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> percent;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> color;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Percent</span><span class=\"params\">(String tag, <span class=\"keyword\">float</span> percent, <span class=\"keyword\">int</span> color)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.tag = tag;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.percent = percent;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 绘制 这个百分比</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> paint</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> canvas</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> startAngle</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> rectF</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span> 返回绘制的角度大小</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">drawArc</span><span class=\"params\">(Paint paint, Canvas canvas, <span class=\"keyword\">float</span> startAngle, RectF rectF)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> oldColor = paint.getColor();</span><br><span class=\"line\">            Paint.Style oldStyle = paint.getStyle();</span><br><span class=\"line\"></span><br><span class=\"line\">            paint.setColor(color);</span><br><span class=\"line\">            paint.setStyle(Paint.Style.FILL);</span><br><span class=\"line\"></span><br><span class=\"line\">            canvas.drawArc(rectF, startAngle, <span class=\"number\">360</span> * percent, <span class=\"keyword\">true</span>, paint);</span><br><span class=\"line\"></span><br><span class=\"line\">            paint.setColor(oldColor);</span><br><span class=\"line\">            paint.setStyle(oldStyle);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">360</span> * percent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/2016-12-30-自定义View高级知识点(一)/pieChart.png\" alt=\"圆饼图\" title=\"pieChart.png\"></p>\n<h2 id=\"操作画布\"><a href=\"#操作画布\" class=\"headerlink\" title=\"操作画布\"></a>操作画布</h2><p>操作画布，操作的都是坐标系，是对当前坐标系进行移动、旋转、缩放、错切等操作</p>\n<p>操作画布只会影响接下来的绘画，而不会影响之前已经绘画完成的图像</p>\n<p>1.移动画布</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 移动画布</span></span><br><span class=\"line\">canvas.translate(getWidth() / <span class=\"number\">2</span>, getHeight() / <span class=\"number\">2</span>);</span><br><span class=\"line\">canvas.drawCircle(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>, mPaint);</span><br><span class=\"line\">canvas.drawCircle(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">180</span>, mPaint);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 旋转画布 并画线</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">36</span>; i++) &#123;</span><br><span class=\"line\">\tcanvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">180</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>, mPaint);</span><br><span class=\"line\">\tcanvas.rotate(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/2016-12-30-自定义View高级知识点(一)/circleView.png\" alt=\"通过旋转画布实现两圆之间的连线\" title=\"circleView.png\"></p>\n<p>2.旋转画布</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">float</span> degrees)</span> </span>&#123;</span><br><span class=\"line\">    native_rotate(mNativeCanvasWrapper, degrees);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 相对某点缩放</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">float</span> degrees, <span class=\"keyword\">float</span> px, <span class=\"keyword\">float</span> py)</span> </span>&#123;</span><br><span class=\"line\">    translate(px, py);</span><br><span class=\"line\">    rotate(degrees);</span><br><span class=\"line\">    translate(-px, -py);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看下图为相对某点进行缩放，图中的绘制顺序 1.红 2.黄 3.蓝 4.绿</p>\n<p><img src=\"/img/2016-12-30-自定义View高级知识点(一)/scale.png\" alt=\"相对某点缩放\" title=\"scale.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">mPaint.setColor(Color.RED);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.translate(<span class=\"number\">200</span>,<span class=\"number\">200</span>); <span class=\"comment\">// 先将坐标系O移动到相对点P</span></span><br><span class=\"line\">mPaint.setColor(Color.YELLOW);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.rotate(<span class=\"number\">90</span>);<span class=\"comment\">// 在相对点P处将坐标系O进行旋转 O--&gt;o P--&gt;p</span></span><br><span class=\"line\">mPaint.setColor(Color.BLUE);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.translate(-<span class=\"number\">200</span>,-<span class=\"number\">200</span>);<span class=\"comment\">// 将旋转后的坐标系o中的p与P对齐，让以后的操作都仍然相对于P点</span></span><br><span class=\"line\">mPaint.setColor(Color.GREEN);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br></pre></td></tr></table></figure>\n<p>3.缩放画布</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scale</span><span class=\"params\">(<span class=\"keyword\">float</span> sx, <span class=\"keyword\">float</span> sy)</span> </span>&#123;</span><br><span class=\"line\">    native_scale(mNativeCanvasWrapper, sx, sy);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 相对于某点进行缩放，其相对原理与相对某点旋转相同</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scale</span><span class=\"params\">(<span class=\"keyword\">float</span> sx, <span class=\"keyword\">float</span> sy, <span class=\"keyword\">float</span> px, <span class=\"keyword\">float</span> py)</span> </span>&#123;</span><br><span class=\"line\">    translate(px, py);</span><br><span class=\"line\">    scale(sx, sy);</span><br><span class=\"line\">    translate(-px, -py);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>缩放比例(sx,sy)取值范围详解：</p>\n<table>\n<thead>\n<tr>\n<th>取值范围(n)</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[-∞, -1)</td>\n<td>先根据缩放中心放大n倍，再根据中心轴进行翻转</td>\n</tr>\n<tr>\n<td>-1</td>\n<td>根据缩放中心轴进行翻转</td>\n</tr>\n<tr>\n<td>(-1, 0)</td>\n<td>先根据缩放中心缩小到n，再根据中心轴进行翻转</td>\n</tr>\n<tr>\n<td>0</td>\n<td>不会显示，若sx为0，则宽度为0，不会显示，sy同理</td>\n</tr>\n<tr>\n<td>(0, 1)</td>\n<td>根据缩放中心缩小到n</td>\n</tr>\n<tr>\n<td>1</td>\n<td>没有变化</td>\n</tr>\n<tr>\n<td>(1, +∞)</td>\n<td>根据缩放中心放大n倍</td>\n</tr>\n</tbody>\n</table>\n<p>负值时，坐标系方向取反，scale(1,-1)这个操作将使得坐标系变为数学中常用坐标系</p>\n<p>旋转，缩放，位移三者应用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 移动画布</span></span><br><span class=\"line\">canvas.translate(getWidth() / <span class=\"number\">2</span>, getHeight() / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mPaint.setColor(Color.BLUE);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++) &#123;</span><br><span class=\"line\">\tcanvas.drawCircle(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>, mPaint);</span><br><span class=\"line\">\tcanvas.drawCircle(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">180</span>, mPaint);</span><br><span class=\"line\">\tcanvas.rotate(j);</span><br><span class=\"line\">\t<span class=\"comment\">// 旋转画布 并画线![enter description here][6]</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">float</span> i = j; i &lt;= <span class=\"number\">360f</span>; i += <span class=\"number\">10f</span>) &#123;</span><br><span class=\"line\">\t\tcanvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">180</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>, mPaint);</span><br><span class=\"line\">\t\tcanvas.rotate(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcanvas.scale(<span class=\"number\">0.75f</span>, <span class=\"number\">0.75f</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/2016-12-30-自定义View高级知识点(一)/scale_ratote_translate.png\" alt=\"nothing\" title=\"scale_ratote_translate.png\"></p>\n<p>4.错切（skew）</p>\n<blockquote>\n<p>错切是在某方向上，按照一定的比例对图形的每个点到某条平行于该方向的直线的有向距离做放缩得到的平面图形。(度娘)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">skew</span><span class=\"params\">(<span class=\"keyword\">float</span> sx, <span class=\"keyword\">float</span> sy)</span> </span>&#123;</span><br><span class=\"line\">    native_skew(mNativeCanvasWrapper, sx, sy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas.translate(getWidth()/<span class=\"number\">2</span>,getHeight()/<span class=\"number\">2</span>);</span><br><span class=\"line\">RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">mPaint.setColor(Color.RED);</span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.skew(-<span class=\"number\">1</span>,<span class=\"number\">0</span>); <span class=\"comment\">// 向左倾斜45度</span></span><br><span class=\"line\">canvas.drawRect(rectF, mPaint);</span><br></pre></td></tr></table></figure></p>\n<p>效果图：</p>\n<p><img src=\"/img/2016-12-30-自定义View高级知识点(一)/skew.png\" alt=\"错切\" title=\"skew.png\"></p>"},{"title":"2017-1-18-ee中的小知识","date":"2017-01-18T07:08:20.000Z","layout":"post","_content":"\n<!-- more -->\n## 简单的知识\n\n1、邮箱的正则表达式\n\n```\n\"\\\\b^['_a-z0-9-\\\\+]+(\\\\.['_a-z0-9-\\\\+]+)*@[a-z0-9-]+(\\\\.[a-z0-9-]+)*\\\\.([a-z]{2}|aero|arpa|asia|biz|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|nato|net|org|pro|tel|travel|xxx)$\\\\b\"\n```\n\n2、web app运行时期的资源获取\n\n```java\npath = \"/WEB-INF/classes/com/xxx.file\";\npath = \"/WEB-INF/classes/xxx.file\";\npath = \"/WEB-INF/xxx.file\";\n\nString realPath =  servletContext.getRealPath(path);//根据资源名称得到资源的绝对路径.\n\nnew InputFileStream(realPath);\n```\n\n可以得到当前应用任何位置的任何资源。\n\n3、ClassLoader获取src文件夹下的资源\n\nxxx.class.getClassLoader().getResourceAsStream(path);\n\npath的根目录一半从src目录开始\n\nxxx.class.getResourceAsStream(path);\n此时path的根目录从对应类的文件夹开始\n\n4、区分绝对路径和相对路径\n\n相对路径：\n\t- \".\" 开头 “./img/xxxxxx”\n\t- 无前缀 \"img/xxxxxx”\"\n绝对路径：\n\t- \"/\" 开头 \"/img/xxxxxx”\"","source":"_posts/2017-1-18-ee中的小知识.md","raw":"---\ntitle: 2017-1-18-ee中的小知识\ndate: 2017-1-18 15:8:20 \ncategories: Java EE\ntags: [mvc]\nlayout: post\n---\n\n<!-- more -->\n## 简单的知识\n\n1、邮箱的正则表达式\n\n```\n\"\\\\b^['_a-z0-9-\\\\+]+(\\\\.['_a-z0-9-\\\\+]+)*@[a-z0-9-]+(\\\\.[a-z0-9-]+)*\\\\.([a-z]{2}|aero|arpa|asia|biz|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|nato|net|org|pro|tel|travel|xxx)$\\\\b\"\n```\n\n2、web app运行时期的资源获取\n\n```java\npath = \"/WEB-INF/classes/com/xxx.file\";\npath = \"/WEB-INF/classes/xxx.file\";\npath = \"/WEB-INF/xxx.file\";\n\nString realPath =  servletContext.getRealPath(path);//根据资源名称得到资源的绝对路径.\n\nnew InputFileStream(realPath);\n```\n\n可以得到当前应用任何位置的任何资源。\n\n3、ClassLoader获取src文件夹下的资源\n\nxxx.class.getClassLoader().getResourceAsStream(path);\n\npath的根目录一半从src目录开始\n\nxxx.class.getResourceAsStream(path);\n此时path的根目录从对应类的文件夹开始\n\n4、区分绝对路径和相对路径\n\n相对路径：\n\t- \".\" 开头 “./img/xxxxxx”\n\t- 无前缀 \"img/xxxxxx”\"\n绝对路径：\n\t- \"/\" 开头 \"/img/xxxxxx”\"","slug":"2017-1-18-ee中的小知识","published":1,"updated":"2018-01-02T01:08:38.446Z","comments":1,"photos":[],"link":"","_id":"cjbx3x357000gizijbpmyto58","content":"<a id=\"more\"></a>\n<h2 id=\"简单的知识\"><a href=\"#简单的知识\" class=\"headerlink\" title=\"简单的知识\"></a>简单的知识</h2><p>1、邮箱的正则表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;\\\\b^[&apos;_a-z0-9-\\\\+]+(\\\\.[&apos;_a-z0-9-\\\\+]+)*@[a-z0-9-]+(\\\\.[a-z0-9-]+)*\\\\.([a-z]&#123;2&#125;|aero|arpa|asia|biz|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|nato|net|org|pro|tel|travel|xxx)$\\\\b&quot;</span><br></pre></td></tr></table></figure>\n<p>2、web app运行时期的资源获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path = <span class=\"string\">\"/WEB-INF/classes/com/xxx.file\"</span>;</span><br><span class=\"line\">path = <span class=\"string\">\"/WEB-INF/classes/xxx.file\"</span>;</span><br><span class=\"line\">path = <span class=\"string\">\"/WEB-INF/xxx.file\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">String realPath =  servletContext.getRealPath(path);<span class=\"comment\">//根据资源名称得到资源的绝对路径.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> InputFileStream(realPath);</span><br></pre></td></tr></table></figure>\n<p>可以得到当前应用任何位置的任何资源。</p>\n<p>3、ClassLoader获取src文件夹下的资源</p>\n<p>xxx.class.getClassLoader().getResourceAsStream(path);</p>\n<p>path的根目录一半从src目录开始</p>\n<p>xxx.class.getResourceAsStream(path);<br>此时path的根目录从对应类的文件夹开始</p>\n<p>4、区分绝对路径和相对路径</p>\n<p>相对路径：</p>\n<pre><code>- &quot;.&quot; 开头 “./img/xxxxxx”\n- 无前缀 &quot;img/xxxxxx”&quot;\n</code></pre><p>绝对路径：</p>\n<pre><code>- &quot;/&quot; 开头 &quot;/img/xxxxxx”&quot;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简单的知识\"><a href=\"#简单的知识\" class=\"headerlink\" title=\"简单的知识\"></a>简单的知识</h2><p>1、邮箱的正则表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;\\\\b^[&apos;_a-z0-9-\\\\+]+(\\\\.[&apos;_a-z0-9-\\\\+]+)*@[a-z0-9-]+(\\\\.[a-z0-9-]+)*\\\\.([a-z]&#123;2&#125;|aero|arpa|asia|biz|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|nato|net|org|pro|tel|travel|xxx)$\\\\b&quot;</span><br></pre></td></tr></table></figure>\n<p>2、web app运行时期的资源获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path = <span class=\"string\">\"/WEB-INF/classes/com/xxx.file\"</span>;</span><br><span class=\"line\">path = <span class=\"string\">\"/WEB-INF/classes/xxx.file\"</span>;</span><br><span class=\"line\">path = <span class=\"string\">\"/WEB-INF/xxx.file\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">String realPath =  servletContext.getRealPath(path);<span class=\"comment\">//根据资源名称得到资源的绝对路径.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> InputFileStream(realPath);</span><br></pre></td></tr></table></figure>\n<p>可以得到当前应用任何位置的任何资源。</p>\n<p>3、ClassLoader获取src文件夹下的资源</p>\n<p>xxx.class.getClassLoader().getResourceAsStream(path);</p>\n<p>path的根目录一半从src目录开始</p>\n<p>xxx.class.getResourceAsStream(path);<br>此时path的根目录从对应类的文件夹开始</p>\n<p>4、区分绝对路径和相对路径</p>\n<p>相对路径：</p>\n<pre><code>- &quot;.&quot; 开头 “./img/xxxxxx”\n- 无前缀 &quot;img/xxxxxx”&quot;\n</code></pre><p>绝对路径：</p>\n<pre><code>- &quot;/&quot; 开头 &quot;/img/xxxxxx”&quot;\n</code></pre>"},{"title":"2017-1-20-事务连接池","date":"2017-01-20T06:00:37.000Z","layout":"post","_content":"\n<!-- more -->\n## 事务 Transaction\n\nMySql默认是语句自动提交事物的\n\n命令行中使用begin开始事物，rollback回滚事务，commit提交事务。\n\nJDBC中有如下方法开启一个事物\nConnection.setAutoCommit(false); // 关闭自动提交事务\nConnection.rollback(); // 回滚\nConnection.commit(); // 提交\n\n1、事务具有四个特性：\n\n原子性、一致性、隔离性、持久性(更改后不可回滚)\n\n2、事务的隔离性\n\ncommand：\n\nselect @@tx_isolation; // 查询当前的事务级别\nset transaction isolation level xxxx; // 临时设置当前的事务级别\n\nJDBC：\n\n``` java\npublic static final int TRANSACTION_NONE 0; // 不设置事务\npublic static final int TRANSACTION_READ_UNCOMMITTED 1;  // 不能避免脏读、不可重复读、虚读\npublic static final int TRANSACTION_READ_COMMITTED 2;  // 避免脏读，不可重复读、虚读\npublic static final int TRANSACTION_REPEATABLE_READ 4;  // 避免脏读、不可重复读，可能会虚读\npublic static final int TRANSACTION_SERIALIZABLE 8;  // 全部避免，同步，一个事务会等待另一个事务的commit\n```\n\nJDBC设置事务的级别\nconnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n\n\n## 连接池 \n\n可以使用Java统一标准DataSource(数据源)写自己的连接池(集合)。\n\nC3P0 和 common-dbpc\n\nJNDI (java naming directory interface) 让服务器管理连接池，jndi由多个在服务器context.xml配置的连接池信息。","source":"_posts/2017-1-20-事务连接池.md","raw":"---\ntitle: 2017-1-20-事务连接池\ndate: 2017-1-20 14:0:37 \ncategories: Java EE\ntags: [SQL]\nlayout: post\n---\n\n<!-- more -->\n## 事务 Transaction\n\nMySql默认是语句自动提交事物的\n\n命令行中使用begin开始事物，rollback回滚事务，commit提交事务。\n\nJDBC中有如下方法开启一个事物\nConnection.setAutoCommit(false); // 关闭自动提交事务\nConnection.rollback(); // 回滚\nConnection.commit(); // 提交\n\n1、事务具有四个特性：\n\n原子性、一致性、隔离性、持久性(更改后不可回滚)\n\n2、事务的隔离性\n\ncommand：\n\nselect @@tx_isolation; // 查询当前的事务级别\nset transaction isolation level xxxx; // 临时设置当前的事务级别\n\nJDBC：\n\n``` java\npublic static final int TRANSACTION_NONE 0; // 不设置事务\npublic static final int TRANSACTION_READ_UNCOMMITTED 1;  // 不能避免脏读、不可重复读、虚读\npublic static final int TRANSACTION_READ_COMMITTED 2;  // 避免脏读，不可重复读、虚读\npublic static final int TRANSACTION_REPEATABLE_READ 4;  // 避免脏读、不可重复读，可能会虚读\npublic static final int TRANSACTION_SERIALIZABLE 8;  // 全部避免，同步，一个事务会等待另一个事务的commit\n```\n\nJDBC设置事务的级别\nconnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n\n\n## 连接池 \n\n可以使用Java统一标准DataSource(数据源)写自己的连接池(集合)。\n\nC3P0 和 common-dbpc\n\nJNDI (java naming directory interface) 让服务器管理连接池，jndi由多个在服务器context.xml配置的连接池信息。","slug":"2017-1-20-事务连接池","published":1,"updated":"2018-01-02T01:08:38.446Z","comments":1,"photos":[],"link":"","_id":"cjbx3x359000hizijwohfq5v2","content":"<a id=\"more\"></a>\n<h2 id=\"事务-Transaction\"><a href=\"#事务-Transaction\" class=\"headerlink\" title=\"事务 Transaction\"></a>事务 Transaction</h2><p>MySql默认是语句自动提交事物的</p>\n<p>命令行中使用begin开始事物，rollback回滚事务，commit提交事务。</p>\n<p>JDBC中有如下方法开启一个事物<br>Connection.setAutoCommit(false); // 关闭自动提交事务<br>Connection.rollback(); // 回滚<br>Connection.commit(); // 提交</p>\n<p>1、事务具有四个特性：</p>\n<p>原子性、一致性、隔离性、持久性(更改后不可回滚)</p>\n<p>2、事务的隔离性</p>\n<p>command：</p>\n<p>select @@tx_isolation; // 查询当前的事务级别<br>set transaction isolation level xxxx; // 临时设置当前的事务级别</p>\n<p>JDBC：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_NONE <span class=\"number\">0</span>; <span class=\"comment\">// 不设置事务</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_READ_UNCOMMITTED <span class=\"number\">1</span>;  <span class=\"comment\">// 不能避免脏读、不可重复读、虚读</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_READ_COMMITTED <span class=\"number\">2</span>;  <span class=\"comment\">// 避免脏读，不可重复读、虚读</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_REPEATABLE_READ <span class=\"number\">4</span>;  <span class=\"comment\">// 避免脏读、不可重复读，可能会虚读</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_SERIALIZABLE <span class=\"number\">8</span>;  <span class=\"comment\">// 全部避免，同步，一个事务会等待另一个事务的commit</span></span><br></pre></td></tr></table></figure>\n<p>JDBC设置事务的级别<br>connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);</p>\n<h2 id=\"连接池\"><a href=\"#连接池\" class=\"headerlink\" title=\"连接池\"></a>连接池</h2><p>可以使用Java统一标准DataSource(数据源)写自己的连接池(集合)。</p>\n<p>C3P0 和 common-dbpc</p>\n<p>JNDI (java naming directory interface) 让服务器管理连接池，jndi由多个在服务器context.xml配置的连接池信息。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"事务-Transaction\"><a href=\"#事务-Transaction\" class=\"headerlink\" title=\"事务 Transaction\"></a>事务 Transaction</h2><p>MySql默认是语句自动提交事物的</p>\n<p>命令行中使用begin开始事物，rollback回滚事务，commit提交事务。</p>\n<p>JDBC中有如下方法开启一个事物<br>Connection.setAutoCommit(false); // 关闭自动提交事务<br>Connection.rollback(); // 回滚<br>Connection.commit(); // 提交</p>\n<p>1、事务具有四个特性：</p>\n<p>原子性、一致性、隔离性、持久性(更改后不可回滚)</p>\n<p>2、事务的隔离性</p>\n<p>command：</p>\n<p>select @@tx_isolation; // 查询当前的事务级别<br>set transaction isolation level xxxx; // 临时设置当前的事务级别</p>\n<p>JDBC：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_NONE <span class=\"number\">0</span>; <span class=\"comment\">// 不设置事务</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_READ_UNCOMMITTED <span class=\"number\">1</span>;  <span class=\"comment\">// 不能避免脏读、不可重复读、虚读</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_READ_COMMITTED <span class=\"number\">2</span>;  <span class=\"comment\">// 避免脏读，不可重复读、虚读</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_REPEATABLE_READ <span class=\"number\">4</span>;  <span class=\"comment\">// 避免脏读、不可重复读，可能会虚读</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_SERIALIZABLE <span class=\"number\">8</span>;  <span class=\"comment\">// 全部避免，同步，一个事务会等待另一个事务的commit</span></span><br></pre></td></tr></table></figure>\n<p>JDBC设置事务的级别<br>connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);</p>\n<h2 id=\"连接池\"><a href=\"#连接池\" class=\"headerlink\" title=\"连接池\"></a>连接池</h2><p>可以使用Java统一标准DataSource(数据源)写自己的连接池(集合)。</p>\n<p>C3P0 和 common-dbpc</p>\n<p>JNDI (java naming directory interface) 让服务器管理连接池，jndi由多个在服务器context.xml配置的连接池信息。</p>"},{"title":"2017-1-31-Listener与Filter","date":"2017-01-31T06:25:24.000Z","layout":"post","_content":"\n<!-- more -->\n## jsonConfig\n\njsonConfig可以通过配置不需要的bean属性，在parse阶段过滤指定属性。\n\n## 监听器Listener\n\n实现对应的接口：\n\n1、监听生命周期 （web.xml 配置listener）\nHttpSessionListener\n\nServletContextListener\n\nServletRequestListener\n\n2、监听属性添加 （web.xml 配置listener）\nHttpSessionAttributeListener\n\nServletContextAttributeListener\n\nServletRequestAttributeListener\n\n3、它是用于监听javaBean对象是否绑定到了session域，用于java bean实现接口得到通知\nHttpSessionBindingListener\n\n4、钝化和活化对象 bean实现 HttpSessionActivationListener\n\n我们还需要个context.xml文件来配置钝化时存储的文件\n在meta-inf目录下创建一个context.xml文件\n``` xml\n<Context>\n\t<Manager className=\"org.apache.catalina.session.PersistentManager\" maxIdleSwap=\"1\">\n\t\t<Store className=\"org.apache.catalina.session.FileStore\" directory=\"存储的文件夹名\"/>\n\t</Manager>\n</Context>\n```\n\n## Filter 过滤器\n\nJavaweb中的过滤器可以拦截所有访问web资源的请求或响应操作。\n\n实现Filter后 需在web.xml中进行配置（类似servlet的配置）\n\n``` java\n\t@Override\n\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\t// 允许当前的request向下传递，不传递无法正常访问\n\t\tchain.doFilter(request, response);\n\n\t}\n```\n\n一个请求可以被多个Filter拦截，拦截的顺序是web.xml中的配置顺序，**第一个filter会在最后一个filter结束后结束**\n\n生命周期：\n\n在服务器启动时 init\n\n在一个请求到来时 doFilter\n\n在服务器结束时 destroy\n\n### Filter拦截的配置\n\n拦截指定的servlet(不用再写url-pattern)\n``` xml\n<filter-mapping>\n\t\t<filter-name>MyFilter2</filter-name>\n\t\t<servlet-name>xxxx</servlet-name>\n</filter-mapping>\n```\n\n\n拦截一次request的转发和请求\n\nfilter会配置所拦截的所有方式\n``` xml\n<filter-mapping>\n\t\t<filter-name>MyFilter2</filter-name>\n\t\t<url-pattern>/*</url-pattern>\n\t\t<dispatcher>FORWARD</dispatcher>\n\t\t<dispatcher>REQUEST</dispatcher>\n</filter-mapping>\n```\n\n## 编码方式\n\nJava在其网络传输中使用的是iso-8859-1格式的编码。因为iso-8859-1是一种单字节只支持0-255的编码方式。\n\n在JSP页面获取表单的值时会出现乱码，有两种解决方法：\n\n1.post 在调用getParameter之前通过request.setCharacterEncoding设置字符编码\n\n2.get 调用new String(str.getBytes(\"iso8859-1\"), \"UTF-8\");编码后解码\n\n``` java\n// java判断是否可以解码\nCharset.forName(\"UTF-8\").newEncoder().canEncode(req.getParameter(\"id\"))\n```\n\n**new String(str.getBytes(\"iso8859-1\"), \"UTF-8\");该方法仅仅是在出现浏览器不以U8转换URL时才会使用到**\n\njs中也可以将uri转换为u8格式的url\n\n``` javascript\nfunction enc(uri) {\n\tvar u = encodeURI(uri);\n\talert(u);\n\tlocation.href = u;\n}\n```\n\n## 动态代理+aop\n\n代理机制需要两个要素：1、被代理对象 2、代理对象\n\n``` java\n\tpublic Object getPoxy() {\n\t\t// 被代理对象\n\t\tfinal MyFilter myFilter = new MyFilter();\n\t\t\n\t\t// 代理对象\n\t\treturn Proxy.newProxyInstance(classLoader\"被代理对象的加载器\", interfaces[]“被代理对象所具有的接口对象”,invokeHandler“调用方法的处理类”);\n\t}\n```\n\nAOP 将对应的方法在调用前进行拦截，并穿插其他的信息，从而保证原调用方法不被改动\n```java\n\tpublic Object getPoxy() {\n\t\tfinal MyFilter myFilter = new MyFilter();\n\t\treturn Proxy.newProxyInstance(MyFilter.class.getClassLoader(), MyFilter.class.getInterfaces(),\n\t\t\t\tnew InvocationHandler() {\n\t\t\t\t\t// 返回调用方法的结构\n\t\t\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t\t\t\t\t...\n\t\t\t\t\t\tObject result = method.invoke(myFilter, args);\n\t\t\t\t\t\t...\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n```","source":"_posts/2017-1-31-Listener与Filter.md","raw":"---\ntitle: 2017-1-31-Listener与Filter\ndate: 2017-1-31 14:25:24 \ncategories: Java EE\ntags: [JavaEE]\nlayout: post\n---\n\n<!-- more -->\n## jsonConfig\n\njsonConfig可以通过配置不需要的bean属性，在parse阶段过滤指定属性。\n\n## 监听器Listener\n\n实现对应的接口：\n\n1、监听生命周期 （web.xml 配置listener）\nHttpSessionListener\n\nServletContextListener\n\nServletRequestListener\n\n2、监听属性添加 （web.xml 配置listener）\nHttpSessionAttributeListener\n\nServletContextAttributeListener\n\nServletRequestAttributeListener\n\n3、它是用于监听javaBean对象是否绑定到了session域，用于java bean实现接口得到通知\nHttpSessionBindingListener\n\n4、钝化和活化对象 bean实现 HttpSessionActivationListener\n\n我们还需要个context.xml文件来配置钝化时存储的文件\n在meta-inf目录下创建一个context.xml文件\n``` xml\n<Context>\n\t<Manager className=\"org.apache.catalina.session.PersistentManager\" maxIdleSwap=\"1\">\n\t\t<Store className=\"org.apache.catalina.session.FileStore\" directory=\"存储的文件夹名\"/>\n\t</Manager>\n</Context>\n```\n\n## Filter 过滤器\n\nJavaweb中的过滤器可以拦截所有访问web资源的请求或响应操作。\n\n实现Filter后 需在web.xml中进行配置（类似servlet的配置）\n\n``` java\n\t@Override\n\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\t// 允许当前的request向下传递，不传递无法正常访问\n\t\tchain.doFilter(request, response);\n\n\t}\n```\n\n一个请求可以被多个Filter拦截，拦截的顺序是web.xml中的配置顺序，**第一个filter会在最后一个filter结束后结束**\n\n生命周期：\n\n在服务器启动时 init\n\n在一个请求到来时 doFilter\n\n在服务器结束时 destroy\n\n### Filter拦截的配置\n\n拦截指定的servlet(不用再写url-pattern)\n``` xml\n<filter-mapping>\n\t\t<filter-name>MyFilter2</filter-name>\n\t\t<servlet-name>xxxx</servlet-name>\n</filter-mapping>\n```\n\n\n拦截一次request的转发和请求\n\nfilter会配置所拦截的所有方式\n``` xml\n<filter-mapping>\n\t\t<filter-name>MyFilter2</filter-name>\n\t\t<url-pattern>/*</url-pattern>\n\t\t<dispatcher>FORWARD</dispatcher>\n\t\t<dispatcher>REQUEST</dispatcher>\n</filter-mapping>\n```\n\n## 编码方式\n\nJava在其网络传输中使用的是iso-8859-1格式的编码。因为iso-8859-1是一种单字节只支持0-255的编码方式。\n\n在JSP页面获取表单的值时会出现乱码，有两种解决方法：\n\n1.post 在调用getParameter之前通过request.setCharacterEncoding设置字符编码\n\n2.get 调用new String(str.getBytes(\"iso8859-1\"), \"UTF-8\");编码后解码\n\n``` java\n// java判断是否可以解码\nCharset.forName(\"UTF-8\").newEncoder().canEncode(req.getParameter(\"id\"))\n```\n\n**new String(str.getBytes(\"iso8859-1\"), \"UTF-8\");该方法仅仅是在出现浏览器不以U8转换URL时才会使用到**\n\njs中也可以将uri转换为u8格式的url\n\n``` javascript\nfunction enc(uri) {\n\tvar u = encodeURI(uri);\n\talert(u);\n\tlocation.href = u;\n}\n```\n\n## 动态代理+aop\n\n代理机制需要两个要素：1、被代理对象 2、代理对象\n\n``` java\n\tpublic Object getPoxy() {\n\t\t// 被代理对象\n\t\tfinal MyFilter myFilter = new MyFilter();\n\t\t\n\t\t// 代理对象\n\t\treturn Proxy.newProxyInstance(classLoader\"被代理对象的加载器\", interfaces[]“被代理对象所具有的接口对象”,invokeHandler“调用方法的处理类”);\n\t}\n```\n\nAOP 将对应的方法在调用前进行拦截，并穿插其他的信息，从而保证原调用方法不被改动\n```java\n\tpublic Object getPoxy() {\n\t\tfinal MyFilter myFilter = new MyFilter();\n\t\treturn Proxy.newProxyInstance(MyFilter.class.getClassLoader(), MyFilter.class.getInterfaces(),\n\t\t\t\tnew InvocationHandler() {\n\t\t\t\t\t// 返回调用方法的结构\n\t\t\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t\t\t\t\t...\n\t\t\t\t\t\tObject result = method.invoke(myFilter, args);\n\t\t\t\t\t\t...\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n```","slug":"2017-1-31-Listener与Filter","published":1,"updated":"2018-01-02T01:08:38.446Z","comments":1,"photos":[],"link":"","_id":"cjbx3x35d000lizijq9ceiu9e","content":"<a id=\"more\"></a>\n<h2 id=\"jsonConfig\"><a href=\"#jsonConfig\" class=\"headerlink\" title=\"jsonConfig\"></a>jsonConfig</h2><p>jsonConfig可以通过配置不需要的bean属性，在parse阶段过滤指定属性。</p>\n<h2 id=\"监听器Listener\"><a href=\"#监听器Listener\" class=\"headerlink\" title=\"监听器Listener\"></a>监听器Listener</h2><p>实现对应的接口：</p>\n<p>1、监听生命周期 （web.xml 配置listener）<br>HttpSessionListener</p>\n<p>ServletContextListener</p>\n<p>ServletRequestListener</p>\n<p>2、监听属性添加 （web.xml 配置listener）<br>HttpSessionAttributeListener</p>\n<p>ServletContextAttributeListener</p>\n<p>ServletRequestAttributeListener</p>\n<p>3、它是用于监听javaBean对象是否绑定到了session域，用于java bean实现接口得到通知<br>HttpSessionBindingListener</p>\n<p>4、钝化和活化对象 bean实现 HttpSessionActivationListener</p>\n<p>我们还需要个context.xml文件来配置钝化时存储的文件<br>在meta-inf目录下创建一个context.xml文件<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Context</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Manager</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.session.PersistentManager\"</span> <span class=\"attr\">maxIdleSwap</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Store</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.session.FileStore\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"存储的文件夹名\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">Manager</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Context</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Filter-过滤器\"><a href=\"#Filter-过滤器\" class=\"headerlink\" title=\"Filter 过滤器\"></a>Filter 过滤器</h2><p>Javaweb中的过滤器可以拦截所有访问web资源的请求或响应操作。</p>\n<p>实现Filter后 需在web.xml中进行配置（类似servlet的配置）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 允许当前的request向下传递，不传递无法正常访问</span></span><br><span class=\"line\">\tchain.doFilter(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个请求可以被多个Filter拦截，拦截的顺序是web.xml中的配置顺序，<strong>第一个filter会在最后一个filter结束后结束</strong></p>\n<p>生命周期：</p>\n<p>在服务器启动时 init</p>\n<p>在一个请求到来时 doFilter</p>\n<p>在服务器结束时 destroy</p>\n<h3 id=\"Filter拦截的配置\"><a href=\"#Filter拦截的配置\" class=\"headerlink\" title=\"Filter拦截的配置\"></a>Filter拦截的配置</h3><p>拦截指定的servlet(不用再写url-pattern)<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>MyFilter2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>xxxx<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>拦截一次request的转发和请求</p>\n<p>filter会配置所拦截的所有方式<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>MyFilter2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dispatcher</span>&gt;</span>FORWARD<span class=\"tag\">&lt;/<span class=\"name\">dispatcher</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dispatcher</span>&gt;</span>REQUEST<span class=\"tag\">&lt;/<span class=\"name\">dispatcher</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编码方式\"><a href=\"#编码方式\" class=\"headerlink\" title=\"编码方式\"></a>编码方式</h2><p>Java在其网络传输中使用的是iso-8859-1格式的编码。因为iso-8859-1是一种单字节只支持0-255的编码方式。</p>\n<p>在JSP页面获取表单的值时会出现乱码，有两种解决方法：</p>\n<p>1.post 在调用getParameter之前通过request.setCharacterEncoding设置字符编码</p>\n<p>2.get 调用new String(str.getBytes(“iso8859-1”), “UTF-8”);编码后解码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// java判断是否可以解码</span></span><br><span class=\"line\">Charset.forName(<span class=\"string\">\"UTF-8\"</span>).newEncoder().canEncode(req.getParameter(<span class=\"string\">\"id\"</span>))</span><br></pre></td></tr></table></figure>\n<p><strong>new String(str.getBytes(“iso8859-1”), “UTF-8”);该方法仅仅是在出现浏览器不以U8转换URL时才会使用到</strong></p>\n<p>js中也可以将uri转换为u8格式的url</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enc</span>(<span class=\"params\">uri</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> u = <span class=\"built_in\">encodeURI</span>(uri);</span><br><span class=\"line\">\talert(u);</span><br><span class=\"line\">\tlocation.href = u;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态代理-aop\"><a href=\"#动态代理-aop\" class=\"headerlink\" title=\"动态代理+aop\"></a>动态代理+aop</h2><p>代理机制需要两个要素：1、被代理对象 2、代理对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getPoxy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 被代理对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">final</span> MyFilter myFilter = <span class=\"keyword\">new</span> MyFilter();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 代理对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Proxy.newProxyInstance(classLoader<span class=\"string\">\"被代理对象的加载器\"</span>, interfaces[]“被代理对象所具有的接口对象”,invokeHandler“调用方法的处理类”);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AOP 将对应的方法在调用前进行拦截，并穿插其他的信息，从而保证原调用方法不被改动<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getPoxy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> MyFilter myFilter = <span class=\"keyword\">new</span> MyFilter();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Proxy.newProxyInstance(MyFilter.class.getClassLoader(), MyFilter.class.getInterfaces(),</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> InvocationHandler() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 返回调用方法的结构</span></span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t...</span><br><span class=\"line\">\t\t\t\t\tObject result = method.invoke(myFilter, args);</span><br><span class=\"line\">\t\t\t\t\t...</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"jsonConfig\"><a href=\"#jsonConfig\" class=\"headerlink\" title=\"jsonConfig\"></a>jsonConfig</h2><p>jsonConfig可以通过配置不需要的bean属性，在parse阶段过滤指定属性。</p>\n<h2 id=\"监听器Listener\"><a href=\"#监听器Listener\" class=\"headerlink\" title=\"监听器Listener\"></a>监听器Listener</h2><p>实现对应的接口：</p>\n<p>1、监听生命周期 （web.xml 配置listener）<br>HttpSessionListener</p>\n<p>ServletContextListener</p>\n<p>ServletRequestListener</p>\n<p>2、监听属性添加 （web.xml 配置listener）<br>HttpSessionAttributeListener</p>\n<p>ServletContextAttributeListener</p>\n<p>ServletRequestAttributeListener</p>\n<p>3、它是用于监听javaBean对象是否绑定到了session域，用于java bean实现接口得到通知<br>HttpSessionBindingListener</p>\n<p>4、钝化和活化对象 bean实现 HttpSessionActivationListener</p>\n<p>我们还需要个context.xml文件来配置钝化时存储的文件<br>在meta-inf目录下创建一个context.xml文件<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Context</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Manager</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.session.PersistentManager\"</span> <span class=\"attr\">maxIdleSwap</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Store</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.session.FileStore\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"存储的文件夹名\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">Manager</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Context</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Filter-过滤器\"><a href=\"#Filter-过滤器\" class=\"headerlink\" title=\"Filter 过滤器\"></a>Filter 过滤器</h2><p>Javaweb中的过滤器可以拦截所有访问web资源的请求或响应操作。</p>\n<p>实现Filter后 需在web.xml中进行配置（类似servlet的配置）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 允许当前的request向下传递，不传递无法正常访问</span></span><br><span class=\"line\">\tchain.doFilter(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个请求可以被多个Filter拦截，拦截的顺序是web.xml中的配置顺序，<strong>第一个filter会在最后一个filter结束后结束</strong></p>\n<p>生命周期：</p>\n<p>在服务器启动时 init</p>\n<p>在一个请求到来时 doFilter</p>\n<p>在服务器结束时 destroy</p>\n<h3 id=\"Filter拦截的配置\"><a href=\"#Filter拦截的配置\" class=\"headerlink\" title=\"Filter拦截的配置\"></a>Filter拦截的配置</h3><p>拦截指定的servlet(不用再写url-pattern)<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>MyFilter2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>xxxx<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>拦截一次request的转发和请求</p>\n<p>filter会配置所拦截的所有方式<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>MyFilter2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dispatcher</span>&gt;</span>FORWARD<span class=\"tag\">&lt;/<span class=\"name\">dispatcher</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dispatcher</span>&gt;</span>REQUEST<span class=\"tag\">&lt;/<span class=\"name\">dispatcher</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编码方式\"><a href=\"#编码方式\" class=\"headerlink\" title=\"编码方式\"></a>编码方式</h2><p>Java在其网络传输中使用的是iso-8859-1格式的编码。因为iso-8859-1是一种单字节只支持0-255的编码方式。</p>\n<p>在JSP页面获取表单的值时会出现乱码，有两种解决方法：</p>\n<p>1.post 在调用getParameter之前通过request.setCharacterEncoding设置字符编码</p>\n<p>2.get 调用new String(str.getBytes(“iso8859-1”), “UTF-8”);编码后解码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// java判断是否可以解码</span></span><br><span class=\"line\">Charset.forName(<span class=\"string\">\"UTF-8\"</span>).newEncoder().canEncode(req.getParameter(<span class=\"string\">\"id\"</span>))</span><br></pre></td></tr></table></figure>\n<p><strong>new String(str.getBytes(“iso8859-1”), “UTF-8”);该方法仅仅是在出现浏览器不以U8转换URL时才会使用到</strong></p>\n<p>js中也可以将uri转换为u8格式的url</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enc</span>(<span class=\"params\">uri</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> u = <span class=\"built_in\">encodeURI</span>(uri);</span><br><span class=\"line\">\talert(u);</span><br><span class=\"line\">\tlocation.href = u;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态代理-aop\"><a href=\"#动态代理-aop\" class=\"headerlink\" title=\"动态代理+aop\"></a>动态代理+aop</h2><p>代理机制需要两个要素：1、被代理对象 2、代理对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getPoxy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 被代理对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">final</span> MyFilter myFilter = <span class=\"keyword\">new</span> MyFilter();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 代理对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Proxy.newProxyInstance(classLoader<span class=\"string\">\"被代理对象的加载器\"</span>, interfaces[]“被代理对象所具有的接口对象”,invokeHandler“调用方法的处理类”);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AOP 将对应的方法在调用前进行拦截，并穿插其他的信息，从而保证原调用方法不被改动<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getPoxy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> MyFilter myFilter = <span class=\"keyword\">new</span> MyFilter();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Proxy.newProxyInstance(MyFilter.class.getClassLoader(), MyFilter.class.getInterfaces(),</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> InvocationHandler() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 返回调用方法的结构</span></span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t...</span><br><span class=\"line\">\t\t\t\t\tObject result = method.invoke(myFilter, args);</span><br><span class=\"line\">\t\t\t\t\t...</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"2017-1-9-Path的基本使用","date":"2017-01-09T04:35:44.000Z","layout":"post","_content":"\nPath是自定义View中不可或缺的东西，熟练使用Path可以画出不一般的效果。\n\n<!-- more -->\n\n## path的基本方法\n\npath.lineTo(x,y); // 从上一个点 移动到某点 ，如果没有上一个点就是从当前的canvas坐标系开始\n\npath.moveTo(x,y); // 将下一点移动到某点，移动后下一次的起点将是该点，同时该点不会影响上一次的绘画\n\npath.setLastPoint(x,y); // 设置最后一次操作的点，同样可以改变下一次的起点，但同时会影响上一次的操作\n\npath.close(); // 闭合path， path会找一条最短路径去闭合当前的曲线 move后的点是不会和之前的点进行闭合的\n\n![move和close同时使用][1]\n\n\n## 贝塞尔曲线\npath.quadTo() // 二阶贝塞尔\npath.cubicTo() // 三阶贝塞尔\n\n## Region判断点击\n\nRegion 中包含一个矩形范围可以用来判断是否包含某点 \nregion.contains(point);\n\n## view pager indicator的动画\n\n通过将动画存储在集合中，在不同的pager position下创建对应的动画，让viewpager中offset与动画时间形成比例\n`animator.setCurrentPlayTime((long) (5000.0F * offset));`\n\n## Android中的填充模式\nAndroid中的填充模式有四种，是封装在Path中的一个枚举。\n\n|模式|\t简介|\n|---|---|\n|EVEN_ODD|\t奇偶规则\n|INVERSE_EVEN_ODD|\t反奇偶规则\n|WINDING|\t非零环绕数规则\n|INVERSE_WINDING|\t反非零环绕数规则\n\npaint的填充规则为FILL时 path默认的是winding规则。填充时会有一个范围。\n\n  [1]: /img/2017-1-9-Path的基本使用/move&close.png \"move&close.png\"","source":"_posts/2017-1-9-Path的基本使用.md","raw":"---\ntitle: 2017-1-9-Path的基本使用 \ndate: 2017-1-9 12:35:44 \ncategories: Android\ntags: [Android，自定义View]\nlayout: post\n---\n\nPath是自定义View中不可或缺的东西，熟练使用Path可以画出不一般的效果。\n\n<!-- more -->\n\n## path的基本方法\n\npath.lineTo(x,y); // 从上一个点 移动到某点 ，如果没有上一个点就是从当前的canvas坐标系开始\n\npath.moveTo(x,y); // 将下一点移动到某点，移动后下一次的起点将是该点，同时该点不会影响上一次的绘画\n\npath.setLastPoint(x,y); // 设置最后一次操作的点，同样可以改变下一次的起点，但同时会影响上一次的操作\n\npath.close(); // 闭合path， path会找一条最短路径去闭合当前的曲线 move后的点是不会和之前的点进行闭合的\n\n![move和close同时使用][1]\n\n\n## 贝塞尔曲线\npath.quadTo() // 二阶贝塞尔\npath.cubicTo() // 三阶贝塞尔\n\n## Region判断点击\n\nRegion 中包含一个矩形范围可以用来判断是否包含某点 \nregion.contains(point);\n\n## view pager indicator的动画\n\n通过将动画存储在集合中，在不同的pager position下创建对应的动画，让viewpager中offset与动画时间形成比例\n`animator.setCurrentPlayTime((long) (5000.0F * offset));`\n\n## Android中的填充模式\nAndroid中的填充模式有四种，是封装在Path中的一个枚举。\n\n|模式|\t简介|\n|---|---|\n|EVEN_ODD|\t奇偶规则\n|INVERSE_EVEN_ODD|\t反奇偶规则\n|WINDING|\t非零环绕数规则\n|INVERSE_WINDING|\t反非零环绕数规则\n\npaint的填充规则为FILL时 path默认的是winding规则。填充时会有一个范围。\n\n  [1]: /img/2017-1-9-Path的基本使用/move&close.png \"move&close.png\"","slug":"2017-1-9-Path的基本使用","published":1,"updated":"2018-01-02T01:08:38.446Z","comments":1,"photos":[],"link":"","_id":"cjbx3x35f000nizijha2p8acy","content":"<p>Path是自定义View中不可或缺的东西，熟练使用Path可以画出不一般的效果。</p>\n<a id=\"more\"></a>\n<h2 id=\"path的基本方法\"><a href=\"#path的基本方法\" class=\"headerlink\" title=\"path的基本方法\"></a>path的基本方法</h2><p>path.lineTo(x,y); // 从上一个点 移动到某点 ，如果没有上一个点就是从当前的canvas坐标系开始</p>\n<p>path.moveTo(x,y); // 将下一点移动到某点，移动后下一次的起点将是该点，同时该点不会影响上一次的绘画</p>\n<p>path.setLastPoint(x,y); // 设置最后一次操作的点，同样可以改变下一次的起点，但同时会影响上一次的操作</p>\n<p>path.close(); // 闭合path， path会找一条最短路径去闭合当前的曲线 move后的点是不会和之前的点进行闭合的</p>\n<p><img src=\"/img/2017-1-9-Path的基本使用/move&amp;close.png\" alt=\"move和close同时使用\" title=\"move&amp;close.png\"></p>\n<h2 id=\"贝塞尔曲线\"><a href=\"#贝塞尔曲线\" class=\"headerlink\" title=\"贝塞尔曲线\"></a>贝塞尔曲线</h2><p>path.quadTo() // 二阶贝塞尔<br>path.cubicTo() // 三阶贝塞尔</p>\n<h2 id=\"Region判断点击\"><a href=\"#Region判断点击\" class=\"headerlink\" title=\"Region判断点击\"></a>Region判断点击</h2><p>Region 中包含一个矩形范围可以用来判断是否包含某点<br>region.contains(point);</p>\n<h2 id=\"view-pager-indicator的动画\"><a href=\"#view-pager-indicator的动画\" class=\"headerlink\" title=\"view pager indicator的动画\"></a>view pager indicator的动画</h2><p>通过将动画存储在集合中，在不同的pager position下创建对应的动画，让viewpager中offset与动画时间形成比例<br><code>animator.setCurrentPlayTime((long) (5000.0F * offset));</code></p>\n<h2 id=\"Android中的填充模式\"><a href=\"#Android中的填充模式\" class=\"headerlink\" title=\"Android中的填充模式\"></a>Android中的填充模式</h2><p>Android中的填充模式有四种，是封装在Path中的一个枚举。</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EVEN_ODD</td>\n<td>奇偶规则</td>\n</tr>\n<tr>\n<td>INVERSE_EVEN_ODD</td>\n<td>反奇偶规则</td>\n</tr>\n<tr>\n<td>WINDING</td>\n<td>非零环绕数规则</td>\n</tr>\n<tr>\n<td>INVERSE_WINDING</td>\n<td>反非零环绕数规则</td>\n</tr>\n</tbody>\n</table>\n<p>paint的填充规则为FILL时 path默认的是winding规则。填充时会有一个范围。</p>\n","site":{"data":{}},"excerpt":"<p>Path是自定义View中不可或缺的东西，熟练使用Path可以画出不一般的效果。</p>","more":"<h2 id=\"path的基本方法\"><a href=\"#path的基本方法\" class=\"headerlink\" title=\"path的基本方法\"></a>path的基本方法</h2><p>path.lineTo(x,y); // 从上一个点 移动到某点 ，如果没有上一个点就是从当前的canvas坐标系开始</p>\n<p>path.moveTo(x,y); // 将下一点移动到某点，移动后下一次的起点将是该点，同时该点不会影响上一次的绘画</p>\n<p>path.setLastPoint(x,y); // 设置最后一次操作的点，同样可以改变下一次的起点，但同时会影响上一次的操作</p>\n<p>path.close(); // 闭合path， path会找一条最短路径去闭合当前的曲线 move后的点是不会和之前的点进行闭合的</p>\n<p><img src=\"/img/2017-1-9-Path的基本使用/move&amp;close.png\" alt=\"move和close同时使用\" title=\"move&amp;close.png\"></p>\n<h2 id=\"贝塞尔曲线\"><a href=\"#贝塞尔曲线\" class=\"headerlink\" title=\"贝塞尔曲线\"></a>贝塞尔曲线</h2><p>path.quadTo() // 二阶贝塞尔<br>path.cubicTo() // 三阶贝塞尔</p>\n<h2 id=\"Region判断点击\"><a href=\"#Region判断点击\" class=\"headerlink\" title=\"Region判断点击\"></a>Region判断点击</h2><p>Region 中包含一个矩形范围可以用来判断是否包含某点<br>region.contains(point);</p>\n<h2 id=\"view-pager-indicator的动画\"><a href=\"#view-pager-indicator的动画\" class=\"headerlink\" title=\"view pager indicator的动画\"></a>view pager indicator的动画</h2><p>通过将动画存储在集合中，在不同的pager position下创建对应的动画，让viewpager中offset与动画时间形成比例<br><code>animator.setCurrentPlayTime((long) (5000.0F * offset));</code></p>\n<h2 id=\"Android中的填充模式\"><a href=\"#Android中的填充模式\" class=\"headerlink\" title=\"Android中的填充模式\"></a>Android中的填充模式</h2><p>Android中的填充模式有四种，是封装在Path中的一个枚举。</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EVEN_ODD</td>\n<td>奇偶规则</td>\n</tr>\n<tr>\n<td>INVERSE_EVEN_ODD</td>\n<td>反奇偶规则</td>\n</tr>\n<tr>\n<td>WINDING</td>\n<td>非零环绕数规则</td>\n</tr>\n<tr>\n<td>INVERSE_WINDING</td>\n<td>反非零环绕数规则</td>\n</tr>\n</tbody>\n</table>\n<p>paint的填充规则为FILL时 path默认的是winding规则。填充时会有一个范围。</p>"},{"title":"2017-2-13-Hibernate","date":"2017-02-13T11:59:03.000Z","layout":"post","_content":"<!-- more -->\n\n\n## Hibernate中的小知识\n\n1、每一个线程的Session在事务提交的时候，会自动关闭并从当前线程删除。\n\n\n2、HQL 每次都重新去查询（发送sql），而不是从一级缓存中获取\n\n3、HQL 会将结果放入一级缓存中\n\n4、persist和save方法的区别\n\t- persist将会完整的持久化bean对象，所以对应的主键不能自己配置（除非主键自增策略为assigned）\n\t- save方法中，每次都重新设置id\n\n\n## 多表设计\n\n外键：如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为主表，具有此外键的表被称为主表的从表。外键又称作外关键字。\n\n### 控制权限 inverse\n\ninverse表示 外键的维护权限是否反转。\n\n\n### 级联操作 cascade\n\n\n## 加载策略\n\n### 类加载策略\n\nget/load方法。。\n\n默认：load方法是在对象的属性被调用的时候才发送语句查询，被称为懒加载(lazy)。\n其配置属性为:\n\n``` xml\n<hibernate-mapping>\n\t<!-- 懒加载默认是开启的 -->\n\t<class name=\"Student\" table=\"t_student\" lazy=\"true\" >\n\t\n\t</class>\n</hibernate-mapping>\n```\n\n### 关联级别懒加载\n\n默认：所关联的数据，在使用时才开始加载其数据。\n\n关联级别的加载受两个属性控制：\n\n\t<set>\n\t\tlazy：是否使用懒加载\n\t\tfetch：加载集合使用的sql语句种类\n\t\t\tselect ： 普通的select查询\n\t\t\tjoin：表链接语句\n\t\t\tsubselect：子查询加载\n\n### join语句的规则\n\n其各有四条记录，其中有两条记录是相同的，如下所示：\n\n|id| name|  id|  name|\n|---|---|---|----|\n|1|Tom| 1|Rutabaga|\n|2|Jack| 2|Jerry|\n|3|Rose| 3|Tom|\n|4|Jerry |4|Ninja|\n\n那么对应的join语句有如下五种情况：\n\n| 语句 | sql结果 |图形表示|\n|---|---|---|\n|SELECT * FROM TableA INNER JOIN TableB ON TableA.name = TableB.name|| ![inner_join][1]|\n|SELECT * FROM TableA FULL OUTER JOIN TableB ON TableA.name = TableB.name|| ![full_outer_join][2]|\n|SELECT * FROM TableA LEFT OUTER JOIN TableB ON TableA.name = TableB.name|| ![left_outer_join][3]|\n|SELECT * FROM TableA LEFT OUTER JOIN TableB ON TableA.name = TableB.nameWHERE TableB.id IS null|| ![left_outer_isnull][4]|\n|SELECT * FROM TableA FULL OUTER JOIN TableB ON TableA.name = TableB.nameWHERE TableA.id IS null ORTableB.id IS null||![full_join_isnull][5]|\n\n\n## HQL详解\n\n\n## 使用C3P0的连接池\n先导入c3p0的jar包，再更改hibernate.cfg中的：\n``` xml\n<property name=\"hibernate.connection.provider_class\">org.hibernate.connection.C3P0ConnectionProvider</property>\n```\n\n同时还可以配置更多的C3P0的属性，如下：\n\n#hibernate.c3p0.max_size 2\n#hibernate.c3p0.min_size 2\n#hibernate.c3p0.timeout 5000\n#hibernate.c3p0.max_statements 100\n#hibernate.c3p0.idle_test_period 3000\n#hibernate.c3p0.acquire_increment 2\n#hibernate.c3p0.validate false\n\n\n## 数据库的锁\n\n解决并发问题\n\n悲观锁：\n\t读锁：select * from t_xxxx lock in share mode; (该锁可被所有人使用)\n\t写锁：select * from t_xxxx for update; (该锁会造成阻塞)\n\n乐观锁：\n\t使用乐观锁时，每个table中都要添加version字段，用于hibernate每次commit校验。只有version值小于事物开启前的值方可进行提交。\n\n## 一对一多表设计\n\n\n## 二级缓存\n二级缓存是进程级别的缓存。\n\n1.一级缓存的主要优化手段是快照。\n\n添加缓存的方式：\n``` xml\n\t<!-- 启用二级缓存 -->\n\t<property name=\"hibernate.cache.use_second_level_cache\">true</property>\n\t<!-- 缓存的提供类 ehcache -->\n\t<property name=\"hibernate.cache.provider_class\">org.hibernate.cache.EhCacheProvider</property>\n\t<!-- 哪个类需要缓存 -->\n\t<class-cache usage=\"read-only\" class=\"com.lsh.hibernate.domain.Student\"/>\n```\n\n### 类缓存区\n\n类缓存的方式：\n类缓存并非将数据一对象的形式缓存，而是缓存成散列数据，在一级缓存中组装成对象。\n\n### 集合缓存区\n\n集合缓存的方式：\n集合缓存会将集合中每个对象的id存放起来，在使用时去类缓存中查询，集合缓存，也必须声明缓存集合中的元素。\n\n``` xml\n\t<class-cache usage=\"read-only\" class=\"com.lsh.hibernate.domain.Course\"/>\n\t<collection-cache usage=\"read-only\" collection=\"com.lsh.hibernate.domain.Student.courses\"/>\n```\n\n### 查询缓存区\n\n对HQL语句进行缓存，通过`setCachable(true)`开启查询缓存。\n查询缓存会将查询到的结果的id存储起来，再此查询的时候通过id到类缓存中查找。\n\n查询缓存内部是将HQL语句所对应的SQL语句与要缓存的id一同存储起来，\n所以“select c from Customer c”与\"from Customer\"会得到相同的结果。\n\n\n## 小知识点\n\n1、Hibernate中配置集合不一定只使用set，使用bag可以通过order-by参数添加排序方式\n<bag name=\"replies\" cascade=\"save-update\" order-by=\"id asc\">\n\t\t\t<key column=\"tid\"></key>\n\t\t\t<one-to-many class=\"Reply\" />\n</bag>\n\n2、Hibernate配置bean中的类型与sql中的类型\n![类型对应][6]\n\n  [1]: /img/2017-2-13-Hibernate/inner_join.png \"inner_join.png\"\n  [2]: /img/2017-2-13-Hibernate/full_outer_join.png \"full_outer_join.png\"\n  [3]: /img/2017-2-13-Hibernate/left_outer_join.png \"left_outer_join.png\"\n  [4]: /img/2017-2-13-Hibernate/left_outer_isnull.png \"left_outer_isnull.png\"\n  [5]: /img/2017-2-13-Hibernate/full_join_isnull.png \"full_join_isnull.png\"\n  [6]: /img/2017-2-13-Hibernate/hibernate中属性的对应参数.png \"hibernate中属性的对应参数.png\"","source":"_posts/2017-2-13-Hibernate.md","raw":"---\ntitle: 2017-2-13-Hibernate\ndate: 2017-2-13 19:59:3 \ncategories: Java EE\ntags: [Hibernate]\nlayout: post\n---\n<!-- more -->\n\n\n## Hibernate中的小知识\n\n1、每一个线程的Session在事务提交的时候，会自动关闭并从当前线程删除。\n\n\n2、HQL 每次都重新去查询（发送sql），而不是从一级缓存中获取\n\n3、HQL 会将结果放入一级缓存中\n\n4、persist和save方法的区别\n\t- persist将会完整的持久化bean对象，所以对应的主键不能自己配置（除非主键自增策略为assigned）\n\t- save方法中，每次都重新设置id\n\n\n## 多表设计\n\n外键：如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为主表，具有此外键的表被称为主表的从表。外键又称作外关键字。\n\n### 控制权限 inverse\n\ninverse表示 外键的维护权限是否反转。\n\n\n### 级联操作 cascade\n\n\n## 加载策略\n\n### 类加载策略\n\nget/load方法。。\n\n默认：load方法是在对象的属性被调用的时候才发送语句查询，被称为懒加载(lazy)。\n其配置属性为:\n\n``` xml\n<hibernate-mapping>\n\t<!-- 懒加载默认是开启的 -->\n\t<class name=\"Student\" table=\"t_student\" lazy=\"true\" >\n\t\n\t</class>\n</hibernate-mapping>\n```\n\n### 关联级别懒加载\n\n默认：所关联的数据，在使用时才开始加载其数据。\n\n关联级别的加载受两个属性控制：\n\n\t<set>\n\t\tlazy：是否使用懒加载\n\t\tfetch：加载集合使用的sql语句种类\n\t\t\tselect ： 普通的select查询\n\t\t\tjoin：表链接语句\n\t\t\tsubselect：子查询加载\n\n### join语句的规则\n\n其各有四条记录，其中有两条记录是相同的，如下所示：\n\n|id| name|  id|  name|\n|---|---|---|----|\n|1|Tom| 1|Rutabaga|\n|2|Jack| 2|Jerry|\n|3|Rose| 3|Tom|\n|4|Jerry |4|Ninja|\n\n那么对应的join语句有如下五种情况：\n\n| 语句 | sql结果 |图形表示|\n|---|---|---|\n|SELECT * FROM TableA INNER JOIN TableB ON TableA.name = TableB.name|| ![inner_join][1]|\n|SELECT * FROM TableA FULL OUTER JOIN TableB ON TableA.name = TableB.name|| ![full_outer_join][2]|\n|SELECT * FROM TableA LEFT OUTER JOIN TableB ON TableA.name = TableB.name|| ![left_outer_join][3]|\n|SELECT * FROM TableA LEFT OUTER JOIN TableB ON TableA.name = TableB.nameWHERE TableB.id IS null|| ![left_outer_isnull][4]|\n|SELECT * FROM TableA FULL OUTER JOIN TableB ON TableA.name = TableB.nameWHERE TableA.id IS null ORTableB.id IS null||![full_join_isnull][5]|\n\n\n## HQL详解\n\n\n## 使用C3P0的连接池\n先导入c3p0的jar包，再更改hibernate.cfg中的：\n``` xml\n<property name=\"hibernate.connection.provider_class\">org.hibernate.connection.C3P0ConnectionProvider</property>\n```\n\n同时还可以配置更多的C3P0的属性，如下：\n\n#hibernate.c3p0.max_size 2\n#hibernate.c3p0.min_size 2\n#hibernate.c3p0.timeout 5000\n#hibernate.c3p0.max_statements 100\n#hibernate.c3p0.idle_test_period 3000\n#hibernate.c3p0.acquire_increment 2\n#hibernate.c3p0.validate false\n\n\n## 数据库的锁\n\n解决并发问题\n\n悲观锁：\n\t读锁：select * from t_xxxx lock in share mode; (该锁可被所有人使用)\n\t写锁：select * from t_xxxx for update; (该锁会造成阻塞)\n\n乐观锁：\n\t使用乐观锁时，每个table中都要添加version字段，用于hibernate每次commit校验。只有version值小于事物开启前的值方可进行提交。\n\n## 一对一多表设计\n\n\n## 二级缓存\n二级缓存是进程级别的缓存。\n\n1.一级缓存的主要优化手段是快照。\n\n添加缓存的方式：\n``` xml\n\t<!-- 启用二级缓存 -->\n\t<property name=\"hibernate.cache.use_second_level_cache\">true</property>\n\t<!-- 缓存的提供类 ehcache -->\n\t<property name=\"hibernate.cache.provider_class\">org.hibernate.cache.EhCacheProvider</property>\n\t<!-- 哪个类需要缓存 -->\n\t<class-cache usage=\"read-only\" class=\"com.lsh.hibernate.domain.Student\"/>\n```\n\n### 类缓存区\n\n类缓存的方式：\n类缓存并非将数据一对象的形式缓存，而是缓存成散列数据，在一级缓存中组装成对象。\n\n### 集合缓存区\n\n集合缓存的方式：\n集合缓存会将集合中每个对象的id存放起来，在使用时去类缓存中查询，集合缓存，也必须声明缓存集合中的元素。\n\n``` xml\n\t<class-cache usage=\"read-only\" class=\"com.lsh.hibernate.domain.Course\"/>\n\t<collection-cache usage=\"read-only\" collection=\"com.lsh.hibernate.domain.Student.courses\"/>\n```\n\n### 查询缓存区\n\n对HQL语句进行缓存，通过`setCachable(true)`开启查询缓存。\n查询缓存会将查询到的结果的id存储起来，再此查询的时候通过id到类缓存中查找。\n\n查询缓存内部是将HQL语句所对应的SQL语句与要缓存的id一同存储起来，\n所以“select c from Customer c”与\"from Customer\"会得到相同的结果。\n\n\n## 小知识点\n\n1、Hibernate中配置集合不一定只使用set，使用bag可以通过order-by参数添加排序方式\n<bag name=\"replies\" cascade=\"save-update\" order-by=\"id asc\">\n\t\t\t<key column=\"tid\"></key>\n\t\t\t<one-to-many class=\"Reply\" />\n</bag>\n\n2、Hibernate配置bean中的类型与sql中的类型\n![类型对应][6]\n\n  [1]: /img/2017-2-13-Hibernate/inner_join.png \"inner_join.png\"\n  [2]: /img/2017-2-13-Hibernate/full_outer_join.png \"full_outer_join.png\"\n  [3]: /img/2017-2-13-Hibernate/left_outer_join.png \"left_outer_join.png\"\n  [4]: /img/2017-2-13-Hibernate/left_outer_isnull.png \"left_outer_isnull.png\"\n  [5]: /img/2017-2-13-Hibernate/full_join_isnull.png \"full_join_isnull.png\"\n  [6]: /img/2017-2-13-Hibernate/hibernate中属性的对应参数.png \"hibernate中属性的对应参数.png\"","slug":"2017-2-13-Hibernate","published":1,"updated":"2018-01-02T01:08:38.446Z","comments":1,"photos":[],"link":"","_id":"cjbx3x35h000rizijtnoobgto","content":"<a id=\"more\"></a>\n<h2 id=\"Hibernate中的小知识\"><a href=\"#Hibernate中的小知识\" class=\"headerlink\" title=\"Hibernate中的小知识\"></a>Hibernate中的小知识</h2><p>1、每一个线程的Session在事务提交的时候，会自动关闭并从当前线程删除。</p>\n<p>2、HQL 每次都重新去查询（发送sql），而不是从一级缓存中获取</p>\n<p>3、HQL 会将结果放入一级缓存中</p>\n<p>4、persist和save方法的区别</p>\n<pre><code>- persist将会完整的持久化bean对象，所以对应的主键不能自己配置（除非主键自增策略为assigned）\n- save方法中，每次都重新设置id\n</code></pre><h2 id=\"多表设计\"><a href=\"#多表设计\" class=\"headerlink\" title=\"多表设计\"></a>多表设计</h2><p>外键：如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为主表，具有此外键的表被称为主表的从表。外键又称作外关键字。</p>\n<h3 id=\"控制权限-inverse\"><a href=\"#控制权限-inverse\" class=\"headerlink\" title=\"控制权限 inverse\"></a>控制权限 inverse</h3><p>inverse表示 外键的维护权限是否反转。</p>\n<h3 id=\"级联操作-cascade\"><a href=\"#级联操作-cascade\" class=\"headerlink\" title=\"级联操作 cascade\"></a>级联操作 cascade</h3><h2 id=\"加载策略\"><a href=\"#加载策略\" class=\"headerlink\" title=\"加载策略\"></a>加载策略</h2><h3 id=\"类加载策略\"><a href=\"#类加载策略\" class=\"headerlink\" title=\"类加载策略\"></a>类加载策略</h3><p>get/load方法。。</p>\n<p>默认：load方法是在对象的属性被调用的时候才发送语句查询，被称为懒加载(lazy)。<br>其配置属性为:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hibernate-mapping</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 懒加载默认是开启的 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Student\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_student\"</span> <span class=\"attr\">lazy</span>=<span class=\"string\">\"true\"</span> &gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"关联级别懒加载\"><a href=\"#关联级别懒加载\" class=\"headerlink\" title=\"关联级别懒加载\"></a>关联级别懒加载</h3><p>默认：所关联的数据，在使用时才开始加载其数据。</p>\n<p>关联级别的加载受两个属性控制：</p>\n<pre><code>&lt;set&gt;\n    lazy：是否使用懒加载\n    fetch：加载集合使用的sql语句种类\n        select ： 普通的select查询\n        join：表链接语句\n        subselect：子查询加载\n</code></pre><h3 id=\"join语句的规则\"><a href=\"#join语句的规则\" class=\"headerlink\" title=\"join语句的规则\"></a>join语句的规则</h3><p>其各有四条记录，其中有两条记录是相同的，如下所示：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>id</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Tom</td>\n<td>1</td>\n<td>Rutabaga</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Jack</td>\n<td>2</td>\n<td>Jerry</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Rose</td>\n<td>3</td>\n<td>Tom</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Jerry</td>\n<td>4</td>\n<td>Ninja</td>\n</tr>\n</tbody>\n</table>\n<p>那么对应的join语句有如下五种情况：</p>\n<table>\n<thead>\n<tr>\n<th>语句</th>\n<th>sql结果</th>\n<th>图形表示</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SELECT * FROM TableA INNER JOIN TableB ON TableA.name = TableB.name</td>\n<td></td>\n<td><img src=\"/img/2017-2-13-Hibernate/inner_join.png\" alt=\"inner_join\" title=\"inner_join.png\"></td>\n</tr>\n<tr>\n<td>SELECT * FROM TableA FULL OUTER JOIN TableB ON TableA.name = TableB.name</td>\n<td></td>\n<td><img src=\"/img/2017-2-13-Hibernate/full_outer_join.png\" alt=\"full_outer_join\" title=\"full_outer_join.png\"></td>\n</tr>\n<tr>\n<td>SELECT * FROM TableA LEFT OUTER JOIN TableB ON TableA.name = TableB.name</td>\n<td></td>\n<td><img src=\"/img/2017-2-13-Hibernate/left_outer_join.png\" alt=\"left_outer_join\" title=\"left_outer_join.png\"></td>\n</tr>\n<tr>\n<td>SELECT * FROM TableA LEFT OUTER JOIN TableB ON TableA.name = TableB.nameWHERE TableB.id IS null</td>\n<td></td>\n<td><img src=\"/img/2017-2-13-Hibernate/left_outer_isnull.png\" alt=\"left_outer_isnull\" title=\"left_outer_isnull.png\"></td>\n</tr>\n<tr>\n<td>SELECT * FROM TableA FULL OUTER JOIN TableB ON TableA.name = TableB.nameWHERE TableA.id IS null ORTableB.id IS null</td>\n<td></td>\n<td><img src=\"/img/2017-2-13-Hibernate/full_join_isnull.png\" alt=\"full_join_isnull\" title=\"full_join_isnull.png\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"HQL详解\"><a href=\"#HQL详解\" class=\"headerlink\" title=\"HQL详解\"></a>HQL详解</h2><h2 id=\"使用C3P0的连接池\"><a href=\"#使用C3P0的连接池\" class=\"headerlink\" title=\"使用C3P0的连接池\"></a>使用C3P0的连接池</h2><p>先导入c3p0的jar包，再更改hibernate.cfg中的：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.provider_class\"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>同时还可以配置更多的C3P0的属性，如下：</p>\n<p>#hibernate.c3p0.max_size 2</p>\n<p>#hibernate.c3p0.min_size 2</p>\n<p>#hibernate.c3p0.timeout 5000</p>\n<p>#hibernate.c3p0.max_statements 100</p>\n<p>#hibernate.c3p0.idle_test_period 3000</p>\n<p>#hibernate.c3p0.acquire_increment 2</p>\n<p>#hibernate.c3p0.validate false</p>\n<h2 id=\"数据库的锁\"><a href=\"#数据库的锁\" class=\"headerlink\" title=\"数据库的锁\"></a>数据库的锁</h2><p>解决并发问题</p>\n<p>悲观锁：<br>    读锁：select <em> from t_xxxx lock in share mode; (该锁可被所有人使用)<br>    写锁：select </em> from t_xxxx for update; (该锁会造成阻塞)</p>\n<p>乐观锁：<br>    使用乐观锁时，每个table中都要添加version字段，用于hibernate每次commit校验。只有version值小于事物开启前的值方可进行提交。</p>\n<h2 id=\"一对一多表设计\"><a href=\"#一对一多表设计\" class=\"headerlink\" title=\"一对一多表设计\"></a>一对一多表设计</h2><h2 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h2><p>二级缓存是进程级别的缓存。</p>\n<p>1.一级缓存的主要优化手段是快照。</p>\n<p>添加缓存的方式：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 启用二级缓存 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.cache.use_second_level_cache\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缓存的提供类 ehcache --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.cache.provider_class\"</span>&gt;</span>org.hibernate.cache.EhCacheProvider<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 哪个类需要缓存 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">class-cache</span> <span class=\"attr\">usage</span>=<span class=\"string\">\"read-only\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.hibernate.domain.Student\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"类缓存区\"><a href=\"#类缓存区\" class=\"headerlink\" title=\"类缓存区\"></a>类缓存区</h3><p>类缓存的方式：<br>类缓存并非将数据一对象的形式缓存，而是缓存成散列数据，在一级缓存中组装成对象。</p>\n<h3 id=\"集合缓存区\"><a href=\"#集合缓存区\" class=\"headerlink\" title=\"集合缓存区\"></a>集合缓存区</h3><p>集合缓存的方式：<br>集合缓存会将集合中每个对象的id存放起来，在使用时去类缓存中查询，集合缓存，也必须声明缓存集合中的元素。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">class-cache</span> <span class=\"attr\">usage</span>=<span class=\"string\">\"read-only\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.hibernate.domain.Course\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">collection-cache</span> <span class=\"attr\">usage</span>=<span class=\"string\">\"read-only\"</span> <span class=\"attr\">collection</span>=<span class=\"string\">\"com.lsh.hibernate.domain.Student.courses\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查询缓存区\"><a href=\"#查询缓存区\" class=\"headerlink\" title=\"查询缓存区\"></a>查询缓存区</h3><p>对HQL语句进行缓存，通过<code>setCachable(true)</code>开启查询缓存。<br>查询缓存会将查询到的结果的id存储起来，再此查询的时候通过id到类缓存中查找。</p>\n<p>查询缓存内部是将HQL语句所对应的SQL语句与要缓存的id一同存储起来，<br>所以“select c from Customer c”与”from Customer”会得到相同的结果。</p>\n<h2 id=\"小知识点\"><a href=\"#小知识点\" class=\"headerlink\" title=\"小知识点\"></a>小知识点</h2><p>1、Hibernate中配置集合不一定只使用set，使用bag可以通过order-by参数添加排序方式</p>\n<bag name=\"replies\" cascade=\"save-update\" order-by=\"id asc\"><br>            <key column=\"tid\"></key><br>            <one-to-many class=\"Reply\"><br></one-to-many></bag>\n\n<p>2、Hibernate配置bean中的类型与sql中的类型<br><img src=\"/img/2017-2-13-Hibernate/hibernate中属性的对应参数.png\" alt=\"类型对应\" title=\"hibernate中属性的对应参数.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Hibernate中的小知识\"><a href=\"#Hibernate中的小知识\" class=\"headerlink\" title=\"Hibernate中的小知识\"></a>Hibernate中的小知识</h2><p>1、每一个线程的Session在事务提交的时候，会自动关闭并从当前线程删除。</p>\n<p>2、HQL 每次都重新去查询（发送sql），而不是从一级缓存中获取</p>\n<p>3、HQL 会将结果放入一级缓存中</p>\n<p>4、persist和save方法的区别</p>\n<pre><code>- persist将会完整的持久化bean对象，所以对应的主键不能自己配置（除非主键自增策略为assigned）\n- save方法中，每次都重新设置id\n</code></pre><h2 id=\"多表设计\"><a href=\"#多表设计\" class=\"headerlink\" title=\"多表设计\"></a>多表设计</h2><p>外键：如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为主表，具有此外键的表被称为主表的从表。外键又称作外关键字。</p>\n<h3 id=\"控制权限-inverse\"><a href=\"#控制权限-inverse\" class=\"headerlink\" title=\"控制权限 inverse\"></a>控制权限 inverse</h3><p>inverse表示 外键的维护权限是否反转。</p>\n<h3 id=\"级联操作-cascade\"><a href=\"#级联操作-cascade\" class=\"headerlink\" title=\"级联操作 cascade\"></a>级联操作 cascade</h3><h2 id=\"加载策略\"><a href=\"#加载策略\" class=\"headerlink\" title=\"加载策略\"></a>加载策略</h2><h3 id=\"类加载策略\"><a href=\"#类加载策略\" class=\"headerlink\" title=\"类加载策略\"></a>类加载策略</h3><p>get/load方法。。</p>\n<p>默认：load方法是在对象的属性被调用的时候才发送语句查询，被称为懒加载(lazy)。<br>其配置属性为:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hibernate-mapping</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 懒加载默认是开启的 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Student\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_student\"</span> <span class=\"attr\">lazy</span>=<span class=\"string\">\"true\"</span> &gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"关联级别懒加载\"><a href=\"#关联级别懒加载\" class=\"headerlink\" title=\"关联级别懒加载\"></a>关联级别懒加载</h3><p>默认：所关联的数据，在使用时才开始加载其数据。</p>\n<p>关联级别的加载受两个属性控制：</p>\n<pre><code>&lt;set&gt;\n    lazy：是否使用懒加载\n    fetch：加载集合使用的sql语句种类\n        select ： 普通的select查询\n        join：表链接语句\n        subselect：子查询加载\n</code></pre><h3 id=\"join语句的规则\"><a href=\"#join语句的规则\" class=\"headerlink\" title=\"join语句的规则\"></a>join语句的规则</h3><p>其各有四条记录，其中有两条记录是相同的，如下所示：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>id</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Tom</td>\n<td>1</td>\n<td>Rutabaga</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Jack</td>\n<td>2</td>\n<td>Jerry</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Rose</td>\n<td>3</td>\n<td>Tom</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Jerry</td>\n<td>4</td>\n<td>Ninja</td>\n</tr>\n</tbody>\n</table>\n<p>那么对应的join语句有如下五种情况：</p>\n<table>\n<thead>\n<tr>\n<th>语句</th>\n<th>sql结果</th>\n<th>图形表示</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SELECT * FROM TableA INNER JOIN TableB ON TableA.name = TableB.name</td>\n<td></td>\n<td><img src=\"/img/2017-2-13-Hibernate/inner_join.png\" alt=\"inner_join\" title=\"inner_join.png\"></td>\n</tr>\n<tr>\n<td>SELECT * FROM TableA FULL OUTER JOIN TableB ON TableA.name = TableB.name</td>\n<td></td>\n<td><img src=\"/img/2017-2-13-Hibernate/full_outer_join.png\" alt=\"full_outer_join\" title=\"full_outer_join.png\"></td>\n</tr>\n<tr>\n<td>SELECT * FROM TableA LEFT OUTER JOIN TableB ON TableA.name = TableB.name</td>\n<td></td>\n<td><img src=\"/img/2017-2-13-Hibernate/left_outer_join.png\" alt=\"left_outer_join\" title=\"left_outer_join.png\"></td>\n</tr>\n<tr>\n<td>SELECT * FROM TableA LEFT OUTER JOIN TableB ON TableA.name = TableB.nameWHERE TableB.id IS null</td>\n<td></td>\n<td><img src=\"/img/2017-2-13-Hibernate/left_outer_isnull.png\" alt=\"left_outer_isnull\" title=\"left_outer_isnull.png\"></td>\n</tr>\n<tr>\n<td>SELECT * FROM TableA FULL OUTER JOIN TableB ON TableA.name = TableB.nameWHERE TableA.id IS null ORTableB.id IS null</td>\n<td></td>\n<td><img src=\"/img/2017-2-13-Hibernate/full_join_isnull.png\" alt=\"full_join_isnull\" title=\"full_join_isnull.png\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"HQL详解\"><a href=\"#HQL详解\" class=\"headerlink\" title=\"HQL详解\"></a>HQL详解</h2><h2 id=\"使用C3P0的连接池\"><a href=\"#使用C3P0的连接池\" class=\"headerlink\" title=\"使用C3P0的连接池\"></a>使用C3P0的连接池</h2><p>先导入c3p0的jar包，再更改hibernate.cfg中的：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.provider_class\"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>同时还可以配置更多的C3P0的属性，如下：</p>\n<p>#hibernate.c3p0.max_size 2</p>\n<p>#hibernate.c3p0.min_size 2</p>\n<p>#hibernate.c3p0.timeout 5000</p>\n<p>#hibernate.c3p0.max_statements 100</p>\n<p>#hibernate.c3p0.idle_test_period 3000</p>\n<p>#hibernate.c3p0.acquire_increment 2</p>\n<p>#hibernate.c3p0.validate false</p>\n<h2 id=\"数据库的锁\"><a href=\"#数据库的锁\" class=\"headerlink\" title=\"数据库的锁\"></a>数据库的锁</h2><p>解决并发问题</p>\n<p>悲观锁：<br>    读锁：select <em> from t_xxxx lock in share mode; (该锁可被所有人使用)<br>    写锁：select </em> from t_xxxx for update; (该锁会造成阻塞)</p>\n<p>乐观锁：<br>    使用乐观锁时，每个table中都要添加version字段，用于hibernate每次commit校验。只有version值小于事物开启前的值方可进行提交。</p>\n<h2 id=\"一对一多表设计\"><a href=\"#一对一多表设计\" class=\"headerlink\" title=\"一对一多表设计\"></a>一对一多表设计</h2><h2 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h2><p>二级缓存是进程级别的缓存。</p>\n<p>1.一级缓存的主要优化手段是快照。</p>\n<p>添加缓存的方式：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 启用二级缓存 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.cache.use_second_level_cache\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缓存的提供类 ehcache --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.cache.provider_class\"</span>&gt;</span>org.hibernate.cache.EhCacheProvider<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 哪个类需要缓存 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">class-cache</span> <span class=\"attr\">usage</span>=<span class=\"string\">\"read-only\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.hibernate.domain.Student\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"类缓存区\"><a href=\"#类缓存区\" class=\"headerlink\" title=\"类缓存区\"></a>类缓存区</h3><p>类缓存的方式：<br>类缓存并非将数据一对象的形式缓存，而是缓存成散列数据，在一级缓存中组装成对象。</p>\n<h3 id=\"集合缓存区\"><a href=\"#集合缓存区\" class=\"headerlink\" title=\"集合缓存区\"></a>集合缓存区</h3><p>集合缓存的方式：<br>集合缓存会将集合中每个对象的id存放起来，在使用时去类缓存中查询，集合缓存，也必须声明缓存集合中的元素。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">class-cache</span> <span class=\"attr\">usage</span>=<span class=\"string\">\"read-only\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.hibernate.domain.Course\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">collection-cache</span> <span class=\"attr\">usage</span>=<span class=\"string\">\"read-only\"</span> <span class=\"attr\">collection</span>=<span class=\"string\">\"com.lsh.hibernate.domain.Student.courses\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查询缓存区\"><a href=\"#查询缓存区\" class=\"headerlink\" title=\"查询缓存区\"></a>查询缓存区</h3><p>对HQL语句进行缓存，通过<code>setCachable(true)</code>开启查询缓存。<br>查询缓存会将查询到的结果的id存储起来，再此查询的时候通过id到类缓存中查找。</p>\n<p>查询缓存内部是将HQL语句所对应的SQL语句与要缓存的id一同存储起来，<br>所以“select c from Customer c”与”from Customer”会得到相同的结果。</p>\n<h2 id=\"小知识点\"><a href=\"#小知识点\" class=\"headerlink\" title=\"小知识点\"></a>小知识点</h2><p>1、Hibernate中配置集合不一定只使用set，使用bag可以通过order-by参数添加排序方式</p>\n<bag name=\"replies\" cascade=\"save-update\" order-by=\"id asc\"><br>            <key column=\"tid\"></key><br>            <one-to-many class=\"Reply\"><br></one-to-many></bag>\n\n<p>2、Hibernate配置bean中的类型与sql中的类型<br><img src=\"/img/2017-2-13-Hibernate/hibernate中属性的对应参数.png\" alt=\"类型对应\" title=\"hibernate中属性的对应参数.png\"></p>"},{"title":"2017-2-22-Spring（一）","date":"2017-02-22T12:25:52.000Z","layout":"post","_content":"\n## Spring简介\n\nSpring核心内容：bean、core、context、expression language\n\n## BeanFactory和ApplicationContext的区别\n\n1、加载问题\nbeanFactory会具备懒加载，只有在getBean的时候才会加载bean\napplicationContext***会立即加载配置文件中的所有bean***\n2、applicationContext更强大\napplicationContext可以进行国际化处理、事件传递、Bean自动装配、各种不同应用层的Context实现\n\n## Bean文件详解\n\n### Bean的生成方式\n\n1、默认构造\n即普通的bean声明方式\n``` xml\n\t<!-- 默认构造 -->\n\t<bean id=\"userService\" class=\"com.lsh.spring.b_instance.UserServiceImpl\" />\n```\n\n2、静态工厂构造\n``` xml\n\t<!-- 静态工厂 -->\n\t<bean id=\"userService\" class=\"com.lsh.spring.b_instance.StaticFactory\" factory-method=\"getUserService\"/>\n```\n3、实例工厂构造\n``` xml\n\t<!-- 实例工厂 -->\n\t<bean id=\"myFactory\" class=\"com.lsh.spring.b_instance.InstanceFactory\"></bean>\n\t<bean id=\"userService02\" factory-bean=\"myFactory\" factory-method=\"getUserService\"/>\n```\n\n### FactoryBean\n\nspring提供的工厂包装bean，实现factoryBean接口后，spring将加载首先加载该接口。\n\n起到懒加载的作用。\n\n***但是用这种方式后需要手动进行依赖注入。***\n\n``` xml\n    <!-- FactoryBean 一个实现了工厂的bean每次实例时，都是通过工厂创建，而不是直接的实例\n    \tspring内部调用其getObject方法获取实例\n     -->\n\t<bean id=\"userService\" class=\"com.lsh.spring.c_factorybean.MyFactoryBean\"/>\n```\n\n``` java\npublic void test() {\n\t\tString xmlPath = \"com/lsh/spring/c_factorybean/applicationContext.xml\";\n\t\t// bean不会被立即加载UserService而是调用getBean时才会加载\n\t\tApplicationContext applicationContext = new ClassPathXmlApplicationContext(\n\t\t\t\txmlPath);\n\t\tIUserService userService = (IUserService) applicationContext\n\t\t\t\t.getBean(\"userService\");\n\t\tuserService.serviceMethod();\n}\n```\n### scope 作用域\n指定生成的bean是否为单例或者多例，默认为单例\n``` xml\n\t<bean id=\"\" class=\"\" scope=\"\" />\n```\nsingleton : 单例\nprototype : 多例\n\n对于FactoryBean生产的bean需要在scope和isSingleton同时为单例的情况下才能生成单例的实例。\n\n### lifecycle 生命周期\n\nxml 中 指定对应 init和destory方法，spring自动调用\n``` xml\n\t<bean id=\"userService\" class=\"com.lsh.spring.d_lifecycle.UserServiceImpl\" init-method=\"init\" destroy-method=\"destroy\"/>\n```\n\n### BeanPostProcessor 回调\nBeanPostProcessor会在对象的init方法前后分别执行，开发者可以在此时对对象进行加工或者替换，但是***对象销毁时仍然使用源对象的destroy方法***\n``` xml\n\t<!-- 声明一个BeanPostProcessor，提供给Spring回调 -->\n\t<bean class=\"com.lsh.spring.d_lifecycle.MyBeanPostProcessor\"/>\n```\n``` java\n\t@Override\n\tpublic Object postProcessBeforeInitialization(Object bean, String beanName)\n\t\t\tthrows BeansException {\n\t\tSystem.out.println(\"MyBeanPostProcessor postProcessBefore \");\n\t\treturn bean;\n\t}\n\t\n\t@Override\n\tpublic Object postProcessAfterInitialization(final Object bean,\n\t\t\tString beanName)\n\t\t\tthrows BeansException {\n\t\tSystem.out.println(\"MyBeanPostProcessor postProcessAfter \");\n\t\treturn Proxy.newProxyInstance(\n\t\t\t\tMyBeanPostProcessor.class.getClassLoader(),\n\t\t\t\tUserServiceImpl.class.getInterfaces(), new InvocationHandler() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object invoke(Object proxy, Method method,\n\t\t\t\t\t\t\tObject[] args) throws Throwable {\n\t\t\t\t\t\tString name = method.getName();\n\t\t\t\t\t\tSystem.out.println(\"开始调用\" + name + \" 已经记录和处理\");\n\t\t\t\t\t\tObject methodResult = method.invoke(bean, args);\n\t\t\t\t\t\tSystem.out.println(\"结束调用\" + name + \"已经记录和处理\");\n\t\t\t\t\t\treturn methodResult;\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n```\n``` log\n\tcom.lsh.spring.d_lifecycle.UserServiceImpl construct\n\tMyBeanPostProcessor postProcessBefore  ------------------------ >>> postProcessor开始执行\n\tCopyOfMyBeanPostProcessor postProcessBefore \n\tcom.lsh.spring.d_lifecycle.UserServiceImpl init\n\tMyBeanPostProcessor postProcessAfter \n\n\tCopyOfMyBeanPostProcessor postProcessAfter \n\tCopy 开始调用serviceMethod 已经记录和处理 ------------------------>>>已经转为代理类\n\t开始调用serviceMethod 已经记录和处理\n\tcom.lsh.spring.d_lifecycle.UserServiceImpl serviceMethod ------------------>>>代理类中调用了源实例的方法\n\t结束调用serviceMethod已经记录和处理\n\tCopy 结束调用serviceMethod已经记录和处理\n\tcom.lsh.spring.d_lifecycle.UserServiceImpl destroy --------------->>>调用了destroy\n```\n\n### P命令空间\n\n可以简化get/set方法，在参数注入时不用再去书写<property></~>类似的二级节点，类似android的配置文件。\n使用时写上命名空间，如下：\n``` xml\n\t<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\t\t   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\t   xmlns:p=\"http://www.springframework.org/schema/p\"\n\t\t   xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n\t\t\t\t\t\t\t   http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\t </beans>\n```\n\n### SpEL\n对`<property>`进行统一编程，所有的内容都使用value\n``` xml\n\t<property name=\"\" value=\"#{表达式}\">\n\t#{123}、#{'jack'} ： 数字、字符串\n\t#{beanId}\t：另一个bean引用\n\t#{beanId.propName}\t：操作数据\n\t#{beanId.toString()}\t：执行方法\n\t#{T(类).字段|方法}\t：静态方法或字段\n```\n\n\n## spring常用注解\n\n使用注解时需要添加命名空间，并配置要扫描的包，如下：\n``` xml\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\t\t   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\t   xmlns:context=\"http://www.springframework.org/schema/context\"\n\t\t   xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n\t\t\t\t\t\t\t   http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\t\t\t\t\t   http://www.springframework.org/schema/context \n\t\t\t\t\t\t\t   http://www.springframework.org/schema/context/spring-context.xsd\">\n\t\t<!-- 开启扫描 -->\n\t\t<context:component-scan base-package=\"com.lsh.spring.e_di\"/>\n\t</beans>\n```\n\n\n常用替代bean配置的注解\n``` java\n\t@component // 指定一个bean，以下三个为component的衍生注解\n\t@Controller // 指明是一个control层\n\t@Service // 指明是一个Service层\n\t@Repository // 指明是一个dao层\n\n\t@Value // 注入参数\n\t@Autowired // 自动装配，可写在变量名上，也可写在set方法上\n\n\t@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) // 指明参数的作用域 单例(singleton)或者多例(prototype)\n```\n\n即使，使用了注解setter方法也是不可避免的，需要添加setter方法才可以注入。\n","source":"_posts/2017-2-22-Spring（一）.md","raw":"---\ntitle: 2017-2-22-Spring（一）\ndate: 2017-2-22 20:25:52 \ncategories: Java EE\ntags: [Spring]\nlayout: post\n---\n\n## Spring简介\n\nSpring核心内容：bean、core、context、expression language\n\n## BeanFactory和ApplicationContext的区别\n\n1、加载问题\nbeanFactory会具备懒加载，只有在getBean的时候才会加载bean\napplicationContext***会立即加载配置文件中的所有bean***\n2、applicationContext更强大\napplicationContext可以进行国际化处理、事件传递、Bean自动装配、各种不同应用层的Context实现\n\n## Bean文件详解\n\n### Bean的生成方式\n\n1、默认构造\n即普通的bean声明方式\n``` xml\n\t<!-- 默认构造 -->\n\t<bean id=\"userService\" class=\"com.lsh.spring.b_instance.UserServiceImpl\" />\n```\n\n2、静态工厂构造\n``` xml\n\t<!-- 静态工厂 -->\n\t<bean id=\"userService\" class=\"com.lsh.spring.b_instance.StaticFactory\" factory-method=\"getUserService\"/>\n```\n3、实例工厂构造\n``` xml\n\t<!-- 实例工厂 -->\n\t<bean id=\"myFactory\" class=\"com.lsh.spring.b_instance.InstanceFactory\"></bean>\n\t<bean id=\"userService02\" factory-bean=\"myFactory\" factory-method=\"getUserService\"/>\n```\n\n### FactoryBean\n\nspring提供的工厂包装bean，实现factoryBean接口后，spring将加载首先加载该接口。\n\n起到懒加载的作用。\n\n***但是用这种方式后需要手动进行依赖注入。***\n\n``` xml\n    <!-- FactoryBean 一个实现了工厂的bean每次实例时，都是通过工厂创建，而不是直接的实例\n    \tspring内部调用其getObject方法获取实例\n     -->\n\t<bean id=\"userService\" class=\"com.lsh.spring.c_factorybean.MyFactoryBean\"/>\n```\n\n``` java\npublic void test() {\n\t\tString xmlPath = \"com/lsh/spring/c_factorybean/applicationContext.xml\";\n\t\t// bean不会被立即加载UserService而是调用getBean时才会加载\n\t\tApplicationContext applicationContext = new ClassPathXmlApplicationContext(\n\t\t\t\txmlPath);\n\t\tIUserService userService = (IUserService) applicationContext\n\t\t\t\t.getBean(\"userService\");\n\t\tuserService.serviceMethod();\n}\n```\n### scope 作用域\n指定生成的bean是否为单例或者多例，默认为单例\n``` xml\n\t<bean id=\"\" class=\"\" scope=\"\" />\n```\nsingleton : 单例\nprototype : 多例\n\n对于FactoryBean生产的bean需要在scope和isSingleton同时为单例的情况下才能生成单例的实例。\n\n### lifecycle 生命周期\n\nxml 中 指定对应 init和destory方法，spring自动调用\n``` xml\n\t<bean id=\"userService\" class=\"com.lsh.spring.d_lifecycle.UserServiceImpl\" init-method=\"init\" destroy-method=\"destroy\"/>\n```\n\n### BeanPostProcessor 回调\nBeanPostProcessor会在对象的init方法前后分别执行，开发者可以在此时对对象进行加工或者替换，但是***对象销毁时仍然使用源对象的destroy方法***\n``` xml\n\t<!-- 声明一个BeanPostProcessor，提供给Spring回调 -->\n\t<bean class=\"com.lsh.spring.d_lifecycle.MyBeanPostProcessor\"/>\n```\n``` java\n\t@Override\n\tpublic Object postProcessBeforeInitialization(Object bean, String beanName)\n\t\t\tthrows BeansException {\n\t\tSystem.out.println(\"MyBeanPostProcessor postProcessBefore \");\n\t\treturn bean;\n\t}\n\t\n\t@Override\n\tpublic Object postProcessAfterInitialization(final Object bean,\n\t\t\tString beanName)\n\t\t\tthrows BeansException {\n\t\tSystem.out.println(\"MyBeanPostProcessor postProcessAfter \");\n\t\treturn Proxy.newProxyInstance(\n\t\t\t\tMyBeanPostProcessor.class.getClassLoader(),\n\t\t\t\tUserServiceImpl.class.getInterfaces(), new InvocationHandler() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object invoke(Object proxy, Method method,\n\t\t\t\t\t\t\tObject[] args) throws Throwable {\n\t\t\t\t\t\tString name = method.getName();\n\t\t\t\t\t\tSystem.out.println(\"开始调用\" + name + \" 已经记录和处理\");\n\t\t\t\t\t\tObject methodResult = method.invoke(bean, args);\n\t\t\t\t\t\tSystem.out.println(\"结束调用\" + name + \"已经记录和处理\");\n\t\t\t\t\t\treturn methodResult;\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n```\n``` log\n\tcom.lsh.spring.d_lifecycle.UserServiceImpl construct\n\tMyBeanPostProcessor postProcessBefore  ------------------------ >>> postProcessor开始执行\n\tCopyOfMyBeanPostProcessor postProcessBefore \n\tcom.lsh.spring.d_lifecycle.UserServiceImpl init\n\tMyBeanPostProcessor postProcessAfter \n\n\tCopyOfMyBeanPostProcessor postProcessAfter \n\tCopy 开始调用serviceMethod 已经记录和处理 ------------------------>>>已经转为代理类\n\t开始调用serviceMethod 已经记录和处理\n\tcom.lsh.spring.d_lifecycle.UserServiceImpl serviceMethod ------------------>>>代理类中调用了源实例的方法\n\t结束调用serviceMethod已经记录和处理\n\tCopy 结束调用serviceMethod已经记录和处理\n\tcom.lsh.spring.d_lifecycle.UserServiceImpl destroy --------------->>>调用了destroy\n```\n\n### P命令空间\n\n可以简化get/set方法，在参数注入时不用再去书写<property></~>类似的二级节点，类似android的配置文件。\n使用时写上命名空间，如下：\n``` xml\n\t<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\t\t   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\t   xmlns:p=\"http://www.springframework.org/schema/p\"\n\t\t   xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n\t\t\t\t\t\t\t   http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\t </beans>\n```\n\n### SpEL\n对`<property>`进行统一编程，所有的内容都使用value\n``` xml\n\t<property name=\"\" value=\"#{表达式}\">\n\t#{123}、#{'jack'} ： 数字、字符串\n\t#{beanId}\t：另一个bean引用\n\t#{beanId.propName}\t：操作数据\n\t#{beanId.toString()}\t：执行方法\n\t#{T(类).字段|方法}\t：静态方法或字段\n```\n\n\n## spring常用注解\n\n使用注解时需要添加命名空间，并配置要扫描的包，如下：\n``` xml\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\t\t   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\t   xmlns:context=\"http://www.springframework.org/schema/context\"\n\t\t   xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n\t\t\t\t\t\t\t   http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\t\t\t\t\t   http://www.springframework.org/schema/context \n\t\t\t\t\t\t\t   http://www.springframework.org/schema/context/spring-context.xsd\">\n\t\t<!-- 开启扫描 -->\n\t\t<context:component-scan base-package=\"com.lsh.spring.e_di\"/>\n\t</beans>\n```\n\n\n常用替代bean配置的注解\n``` java\n\t@component // 指定一个bean，以下三个为component的衍生注解\n\t@Controller // 指明是一个control层\n\t@Service // 指明是一个Service层\n\t@Repository // 指明是一个dao层\n\n\t@Value // 注入参数\n\t@Autowired // 自动装配，可写在变量名上，也可写在set方法上\n\n\t@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) // 指明参数的作用域 单例(singleton)或者多例(prototype)\n```\n\n即使，使用了注解setter方法也是不可避免的，需要添加setter方法才可以注入。\n","slug":"2017-2-22-Spring（一）","published":1,"updated":"2018-01-02T01:08:38.450Z","comments":1,"photos":[],"link":"","_id":"cjbx3x35l000uizijnarn5ow1","content":"<h2 id=\"Spring简介\"><a href=\"#Spring简介\" class=\"headerlink\" title=\"Spring简介\"></a>Spring简介</h2><p>Spring核心内容：bean、core、context、expression language</p>\n<h2 id=\"BeanFactory和ApplicationContext的区别\"><a href=\"#BeanFactory和ApplicationContext的区别\" class=\"headerlink\" title=\"BeanFactory和ApplicationContext的区别\"></a>BeanFactory和ApplicationContext的区别</h2><p>1、加载问题<br>beanFactory会具备懒加载，只有在getBean的时候才会加载bean<br>applicationContext<strong><em>会立即加载配置文件中的所有bean</em></strong><br>2、applicationContext更强大<br>applicationContext可以进行国际化处理、事件传递、Bean自动装配、各种不同应用层的Context实现</p>\n<h2 id=\"Bean文件详解\"><a href=\"#Bean文件详解\" class=\"headerlink\" title=\"Bean文件详解\"></a>Bean文件详解</h2><h3 id=\"Bean的生成方式\"><a href=\"#Bean的生成方式\" class=\"headerlink\" title=\"Bean的生成方式\"></a>Bean的生成方式</h3><p>1、默认构造<br>即普通的bean声明方式<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 默认构造 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.spring.b_instance.UserServiceImpl\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>2、静态工厂构造<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 静态工厂 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.spring.b_instance.StaticFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getUserService\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>3、实例工厂构造<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 实例工厂 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.spring.b_instance.InstanceFactory\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService02\"</span> <span class=\"attr\">factory-bean</span>=<span class=\"string\">\"myFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getUserService\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"FactoryBean\"><a href=\"#FactoryBean\" class=\"headerlink\" title=\"FactoryBean\"></a>FactoryBean</h3><p>spring提供的工厂包装bean，实现factoryBean接口后，spring将加载首先加载该接口。</p>\n<p>起到懒加载的作用。</p>\n<p><strong><em>但是用这种方式后需要手动进行依赖注入。</em></strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">&lt;!-- FactoryBean 一个实现了工厂的bean每次实例时，都是通过工厂创建，而不是直接的实例</span></span><br><span class=\"line\"><span class=\"comment\">   \tspring内部调用其getObject方法获取实例</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.spring.c_factorybean.MyFactoryBean\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tString xmlPath = <span class=\"string\">\"com/lsh/spring/c_factorybean/applicationContext.xml\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// bean不会被立即加载UserService而是调用getBean时才会加载</span></span><br><span class=\"line\">\t\tApplicationContext applicationContext = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(</span><br><span class=\"line\">\t\t\t\txmlPath);</span><br><span class=\"line\">\t\tIUserService userService = (IUserService) applicationContext</span><br><span class=\"line\">\t\t\t\t.getBean(<span class=\"string\">\"userService\"</span>);</span><br><span class=\"line\">\t\tuserService.serviceMethod();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"scope-作用域\"><a href=\"#scope-作用域\" class=\"headerlink\" title=\"scope 作用域\"></a>scope 作用域</h3><p>指定生成的bean是否为单例或者多例，默认为单例<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>singleton : 单例<br>prototype : 多例</p>\n<p>对于FactoryBean生产的bean需要在scope和isSingleton同时为单例的情况下才能生成单例的实例。</p>\n<h3 id=\"lifecycle-生命周期\"><a href=\"#lifecycle-生命周期\" class=\"headerlink\" title=\"lifecycle 生命周期\"></a>lifecycle 生命周期</h3><p>xml 中 指定对应 init和destory方法，spring自动调用<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.spring.d_lifecycle.UserServiceImpl\"</span> <span class=\"attr\">init-method</span>=<span class=\"string\">\"init\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"destroy\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"BeanPostProcessor-回调\"><a href=\"#BeanPostProcessor-回调\" class=\"headerlink\" title=\"BeanPostProcessor 回调\"></a>BeanPostProcessor 回调</h3><p>BeanPostProcessor会在对象的init方法前后分别执行，开发者可以在此时对对象进行加工或者替换，但是<strong><em>对象销毁时仍然使用源对象的destroy方法</em></strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 声明一个BeanPostProcessor，提供给Spring回调 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.spring.d_lifecycle.MyBeanPostProcessor\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"MyBeanPostProcessor postProcessBefore \"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessAfterInitialization</span><span class=\"params\">(<span class=\"keyword\">final</span> Object bean,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tString beanName)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"MyBeanPostProcessor postProcessAfter \"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Proxy.newProxyInstance(</span><br><span class=\"line\">\t\t\tMyBeanPostProcessor.class.getClassLoader(),</span><br><span class=\"line\">\t\t\tUserServiceImpl.class.getInterfaces(), <span class=\"keyword\">new</span> InvocationHandler() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\t\t\tObject[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">\t\t\t\t\tString name = method.getName();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"开始调用\"</span> + name + <span class=\"string\">\" 已经记录和处理\"</span>);</span><br><span class=\"line\">\t\t\t\t\tObject methodResult = method.invoke(bean, args);</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"结束调用\"</span> + name + <span class=\"string\">\"已经记录和处理\"</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> methodResult;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.lsh.spring.d_lifecycle.UserServiceImpl construct</span><br><span class=\"line\">MyBeanPostProcessor postProcessBefore  ------------------------ &gt;&gt;&gt; postProcessor开始执行</span><br><span class=\"line\">CopyOfMyBeanPostProcessor postProcessBefore </span><br><span class=\"line\">com.lsh.spring.d_lifecycle.UserServiceImpl init</span><br><span class=\"line\">MyBeanPostProcessor postProcessAfter </span><br><span class=\"line\"></span><br><span class=\"line\">CopyOfMyBeanPostProcessor postProcessAfter </span><br><span class=\"line\">Copy 开始调用serviceMethod 已经记录和处理 ------------------------&gt;&gt;&gt;已经转为代理类</span><br><span class=\"line\">开始调用serviceMethod 已经记录和处理</span><br><span class=\"line\">com.lsh.spring.d_lifecycle.UserServiceImpl serviceMethod ------------------&gt;&gt;&gt;代理类中调用了源实例的方法</span><br><span class=\"line\">结束调用serviceMethod已经记录和处理</span><br><span class=\"line\">Copy 结束调用serviceMethod已经记录和处理</span><br><span class=\"line\">com.lsh.spring.d_lifecycle.UserServiceImpl destroy ---------------&gt;&gt;&gt;调用了destroy</span><br></pre></td></tr></table></figure>\n<h3 id=\"P命令空间\"><a href=\"#P命令空间\" class=\"headerlink\" title=\"P命令空间\"></a>P命令空间</h3><p>可以简化get/set方法，在参数注入时不用再去书写<property>&lt;/~&gt;类似的二级节点，类似android的配置文件。<br>使用时写上命名空间，如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\t   http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></property></p>\n<h3 id=\"SpEL\"><a href=\"#SpEL\" class=\"headerlink\" title=\"SpEL\"></a>SpEL</h3><p>对<code>&lt;property&gt;</code>进行统一编程，所有的内容都使用value<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"#&#123;表达式&#125;\"</span>&gt;</span></span><br><span class=\"line\">#&#123;123&#125;、#&#123;'jack'&#125; ： 数字、字符串</span><br><span class=\"line\">#&#123;beanId&#125;\t：另一个bean引用</span><br><span class=\"line\">#&#123;beanId.propName&#125;\t：操作数据</span><br><span class=\"line\">#&#123;beanId.toString()&#125;\t：执行方法</span><br><span class=\"line\">#&#123;T(类).字段|方法&#125;\t：静态方法或字段</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"spring常用注解\"><a href=\"#spring常用注解\" class=\"headerlink\" title=\"spring常用注解\"></a>spring常用注解</h2><p>使用注解时需要添加命名空间，并配置要扫描的包，如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\t   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\t   http://www.springframework.org/schema/context </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\t   http://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 开启扫描 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.lsh.spring.e_di\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>常用替代bean配置的注解<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@component</span> <span class=\"comment\">// 指定一个bean，以下三个为component的衍生注解</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span> <span class=\"comment\">// 指明是一个control层</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span> <span class=\"comment\">// 指明是一个Service层</span></span><br><span class=\"line\"><span class=\"meta\">@Repository</span> <span class=\"comment\">// 指明是一个dao层</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Value</span> <span class=\"comment\">// 注入参数</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span> <span class=\"comment\">// 自动装配，可写在变量名上，也可写在set方法上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE) <span class=\"comment\">// 指明参数的作用域 单例(singleton)或者多例(prototype)</span></span><br></pre></td></tr></table></figure></p>\n<p>即使，使用了注解setter方法也是不可避免的，需要添加setter方法才可以注入。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Spring简介\"><a href=\"#Spring简介\" class=\"headerlink\" title=\"Spring简介\"></a>Spring简介</h2><p>Spring核心内容：bean、core、context、expression language</p>\n<h2 id=\"BeanFactory和ApplicationContext的区别\"><a href=\"#BeanFactory和ApplicationContext的区别\" class=\"headerlink\" title=\"BeanFactory和ApplicationContext的区别\"></a>BeanFactory和ApplicationContext的区别</h2><p>1、加载问题<br>beanFactory会具备懒加载，只有在getBean的时候才会加载bean<br>applicationContext<strong><em>会立即加载配置文件中的所有bean</em></strong><br>2、applicationContext更强大<br>applicationContext可以进行国际化处理、事件传递、Bean自动装配、各种不同应用层的Context实现</p>\n<h2 id=\"Bean文件详解\"><a href=\"#Bean文件详解\" class=\"headerlink\" title=\"Bean文件详解\"></a>Bean文件详解</h2><h3 id=\"Bean的生成方式\"><a href=\"#Bean的生成方式\" class=\"headerlink\" title=\"Bean的生成方式\"></a>Bean的生成方式</h3><p>1、默认构造<br>即普通的bean声明方式<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 默认构造 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.spring.b_instance.UserServiceImpl\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>2、静态工厂构造<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 静态工厂 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.spring.b_instance.StaticFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getUserService\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>3、实例工厂构造<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 实例工厂 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.spring.b_instance.InstanceFactory\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService02\"</span> <span class=\"attr\">factory-bean</span>=<span class=\"string\">\"myFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getUserService\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"FactoryBean\"><a href=\"#FactoryBean\" class=\"headerlink\" title=\"FactoryBean\"></a>FactoryBean</h3><p>spring提供的工厂包装bean，实现factoryBean接口后，spring将加载首先加载该接口。</p>\n<p>起到懒加载的作用。</p>\n<p><strong><em>但是用这种方式后需要手动进行依赖注入。</em></strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">&lt;!-- FactoryBean 一个实现了工厂的bean每次实例时，都是通过工厂创建，而不是直接的实例</span></span><br><span class=\"line\"><span class=\"comment\">   \tspring内部调用其getObject方法获取实例</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.spring.c_factorybean.MyFactoryBean\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tString xmlPath = <span class=\"string\">\"com/lsh/spring/c_factorybean/applicationContext.xml\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// bean不会被立即加载UserService而是调用getBean时才会加载</span></span><br><span class=\"line\">\t\tApplicationContext applicationContext = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(</span><br><span class=\"line\">\t\t\t\txmlPath);</span><br><span class=\"line\">\t\tIUserService userService = (IUserService) applicationContext</span><br><span class=\"line\">\t\t\t\t.getBean(<span class=\"string\">\"userService\"</span>);</span><br><span class=\"line\">\t\tuserService.serviceMethod();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"scope-作用域\"><a href=\"#scope-作用域\" class=\"headerlink\" title=\"scope 作用域\"></a>scope 作用域</h3><p>指定生成的bean是否为单例或者多例，默认为单例<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>singleton : 单例<br>prototype : 多例</p>\n<p>对于FactoryBean生产的bean需要在scope和isSingleton同时为单例的情况下才能生成单例的实例。</p>\n<h3 id=\"lifecycle-生命周期\"><a href=\"#lifecycle-生命周期\" class=\"headerlink\" title=\"lifecycle 生命周期\"></a>lifecycle 生命周期</h3><p>xml 中 指定对应 init和destory方法，spring自动调用<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.spring.d_lifecycle.UserServiceImpl\"</span> <span class=\"attr\">init-method</span>=<span class=\"string\">\"init\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"destroy\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"BeanPostProcessor-回调\"><a href=\"#BeanPostProcessor-回调\" class=\"headerlink\" title=\"BeanPostProcessor 回调\"></a>BeanPostProcessor 回调</h3><p>BeanPostProcessor会在对象的init方法前后分别执行，开发者可以在此时对对象进行加工或者替换，但是<strong><em>对象销毁时仍然使用源对象的destroy方法</em></strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 声明一个BeanPostProcessor，提供给Spring回调 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.spring.d_lifecycle.MyBeanPostProcessor\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"MyBeanPostProcessor postProcessBefore \"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessAfterInitialization</span><span class=\"params\">(<span class=\"keyword\">final</span> Object bean,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tString beanName)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"MyBeanPostProcessor postProcessAfter \"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Proxy.newProxyInstance(</span><br><span class=\"line\">\t\t\tMyBeanPostProcessor.class.getClassLoader(),</span><br><span class=\"line\">\t\t\tUserServiceImpl.class.getInterfaces(), <span class=\"keyword\">new</span> InvocationHandler() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\t\t\tObject[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">\t\t\t\t\tString name = method.getName();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"开始调用\"</span> + name + <span class=\"string\">\" 已经记录和处理\"</span>);</span><br><span class=\"line\">\t\t\t\t\tObject methodResult = method.invoke(bean, args);</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"结束调用\"</span> + name + <span class=\"string\">\"已经记录和处理\"</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> methodResult;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.lsh.spring.d_lifecycle.UserServiceImpl construct</span><br><span class=\"line\">MyBeanPostProcessor postProcessBefore  ------------------------ &gt;&gt;&gt; postProcessor开始执行</span><br><span class=\"line\">CopyOfMyBeanPostProcessor postProcessBefore </span><br><span class=\"line\">com.lsh.spring.d_lifecycle.UserServiceImpl init</span><br><span class=\"line\">MyBeanPostProcessor postProcessAfter </span><br><span class=\"line\"></span><br><span class=\"line\">CopyOfMyBeanPostProcessor postProcessAfter </span><br><span class=\"line\">Copy 开始调用serviceMethod 已经记录和处理 ------------------------&gt;&gt;&gt;已经转为代理类</span><br><span class=\"line\">开始调用serviceMethod 已经记录和处理</span><br><span class=\"line\">com.lsh.spring.d_lifecycle.UserServiceImpl serviceMethod ------------------&gt;&gt;&gt;代理类中调用了源实例的方法</span><br><span class=\"line\">结束调用serviceMethod已经记录和处理</span><br><span class=\"line\">Copy 结束调用serviceMethod已经记录和处理</span><br><span class=\"line\">com.lsh.spring.d_lifecycle.UserServiceImpl destroy ---------------&gt;&gt;&gt;调用了destroy</span><br></pre></td></tr></table></figure>\n<h3 id=\"P命令空间\"><a href=\"#P命令空间\" class=\"headerlink\" title=\"P命令空间\"></a>P命令空间</h3><p>可以简化get/set方法，在参数注入时不用再去书写<property>&lt;/~&gt;类似的二级节点，类似android的配置文件。<br>使用时写上命名空间，如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\t   http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></property></p>\n<h3 id=\"SpEL\"><a href=\"#SpEL\" class=\"headerlink\" title=\"SpEL\"></a>SpEL</h3><p>对<code>&lt;property&gt;</code>进行统一编程，所有的内容都使用value<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"#&#123;表达式&#125;\"</span>&gt;</span></span><br><span class=\"line\">#&#123;123&#125;、#&#123;'jack'&#125; ： 数字、字符串</span><br><span class=\"line\">#&#123;beanId&#125;\t：另一个bean引用</span><br><span class=\"line\">#&#123;beanId.propName&#125;\t：操作数据</span><br><span class=\"line\">#&#123;beanId.toString()&#125;\t：执行方法</span><br><span class=\"line\">#&#123;T(类).字段|方法&#125;\t：静态方法或字段</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"spring常用注解\"><a href=\"#spring常用注解\" class=\"headerlink\" title=\"spring常用注解\"></a>spring常用注解</h2><p>使用注解时需要添加命名空间，并配置要扫描的包，如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t   <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\t   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\t   http://www.springframework.org/schema/context </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\t   http://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 开启扫描 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.lsh.spring.e_di\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>常用替代bean配置的注解<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@component</span> <span class=\"comment\">// 指定一个bean，以下三个为component的衍生注解</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span> <span class=\"comment\">// 指明是一个control层</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span> <span class=\"comment\">// 指明是一个Service层</span></span><br><span class=\"line\"><span class=\"meta\">@Repository</span> <span class=\"comment\">// 指明是一个dao层</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Value</span> <span class=\"comment\">// 注入参数</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span> <span class=\"comment\">// 自动装配，可写在变量名上，也可写在set方法上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE) <span class=\"comment\">// 指明参数的作用域 单例(singleton)或者多例(prototype)</span></span><br></pre></td></tr></table></figure></p>\n<p>即使，使用了注解setter方法也是不可避免的，需要添加setter方法才可以注入。</p>\n"},{"title":"2017-2-4-Struts2入门","date":"2017-02-04T03:25:54.000Z","layout":"post","_content":"Struts的简介：\nStruts is a Model View Controller framework. Struts provides Controller and View components, and integrates with other technologies to provide the Model. The framework's Controller acts as a bridge between the application's Model and the web View.\n\n<!-- more -->\n\n## 基本的配置环境\n\n1、导入以下包（参考struts-blank.war）\n\n  - asm-3.3.jar   // asm Java 字节码操纵框架（操控二进制）\n  - asm-commons-3.3.jar\n  - asm-tree-3.3.jar\n  - commons-fileupload-1.3.2.jar  // 上传下载\n  - commons-io-2.2.jar  // io增强包\n  - commons-lang3-3.2.jar  // lang增强包\n  - freemarker-2.3.22.jar  // 页面模版包（struts自身输出页面信息）\n  - javassist-3.11.0.GA.jar  // 字节码包\n  - log4j-api-2.3.jar  // 日志框架\n  - log4j-core-2.3.jar\n  - ognl-3.0.19.jar  // ognl 表达式\n  - struts2-core-2.3.31.jar  // 核心库\n  - xwork-core-2.3.31.jar  // 核心库\n\n\n2、配置Filter作为拦截器\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app id=\"WebApp_9\" version=\"2.4\" xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\">\n\n\t<!-- 该拦截器在struts2包中 -->\n\t<filter>\n\t\t<filter-name>struts2</filter-name>\n\t\t<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>\n\t</filter>\n\n\t<filter-mapping>\n\t\t<filter-name>struts2</filter-name>\n\t\t<url-pattern>/*</url-pattern>\n\t</filter-mapping>\n</web-app>\n```\n\n3、在classpath的根目录下配置一个strut.xml\n\n## struts.xml的配置\n\n一个基本的struts.xml内容如下：\n（其所需DTD在struts包下）\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE struts PUBLIC\n\t\"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"\n\t\"http://struts.apache.org/dtds/struts-2.3.dtd\">\n<struts>\n\t<!-- 开发模式（更改struts.xml不用重启） -->\n\t<constant name=\"struts.devMode\" value=\"true\"></constant>\n\t<!-- 被拦截action的后缀名（空串或者\",\"都代表无后缀，内部为切割逗号） -->\n\t<constant name=\"struts.action.extension\" value=\",\"></constant>\n\t\n\t<!-- 命名空间以“/”开头 -->\n\t<package name=\"pck01\" extends=\"struts-default\" namespace=\"/hello\">\n\t\t<action name=\"frist\" class=\"com.lsh.struts.web.FristAction\"\n\t\t\tmethod=\"helloStruts\">\n\t\t\t<result name=\"true\">/success.jsp</result>\n\t\t</action>\n\t</package>\n\n\t<!-- 包继成不能继承namespace！！继承后namespace为默认的\"\" -->\n\t<package name=\"pck02\" extends=\"pck01\">\n\t\t<action name=\"second\" class=\"com.lsh.struts.web.SecondAction\"\n\t\t\tmethod=\"hiYa\">\n\t\t\t<result name=\"true\">/success02.jsp</result>\n\t\t</action>\n\t</package>\n\n</struts>\n```\n\n## struts.xml中实用常量\n|常量名 | 常量值 | 说明|\n|---|---|---|\n|struts.i18n.encoding|\tUTF-8|\t应用中使用的编码|\n|struts.objectFactory.spring.autoWire|\tname|\t和spring框架整合有关|\n|struts.multipart.parser|\tjakarta|\t指定文件上传用的组件|\n|struts.multipart.maxSize|\t2097152|\t文件上传总文件大小限制：2M|\n|struts.action.extension|\taction,,\t|能进入Struts2框架内部的url地址后缀名。多个值用逗号分隔|\n|struts.enable.DynamicMethodInvocation|\tfalse\t|是否允许动态方法调用|\n|struts.devMode\tfalse|\t是否是开发模式。|开发模式：改了配置文件，不需要重启。输出更多的错误信息。开发阶段建议为true。|\n|struts.ui.theme\t|xhtml\t|页面展示用的主题|\n\n\n## struts动态方法调用\naction标签中name属性可以使用\"\\*\"作为通配符，所以当出现这种情况时，通配符对应的内容可以被{1、2、3、4....}所代替。\n\n``` xml\n<action name=\"*_*\" class=\"com.xxx.xxx.ActionSupport\" method=\"{2}\">\n\t<result name=\"success\">{2}page.jsp</result>\n</action>\n```\n\n## action 中 参数注入\n\n1、静态注入（注入指定值）\n在struts.xml中的action下用<param name=\"key\">value</param>注入对应的参数值，同时在ActionSupport中书写 set/get方法。\n\n在result 结果视图为redirectAction的情况下，可以通过ognl的方式将参数传给重定向的Action。\n``` xml\n\t\t<action name=\"reply\" method=\"reply\"\n\t\t\tclass=\"com.lsh.demo.web.action.ShowTopicAction\">\n\t\t\t<result type=\"redirectAction\">\n\t\t\t\t<param name=\"actionName\">showTopic</param>\n\t\t\t\t<!-- 传递静态参数给重定向的Action-->\n\t\t\t\t<param name=\"topicId\">${topicId}</param>\n\t\t\t</result>\n\t\t</action>\n```\n2、动态参数注入 一\nstruts.xml无需改动，只写set/get方法即可注入\n\n如果需要注入一个bean，需为这个bean写set/get，同时请求参数为beanName.paramName的格式，struts会先调用get判断是否存在这个bean，不存在就set，然后再get这个bean去填充参数。\n\n3、动态参数注入 二\n实现ModelDriven接口，用此接口的getModel返回指定bean，以此进行填充\n\nModelDriven的注入会阻碍其他方法的注入。\n\n## Validation的使用\n\n作用：\n在参数注入阶段，对参数进行校验。出现错误时，将提示信息返回到input结果视图。\n\n原理：\n\nValidationAware接口、ValidationAwareSupport支持类、DefaultWorkflowInterceptor拦截器，会拦截action并判断参数的验证是否出现了问题\n\nActionSupport实现了ValidationAware 接口，并在 addFieldError(String fieldName, String errorMessage);addActionError(String anErrorMessage);等方法中将错误信息添加到了ValidationAwareSupport中。\n\nValidationAwareSupport支持类内部以Map存储了错误信息\n\nDefaultWorkflowInterceptor拦截器会判断是否存在错误信息，并在拦截器阶段返回 “input” 字段，标识验证失败。\n\n使用方法：\n\n 1. ActionSupport中都实现了validater接口，validate方法中进行参数校验，出现错误时将错误信息使用addFieldError存放起来。\n \n 2.当一个action中有多个method被调用，且各自需要一种验证方式时，为每个method创建创建一个validate+Method()方法进行校验。\n\n 3.通过xml配置文件配置校验不同的校验。\n   xml名称为：ActionClassName-ActionName-validation.xml （注意时对应action的name不是action类中的method）\n   \n   一般写法：\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE validators PUBLIC\n        \"-//Apache Struts//XWork Validator Definition 1.0//EN\"\n        \"http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd\">\n<validators>\n\t<!-- 以指定参数字段为校验单位，可以为这个字段配置多个校验器 -->\n\t<field name=\"password\">\n\t\t<field-validator type=\"requiredstring\">\n\t\t\t<message>密码不能为空</message>\n\t\t</field-validator>\n\t\t<field-validator type=\"stringlength\">\n\t\t\t<param name=\"maxLength\">18</param>\n\t\t\t<param name=\"minLength\">6</param>\n\t\t\t<message>密码长度为${minLength}~${maxLength}位</message>\n\t\t</field-validator>\n\t</field>\n\t\n\t<!-- 以一个验证器为单位进行配置，只能对这个验证器进行一次注入 -->\n\t<validator type=\"expression\">\n\t\t<param name=\"expression\"><![CDATA[password == repassword]]></param>\n\t\t<message>两次密码不一致</message>\n\t</validator>\n</validators>\n```\n\n默认的校验器 存放路径在 /com/opensymphony/xwork2/validator/validators/default.xml，默认的校验器可以直接使用其name\n``` xml\n<validators>\n    <validator name=\"required\" class=\"com.opensymphony.xwork2.validator.validators.RequiredFieldValidator\"/>\n    <validator name=\"requiredstring\" class=\"com.opensymphony.xwork2.validator.validators.RequiredStringValidator\"/>\n    <validator name=\"int\" class=\"com.opensymphony.xwork2.validator.validators.IntRangeFieldValidator\"/>\n    <validator name=\"long\" class=\"com.opensymphony.xwork2.validator.validators.LongRangeFieldValidator\"/>\n    <validator name=\"short\" class=\"com.opensymphony.xwork2.validator.validators.ShortRangeFieldValidator\"/>\n    <validator name=\"double\" class=\"com.opensymphony.xwork2.validator.validators.DoubleRangeFieldValidator\"/>\n    <validator name=\"date\" class=\"com.opensymphony.xwork2.validator.validators.DateRangeFieldValidator\"/>\n    <validator name=\"expression\" class=\"com.opensymphony.xwork2.validator.validators.ExpressionValidator\"/>\n    <validator name=\"fieldexpression\" class=\"com.opensymphony.xwork2.validator.validators.FieldExpressionValidator\"/>\n    <validator name=\"email\" class=\"com.opensymphony.xwork2.validator.validators.EmailValidator\"/>\n    <validator name=\"url\" class=\"com.opensymphony.xwork2.validator.validators.URLValidator\"/>\n    <validator name=\"visitor\" class=\"com.opensymphony.xwork2.validator.validators.VisitorFieldValidator\"/>\n    <validator name=\"conversion\" class=\"com.opensymphony.xwork2.validator.validators.ConversionErrorFieldValidator\"/>\n    <validator name=\"stringlength\" class=\"com.opensymphony.xwork2.validator.validators.StringLengthFieldValidator\"/>\n    <validator name=\"regex\" class=\"com.opensymphony.xwork2.validator.validators.RegexFieldValidator\"/>\n    <validator name=\"conditionalvisitor\" class=\"com.opensymphony.xwork2.validator.validators.ConditionalVisitorFieldValidator\"/>\n</validators>\n```\n\n对于不想使用拦截器的method可以添加注解@SkipValidation\n\n## 类型转换器\n\nTypeConvertor\n\n\n## 国际化 i18n\n### java中使用国际化\n1、java中使用国际化\n采用message_zh_cn.properties命名资源文件。\n并使用ResourceBundle.getBundle（“com.lsh.struts.message“,request.getLoacl()）读取对应的资源文件\n\n2、struts中的国际化方法 \n\n搜索顺序为就近原则：\n\n为全局应用配置一个String资源包，在struts.xml中指定默认的全局String资源包 <constant name=\"struts.custom.i18n.resources=testmessages,testmessages2\" value=\"com.lsh.struts.resource.xxxxx\"/>\n\n为指定包下配置一个String资源包 package_zh_cn.properties\n\n为指定action.class配置一个String资源包 ActionClassName_zh_cn.properties\n\n使用ActionSupport中TextProvider提供getText等方法可根据key值来获取string。\n\n### jsp中使用国际化\n在jsp页面使用jstl进行国际化。\n通过action访问jsp时，国际化会查找action的目录下的string资源文件，不适用action访问时使用全局的资源文件。\n\n``` xml\n<!--资源搜索的顺序为-->\n<s:i18n name=\"指定string资源路径\"> <!--不用写后面的zh_cn-->\n\t<s:text name=\"指定string的key\"/><!--单独使用也可以-->\n</s:i18n>\n```\n![jsp下i18n的搜索顺序][1]\n\n### 单个bean的国际化\n\n## 自定义拦截器\n\nMethodFilterInterceptor和Interceptor\n\n\n\n## 文件上传\n\n文件上传通过fileUpload拦截器进行工作\n\naction模版代码：\n\n``` java\n\tprivate File[] program; // 自动注入 数组的方式是为了支持多文件上传\n\tprivate String[] programFileName; // 固定格式parameter + FileName 获取文件名\n\tprivate String[] programContentType;  // 固定个你parameter + ContentType 获取文件MIME类型\n\n\tpublic String upExe() {\n\t\t// 通过ServletContext获取一个资源的真实路径\n\t\tServletContext servletContext = ServletActionContext\n\t\t\t\t.getServletContext();\n\t\tString realPath = servletContext.getRealPath(\"/WEB-INF/upfiles\");\n\n\t\tFile file = new File(realPath);\n\t\tif (file.exists()) {\n\t\t\tif (!file.isDirectory()) {\n\t\t\t\tfile.delete();\n\t\t\t}\n\t\t} else {\n\t\t\tfile.mkdirs();\n\t\t}\n\n\t\t// 移动至\n\t\tprogram[0].renameTo(new File(file, programFileName[0]));\n\n\t\treturn SUCCESS;\n\t}\n```\n``` html\n\t<!--输出动作上的错误信息，非field错误信息-->\n\t<s:actionerror /><br>\n\t<!--固定格式 entype=”multipart/form-data“ -->\n\t<s:form action=\"fileup/upExe\" enctype=\"multipart/form-data\" method=\"POST\">\n\t\t<s:file name=\"program\" label=\"上传一个文件\" />\n\t\t<s:submit value=\"上传\" />\n\t</s:form>\n```\n更改上传的大小限制：\n```xml\n<constant name=\"struts.multipart.maxSize\" value=\"byte为单位\"/>\n```\n\n限制文件上传的种类：\nFileUploadInterceptor中有参数限制，\n1、限制后缀名    allowedTypes\n2、限制文件类型 allowedExtensions\n\n使用拦截器注入参数的方式\n``` xml\n<interceptor-ref name=\"defaultStack\">\n\t<param name=\"fileupload.maximumSize\">上传大小byte单位</param>\n\t<param name=\"fileupload.allowedTypes\">image/pjpg,image/png</param>\n\t<param name=\"fileupload.allowedExtensions\">.jpg.png.gif</param>\n</interceptor-ref>\n```\n\n## 文件下载\n使用StreamResult流结果视图\n\n固定格式：\n\n``` java\n\tprivate InputStream inputStream; // 指定读取流 给其添加set/get\n\tprivate String filename;\n\t\n\tpublic String download() {\n\t\tString realPath = ServletActionContext.getServletContext().getRealPath(\n\t\t\t\t\"/WEB-INF/downfiles/文件名\");\n\t\tfilename = \"文件名\";\n\t\ttry {\n\t\t\tinputStream = new FileInputStream(new File(realPath));\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn SUCCESS;\n\t}\n```\n``` xml\n\t\t<action name=\"downFile\" class=\"com.lsh.struts.action.DownloadAction\" method=\"download\">\n\t\t\t<result type=\"stream\">\n\t\t\t\t<!-- 设置响应头：通知浏览器正文的类型，让其以下载的方式打开-->\n\t\t\t\t<param name=\"contentType\">application/octet-stream</param>\n\t\t\t\t<!-- 通知浏览器，以下载的方式打开并通知其下载名称 -->\n\t\t\t\t<param name=\"contentDisposition\">attachment;filename=${filename}</param>\n\t\t\t\t<!-- 将action.class中的读取流设置给结果视图-->\n\t\t\t\t<param name=\"inputName\">inputStream</param>\n\t\t\t</result>\n\t\t</action>\n```\n\n## OGNL表达式\n\n1、Ognl 的Roots节点\nOgnlContext是一个支持使用ognl表达式进行对象查找的Map集合，他需要一个root节点。\n\n在Xwork中root节点被CompoundRoot替换成了一个roots节点，并且封装了一个OgnlValueStack类用以处理CompoundRoot节点和调用ognl的解析功能。\n\nCompoundRoot是一个CopyAndWriteArrayList改造而成的 栈 结构。\n\n因此roots具备了栈的特性。\n\n2、向OgnlContext的roots节点中添加数据\nOgnlValueStack.push(obj);\n\n3、使用ognl表达式为OgnlContext中的对象属性赋值，和取值。\nOgnlValueStack.setValue(exper,obj);\nOgnlValueStack.setParameter(exper,obj);\nOgnlValueStack.findValue(exper,obj);\nOgnlValueStack.findString(exper);\n\n4、其中exper 取roots内容时不用带 \"#\" 。\n\n以索引的形式取roots中的值：\n```\n[0].name\n[1].name\n```\n“[ ]”的意思并非真正的索引，其实现方法为下：\n\n``` java\n    public CompoundRoot cutStack(int index) {\n        // 剪切index之后的所有元素\n\t\treturn new CompoundRoot(subList(index, size()));\n    }\n```\n即其返回index以后的列表，并在这个列表中查找所指定的属性。\n\nindex从0开始计算。\n\n则[1].name代表查找第二个元素之后的所有元素，而不是单指第二个。\n\n5、特殊方法：\n - OgnlValueStack.set(str,obj)\n``` java\n    public void set(String key, Object o) {\n        Map setMap = retrieveSetMap();\n        setMap.put(key, o);\n    }\n\t// 恢复map\n    private Map retrieveSetMap() {\n        Map setMap;\n        Object topObj = peek();\n        if (shouldUseOldMap(topObj)) {\n            setMap = (Map) topObj;\n        } else {\n            setMap = new HashMap();\n            setMap.put(MAP_IDENTIFIER_KEY, \"\");\n            push(setMap);\n        }\n        return setMap;\n    }\n\t// 检测该对象是否为包含 MAP_IDENTIFIER_KEY 的map\n\tprivate boolean shouldUseOldMap(Object topObj) {\n        return topObj instanceof Map && ((Map) topObj).get(MAP_IDENTIFIER_KEY) != null;\n    }\n```\n该方法，先检测root栈顶是否为map，不是则重新创建，是则直接返回，将这个map压入栈顶，并将str=obj put到map中去。\n\n特殊点： 该方法只会检测CompoundRoot的顶部是否有对应的map，一但顶部的原有的map被下压，仍然重新创建一个map。\n\n6、jsp中强制使用ognl表达式\n\n在一些struts-tags的属性中使用 \" %{ognl expression} \"\n\n7、ognl表达式中可以使用四则运算\n\n![Struts2 的contextMap数据结构][2]\n\n![Struts2结构图][3]\n\n\n  [1]: /img/2017-2-4-Struts2入门/jsp下i18n的搜索顺序.png \"jsp下i18n的搜索顺序.png\"\n  [2]: /img/2017-2-4-Struts2入门/struts数据结构详解.png \"struts数据结构详解.png\"\n  [3]: /img/2017-2-4-Struts2入门/Struts2结构图.png \"Struts2结构图.png\"","source":"_posts/2017-2-4-Struts2入门.md","raw":"---\ntitle: 2017-2-4-Struts2入门\ndate: 2017-2-4 11:25:54 \ncategories: JavaEE\ntags: [Struts2]\nlayout: post\n---\nStruts的简介：\nStruts is a Model View Controller framework. Struts provides Controller and View components, and integrates with other technologies to provide the Model. The framework's Controller acts as a bridge between the application's Model and the web View.\n\n<!-- more -->\n\n## 基本的配置环境\n\n1、导入以下包（参考struts-blank.war）\n\n  - asm-3.3.jar   // asm Java 字节码操纵框架（操控二进制）\n  - asm-commons-3.3.jar\n  - asm-tree-3.3.jar\n  - commons-fileupload-1.3.2.jar  // 上传下载\n  - commons-io-2.2.jar  // io增强包\n  - commons-lang3-3.2.jar  // lang增强包\n  - freemarker-2.3.22.jar  // 页面模版包（struts自身输出页面信息）\n  - javassist-3.11.0.GA.jar  // 字节码包\n  - log4j-api-2.3.jar  // 日志框架\n  - log4j-core-2.3.jar\n  - ognl-3.0.19.jar  // ognl 表达式\n  - struts2-core-2.3.31.jar  // 核心库\n  - xwork-core-2.3.31.jar  // 核心库\n\n\n2、配置Filter作为拦截器\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app id=\"WebApp_9\" version=\"2.4\" xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\">\n\n\t<!-- 该拦截器在struts2包中 -->\n\t<filter>\n\t\t<filter-name>struts2</filter-name>\n\t\t<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>\n\t</filter>\n\n\t<filter-mapping>\n\t\t<filter-name>struts2</filter-name>\n\t\t<url-pattern>/*</url-pattern>\n\t</filter-mapping>\n</web-app>\n```\n\n3、在classpath的根目录下配置一个strut.xml\n\n## struts.xml的配置\n\n一个基本的struts.xml内容如下：\n（其所需DTD在struts包下）\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE struts PUBLIC\n\t\"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"\n\t\"http://struts.apache.org/dtds/struts-2.3.dtd\">\n<struts>\n\t<!-- 开发模式（更改struts.xml不用重启） -->\n\t<constant name=\"struts.devMode\" value=\"true\"></constant>\n\t<!-- 被拦截action的后缀名（空串或者\",\"都代表无后缀，内部为切割逗号） -->\n\t<constant name=\"struts.action.extension\" value=\",\"></constant>\n\t\n\t<!-- 命名空间以“/”开头 -->\n\t<package name=\"pck01\" extends=\"struts-default\" namespace=\"/hello\">\n\t\t<action name=\"frist\" class=\"com.lsh.struts.web.FristAction\"\n\t\t\tmethod=\"helloStruts\">\n\t\t\t<result name=\"true\">/success.jsp</result>\n\t\t</action>\n\t</package>\n\n\t<!-- 包继成不能继承namespace！！继承后namespace为默认的\"\" -->\n\t<package name=\"pck02\" extends=\"pck01\">\n\t\t<action name=\"second\" class=\"com.lsh.struts.web.SecondAction\"\n\t\t\tmethod=\"hiYa\">\n\t\t\t<result name=\"true\">/success02.jsp</result>\n\t\t</action>\n\t</package>\n\n</struts>\n```\n\n## struts.xml中实用常量\n|常量名 | 常量值 | 说明|\n|---|---|---|\n|struts.i18n.encoding|\tUTF-8|\t应用中使用的编码|\n|struts.objectFactory.spring.autoWire|\tname|\t和spring框架整合有关|\n|struts.multipart.parser|\tjakarta|\t指定文件上传用的组件|\n|struts.multipart.maxSize|\t2097152|\t文件上传总文件大小限制：2M|\n|struts.action.extension|\taction,,\t|能进入Struts2框架内部的url地址后缀名。多个值用逗号分隔|\n|struts.enable.DynamicMethodInvocation|\tfalse\t|是否允许动态方法调用|\n|struts.devMode\tfalse|\t是否是开发模式。|开发模式：改了配置文件，不需要重启。输出更多的错误信息。开发阶段建议为true。|\n|struts.ui.theme\t|xhtml\t|页面展示用的主题|\n\n\n## struts动态方法调用\naction标签中name属性可以使用\"\\*\"作为通配符，所以当出现这种情况时，通配符对应的内容可以被{1、2、3、4....}所代替。\n\n``` xml\n<action name=\"*_*\" class=\"com.xxx.xxx.ActionSupport\" method=\"{2}\">\n\t<result name=\"success\">{2}page.jsp</result>\n</action>\n```\n\n## action 中 参数注入\n\n1、静态注入（注入指定值）\n在struts.xml中的action下用<param name=\"key\">value</param>注入对应的参数值，同时在ActionSupport中书写 set/get方法。\n\n在result 结果视图为redirectAction的情况下，可以通过ognl的方式将参数传给重定向的Action。\n``` xml\n\t\t<action name=\"reply\" method=\"reply\"\n\t\t\tclass=\"com.lsh.demo.web.action.ShowTopicAction\">\n\t\t\t<result type=\"redirectAction\">\n\t\t\t\t<param name=\"actionName\">showTopic</param>\n\t\t\t\t<!-- 传递静态参数给重定向的Action-->\n\t\t\t\t<param name=\"topicId\">${topicId}</param>\n\t\t\t</result>\n\t\t</action>\n```\n2、动态参数注入 一\nstruts.xml无需改动，只写set/get方法即可注入\n\n如果需要注入一个bean，需为这个bean写set/get，同时请求参数为beanName.paramName的格式，struts会先调用get判断是否存在这个bean，不存在就set，然后再get这个bean去填充参数。\n\n3、动态参数注入 二\n实现ModelDriven接口，用此接口的getModel返回指定bean，以此进行填充\n\nModelDriven的注入会阻碍其他方法的注入。\n\n## Validation的使用\n\n作用：\n在参数注入阶段，对参数进行校验。出现错误时，将提示信息返回到input结果视图。\n\n原理：\n\nValidationAware接口、ValidationAwareSupport支持类、DefaultWorkflowInterceptor拦截器，会拦截action并判断参数的验证是否出现了问题\n\nActionSupport实现了ValidationAware 接口，并在 addFieldError(String fieldName, String errorMessage);addActionError(String anErrorMessage);等方法中将错误信息添加到了ValidationAwareSupport中。\n\nValidationAwareSupport支持类内部以Map存储了错误信息\n\nDefaultWorkflowInterceptor拦截器会判断是否存在错误信息，并在拦截器阶段返回 “input” 字段，标识验证失败。\n\n使用方法：\n\n 1. ActionSupport中都实现了validater接口，validate方法中进行参数校验，出现错误时将错误信息使用addFieldError存放起来。\n \n 2.当一个action中有多个method被调用，且各自需要一种验证方式时，为每个method创建创建一个validate+Method()方法进行校验。\n\n 3.通过xml配置文件配置校验不同的校验。\n   xml名称为：ActionClassName-ActionName-validation.xml （注意时对应action的name不是action类中的method）\n   \n   一般写法：\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE validators PUBLIC\n        \"-//Apache Struts//XWork Validator Definition 1.0//EN\"\n        \"http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd\">\n<validators>\n\t<!-- 以指定参数字段为校验单位，可以为这个字段配置多个校验器 -->\n\t<field name=\"password\">\n\t\t<field-validator type=\"requiredstring\">\n\t\t\t<message>密码不能为空</message>\n\t\t</field-validator>\n\t\t<field-validator type=\"stringlength\">\n\t\t\t<param name=\"maxLength\">18</param>\n\t\t\t<param name=\"minLength\">6</param>\n\t\t\t<message>密码长度为${minLength}~${maxLength}位</message>\n\t\t</field-validator>\n\t</field>\n\t\n\t<!-- 以一个验证器为单位进行配置，只能对这个验证器进行一次注入 -->\n\t<validator type=\"expression\">\n\t\t<param name=\"expression\"><![CDATA[password == repassword]]></param>\n\t\t<message>两次密码不一致</message>\n\t</validator>\n</validators>\n```\n\n默认的校验器 存放路径在 /com/opensymphony/xwork2/validator/validators/default.xml，默认的校验器可以直接使用其name\n``` xml\n<validators>\n    <validator name=\"required\" class=\"com.opensymphony.xwork2.validator.validators.RequiredFieldValidator\"/>\n    <validator name=\"requiredstring\" class=\"com.opensymphony.xwork2.validator.validators.RequiredStringValidator\"/>\n    <validator name=\"int\" class=\"com.opensymphony.xwork2.validator.validators.IntRangeFieldValidator\"/>\n    <validator name=\"long\" class=\"com.opensymphony.xwork2.validator.validators.LongRangeFieldValidator\"/>\n    <validator name=\"short\" class=\"com.opensymphony.xwork2.validator.validators.ShortRangeFieldValidator\"/>\n    <validator name=\"double\" class=\"com.opensymphony.xwork2.validator.validators.DoubleRangeFieldValidator\"/>\n    <validator name=\"date\" class=\"com.opensymphony.xwork2.validator.validators.DateRangeFieldValidator\"/>\n    <validator name=\"expression\" class=\"com.opensymphony.xwork2.validator.validators.ExpressionValidator\"/>\n    <validator name=\"fieldexpression\" class=\"com.opensymphony.xwork2.validator.validators.FieldExpressionValidator\"/>\n    <validator name=\"email\" class=\"com.opensymphony.xwork2.validator.validators.EmailValidator\"/>\n    <validator name=\"url\" class=\"com.opensymphony.xwork2.validator.validators.URLValidator\"/>\n    <validator name=\"visitor\" class=\"com.opensymphony.xwork2.validator.validators.VisitorFieldValidator\"/>\n    <validator name=\"conversion\" class=\"com.opensymphony.xwork2.validator.validators.ConversionErrorFieldValidator\"/>\n    <validator name=\"stringlength\" class=\"com.opensymphony.xwork2.validator.validators.StringLengthFieldValidator\"/>\n    <validator name=\"regex\" class=\"com.opensymphony.xwork2.validator.validators.RegexFieldValidator\"/>\n    <validator name=\"conditionalvisitor\" class=\"com.opensymphony.xwork2.validator.validators.ConditionalVisitorFieldValidator\"/>\n</validators>\n```\n\n对于不想使用拦截器的method可以添加注解@SkipValidation\n\n## 类型转换器\n\nTypeConvertor\n\n\n## 国际化 i18n\n### java中使用国际化\n1、java中使用国际化\n采用message_zh_cn.properties命名资源文件。\n并使用ResourceBundle.getBundle（“com.lsh.struts.message“,request.getLoacl()）读取对应的资源文件\n\n2、struts中的国际化方法 \n\n搜索顺序为就近原则：\n\n为全局应用配置一个String资源包，在struts.xml中指定默认的全局String资源包 <constant name=\"struts.custom.i18n.resources=testmessages,testmessages2\" value=\"com.lsh.struts.resource.xxxxx\"/>\n\n为指定包下配置一个String资源包 package_zh_cn.properties\n\n为指定action.class配置一个String资源包 ActionClassName_zh_cn.properties\n\n使用ActionSupport中TextProvider提供getText等方法可根据key值来获取string。\n\n### jsp中使用国际化\n在jsp页面使用jstl进行国际化。\n通过action访问jsp时，国际化会查找action的目录下的string资源文件，不适用action访问时使用全局的资源文件。\n\n``` xml\n<!--资源搜索的顺序为-->\n<s:i18n name=\"指定string资源路径\"> <!--不用写后面的zh_cn-->\n\t<s:text name=\"指定string的key\"/><!--单独使用也可以-->\n</s:i18n>\n```\n![jsp下i18n的搜索顺序][1]\n\n### 单个bean的国际化\n\n## 自定义拦截器\n\nMethodFilterInterceptor和Interceptor\n\n\n\n## 文件上传\n\n文件上传通过fileUpload拦截器进行工作\n\naction模版代码：\n\n``` java\n\tprivate File[] program; // 自动注入 数组的方式是为了支持多文件上传\n\tprivate String[] programFileName; // 固定格式parameter + FileName 获取文件名\n\tprivate String[] programContentType;  // 固定个你parameter + ContentType 获取文件MIME类型\n\n\tpublic String upExe() {\n\t\t// 通过ServletContext获取一个资源的真实路径\n\t\tServletContext servletContext = ServletActionContext\n\t\t\t\t.getServletContext();\n\t\tString realPath = servletContext.getRealPath(\"/WEB-INF/upfiles\");\n\n\t\tFile file = new File(realPath);\n\t\tif (file.exists()) {\n\t\t\tif (!file.isDirectory()) {\n\t\t\t\tfile.delete();\n\t\t\t}\n\t\t} else {\n\t\t\tfile.mkdirs();\n\t\t}\n\n\t\t// 移动至\n\t\tprogram[0].renameTo(new File(file, programFileName[0]));\n\n\t\treturn SUCCESS;\n\t}\n```\n``` html\n\t<!--输出动作上的错误信息，非field错误信息-->\n\t<s:actionerror /><br>\n\t<!--固定格式 entype=”multipart/form-data“ -->\n\t<s:form action=\"fileup/upExe\" enctype=\"multipart/form-data\" method=\"POST\">\n\t\t<s:file name=\"program\" label=\"上传一个文件\" />\n\t\t<s:submit value=\"上传\" />\n\t</s:form>\n```\n更改上传的大小限制：\n```xml\n<constant name=\"struts.multipart.maxSize\" value=\"byte为单位\"/>\n```\n\n限制文件上传的种类：\nFileUploadInterceptor中有参数限制，\n1、限制后缀名    allowedTypes\n2、限制文件类型 allowedExtensions\n\n使用拦截器注入参数的方式\n``` xml\n<interceptor-ref name=\"defaultStack\">\n\t<param name=\"fileupload.maximumSize\">上传大小byte单位</param>\n\t<param name=\"fileupload.allowedTypes\">image/pjpg,image/png</param>\n\t<param name=\"fileupload.allowedExtensions\">.jpg.png.gif</param>\n</interceptor-ref>\n```\n\n## 文件下载\n使用StreamResult流结果视图\n\n固定格式：\n\n``` java\n\tprivate InputStream inputStream; // 指定读取流 给其添加set/get\n\tprivate String filename;\n\t\n\tpublic String download() {\n\t\tString realPath = ServletActionContext.getServletContext().getRealPath(\n\t\t\t\t\"/WEB-INF/downfiles/文件名\");\n\t\tfilename = \"文件名\";\n\t\ttry {\n\t\t\tinputStream = new FileInputStream(new File(realPath));\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn SUCCESS;\n\t}\n```\n``` xml\n\t\t<action name=\"downFile\" class=\"com.lsh.struts.action.DownloadAction\" method=\"download\">\n\t\t\t<result type=\"stream\">\n\t\t\t\t<!-- 设置响应头：通知浏览器正文的类型，让其以下载的方式打开-->\n\t\t\t\t<param name=\"contentType\">application/octet-stream</param>\n\t\t\t\t<!-- 通知浏览器，以下载的方式打开并通知其下载名称 -->\n\t\t\t\t<param name=\"contentDisposition\">attachment;filename=${filename}</param>\n\t\t\t\t<!-- 将action.class中的读取流设置给结果视图-->\n\t\t\t\t<param name=\"inputName\">inputStream</param>\n\t\t\t</result>\n\t\t</action>\n```\n\n## OGNL表达式\n\n1、Ognl 的Roots节点\nOgnlContext是一个支持使用ognl表达式进行对象查找的Map集合，他需要一个root节点。\n\n在Xwork中root节点被CompoundRoot替换成了一个roots节点，并且封装了一个OgnlValueStack类用以处理CompoundRoot节点和调用ognl的解析功能。\n\nCompoundRoot是一个CopyAndWriteArrayList改造而成的 栈 结构。\n\n因此roots具备了栈的特性。\n\n2、向OgnlContext的roots节点中添加数据\nOgnlValueStack.push(obj);\n\n3、使用ognl表达式为OgnlContext中的对象属性赋值，和取值。\nOgnlValueStack.setValue(exper,obj);\nOgnlValueStack.setParameter(exper,obj);\nOgnlValueStack.findValue(exper,obj);\nOgnlValueStack.findString(exper);\n\n4、其中exper 取roots内容时不用带 \"#\" 。\n\n以索引的形式取roots中的值：\n```\n[0].name\n[1].name\n```\n“[ ]”的意思并非真正的索引，其实现方法为下：\n\n``` java\n    public CompoundRoot cutStack(int index) {\n        // 剪切index之后的所有元素\n\t\treturn new CompoundRoot(subList(index, size()));\n    }\n```\n即其返回index以后的列表，并在这个列表中查找所指定的属性。\n\nindex从0开始计算。\n\n则[1].name代表查找第二个元素之后的所有元素，而不是单指第二个。\n\n5、特殊方法：\n - OgnlValueStack.set(str,obj)\n``` java\n    public void set(String key, Object o) {\n        Map setMap = retrieveSetMap();\n        setMap.put(key, o);\n    }\n\t// 恢复map\n    private Map retrieveSetMap() {\n        Map setMap;\n        Object topObj = peek();\n        if (shouldUseOldMap(topObj)) {\n            setMap = (Map) topObj;\n        } else {\n            setMap = new HashMap();\n            setMap.put(MAP_IDENTIFIER_KEY, \"\");\n            push(setMap);\n        }\n        return setMap;\n    }\n\t// 检测该对象是否为包含 MAP_IDENTIFIER_KEY 的map\n\tprivate boolean shouldUseOldMap(Object topObj) {\n        return topObj instanceof Map && ((Map) topObj).get(MAP_IDENTIFIER_KEY) != null;\n    }\n```\n该方法，先检测root栈顶是否为map，不是则重新创建，是则直接返回，将这个map压入栈顶，并将str=obj put到map中去。\n\n特殊点： 该方法只会检测CompoundRoot的顶部是否有对应的map，一但顶部的原有的map被下压，仍然重新创建一个map。\n\n6、jsp中强制使用ognl表达式\n\n在一些struts-tags的属性中使用 \" %{ognl expression} \"\n\n7、ognl表达式中可以使用四则运算\n\n![Struts2 的contextMap数据结构][2]\n\n![Struts2结构图][3]\n\n\n  [1]: /img/2017-2-4-Struts2入门/jsp下i18n的搜索顺序.png \"jsp下i18n的搜索顺序.png\"\n  [2]: /img/2017-2-4-Struts2入门/struts数据结构详解.png \"struts数据结构详解.png\"\n  [3]: /img/2017-2-4-Struts2入门/Struts2结构图.png \"Struts2结构图.png\"","slug":"2017-2-4-Struts2入门","published":1,"updated":"2018-01-02T01:08:38.450Z","comments":1,"photos":[],"link":"","_id":"cjbx3x35n000zizijguhkbj3x","content":"<p>Struts的简介：<br>Struts is a Model View Controller framework. Struts provides Controller and View components, and integrates with other technologies to provide the Model. The framework’s Controller acts as a bridge between the application’s Model and the web View.</p>\n<a id=\"more\"></a>\n<h2 id=\"基本的配置环境\"><a href=\"#基本的配置环境\" class=\"headerlink\" title=\"基本的配置环境\"></a>基本的配置环境</h2><p>1、导入以下包（参考struts-blank.war）</p>\n<ul>\n<li>asm-3.3.jar   // asm Java 字节码操纵框架（操控二进制）</li>\n<li>asm-commons-3.3.jar</li>\n<li>asm-tree-3.3.jar</li>\n<li>commons-fileupload-1.3.2.jar  // 上传下载</li>\n<li>commons-io-2.2.jar  // io增强包</li>\n<li>commons-lang3-3.2.jar  // lang增强包</li>\n<li>freemarker-2.3.22.jar  // 页面模版包（struts自身输出页面信息）</li>\n<li>javassist-3.11.0.GA.jar  // 字节码包</li>\n<li>log4j-api-2.3.jar  // 日志框架</li>\n<li>log4j-core-2.3.jar</li>\n<li>ognl-3.0.19.jar  // ognl 表达式</li>\n<li>struts2-core-2.3.31.jar  // 核心库</li>\n<li>xwork-core-2.3.31.jar  // 核心库</li>\n</ul>\n<p>2、配置Filter作为拦截器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">id</span>=<span class=\"string\">\"WebApp_9\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"2.4\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/j2ee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 该拦截器在struts2包中 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>3、在classpath的根目录下配置一个strut.xml</p>\n<h2 id=\"struts-xml的配置\"><a href=\"#struts-xml的配置\" class=\"headerlink\" title=\"struts.xml的配置\"></a>struts.xml的配置</h2><p>一个基本的struts.xml内容如下：<br>（其所需DTD在struts包下）<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class=\"line\"><span class=\"meta\">\t\"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">\t\"http://struts.apache.org/dtds/struts-2.3.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 开发模式（更改struts.xml不用重启） --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.devMode\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constant</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 被拦截action的后缀名（空串或者\",\"都代表无后缀，内部为切割逗号） --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.action.extension\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\",\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constant</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 命名空间以“/”开头 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pck01\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/hello\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"frist\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.struts.web.FristAction\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">method</span>=<span class=\"string\">\"helloStruts\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"true\"</span>&gt;</span>/success.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 包继成不能继承namespace！！继承后namespace为默认的\"\" --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pck02\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"pck01\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"second\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.struts.web.SecondAction\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">method</span>=<span class=\"string\">\"hiYa\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"true\"</span>&gt;</span>/success02.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"struts-xml中实用常量\"><a href=\"#struts-xml中实用常量\" class=\"headerlink\" title=\"struts.xml中实用常量\"></a>struts.xml中实用常量</h2><table>\n<thead>\n<tr>\n<th>常量名</th>\n<th>常量值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>struts.i18n.encoding</td>\n<td>UTF-8</td>\n<td>应用中使用的编码</td>\n</tr>\n<tr>\n<td>struts.objectFactory.spring.autoWire</td>\n<td>name</td>\n<td>和spring框架整合有关</td>\n</tr>\n<tr>\n<td>struts.multipart.parser</td>\n<td>jakarta</td>\n<td>指定文件上传用的组件</td>\n</tr>\n<tr>\n<td>struts.multipart.maxSize</td>\n<td>2097152</td>\n<td>文件上传总文件大小限制：2M</td>\n</tr>\n<tr>\n<td>struts.action.extension</td>\n<td>action,,</td>\n<td>能进入Struts2框架内部的url地址后缀名。多个值用逗号分隔</td>\n</tr>\n<tr>\n<td>struts.enable.DynamicMethodInvocation</td>\n<td>false</td>\n<td>是否允许动态方法调用</td>\n</tr>\n<tr>\n<td>struts.devMode    false</td>\n<td>是否是开发模式。</td>\n<td>开发模式：改了配置文件，不需要重启。输出更多的错误信息。开发阶段建议为true。</td>\n</tr>\n<tr>\n<td>struts.ui.theme</td>\n<td>xhtml</td>\n<td>页面展示用的主题</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"struts动态方法调用\"><a href=\"#struts动态方法调用\" class=\"headerlink\" title=\"struts动态方法调用\"></a>struts动态方法调用</h2><p>action标签中name属性可以使用”*“作为通配符，所以当出现这种情况时，通配符对应的内容可以被{1、2、3、4….}所代替。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"*_*\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.xxx.xxx.ActionSupport\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"&#123;2&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span>&gt;</span>&#123;2&#125;page.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"action-中-参数注入\"><a href=\"#action-中-参数注入\" class=\"headerlink\" title=\"action 中 参数注入\"></a>action 中 参数注入</h2><p>1、静态注入（注入指定值）<br>在struts.xml中的action下用<param name=\"key\">value注入对应的参数值，同时在ActionSupport中书写 set/get方法。</p>\n<p>在result 结果视图为redirectAction的情况下，可以通过ognl的方式将参数传给重定向的Action。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"reply\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"reply\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.demo.web.action.ShowTopicAction\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirectAction\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"actionName\"</span>&gt;</span>showTopic<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 传递静态参数给重定向的Action--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"topicId\"</span>&gt;</span>$&#123;topicId&#125;<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>2、动态参数注入 一<br>struts.xml无需改动，只写set/get方法即可注入</p>\n<p>如果需要注入一个bean，需为这个bean写set/get，同时请求参数为beanName.paramName的格式，struts会先调用get判断是否存在这个bean，不存在就set，然后再get这个bean去填充参数。</p>\n<p>3、动态参数注入 二<br>实现ModelDriven接口，用此接口的getModel返回指定bean，以此进行填充</p>\n<p>ModelDriven的注入会阻碍其他方法的注入。</p>\n<h2 id=\"Validation的使用\"><a href=\"#Validation的使用\" class=\"headerlink\" title=\"Validation的使用\"></a>Validation的使用</h2><p>作用：<br>在参数注入阶段，对参数进行校验。出现错误时，将提示信息返回到input结果视图。</p>\n<p>原理：</p>\n<p>ValidationAware接口、ValidationAwareSupport支持类、DefaultWorkflowInterceptor拦截器，会拦截action并判断参数的验证是否出现了问题</p>\n<p>ActionSupport实现了ValidationAware 接口，并在 addFieldError(String fieldName, String errorMessage);addActionError(String anErrorMessage);等方法中将错误信息添加到了ValidationAwareSupport中。</p>\n<p>ValidationAwareSupport支持类内部以Map存储了错误信息</p>\n<p>DefaultWorkflowInterceptor拦截器会判断是否存在错误信息，并在拦截器阶段返回 “input” 字段，标识验证失败。</p>\n<p>使用方法：</p>\n<ol>\n<li><p>ActionSupport中都实现了validater接口，validate方法中进行参数校验，出现错误时将错误信息使用addFieldError存放起来。</p>\n<p>2.当一个action中有多个method被调用，且各自需要一种验证方式时，为每个method创建创建一个validate+Method()方法进行校验。</p>\n<p>3.通过xml配置文件配置校验不同的校验。<br>xml名称为：ActionClassName-ActionName-validation.xml （注意时对应action的name不是action类中的method）</p>\n<p>一般写法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE validators PUBLIC</span></span><br><span class=\"line\"><span class=\"meta\">        \"-//Apache Struts//XWork Validator Definition 1.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">validators</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 以指定参数字段为校验单位，可以为这个字段配置多个校验器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">field</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">field-validator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"requiredstring\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">message</span>&gt;</span>密码不能为空<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">field-validator</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">field-validator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"stringlength\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxLength\"</span>&gt;</span>18<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minLength\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">message</span>&gt;</span>密码长度为$&#123;minLength&#125;~$&#123;maxLength&#125;位<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">field-validator</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">field</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 以一个验证器为单位进行配置，只能对这个验证器进行一次注入 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"expression\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"expression\"</span>&gt;</span>&lt;![CDATA[password == repassword]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">message</span>&gt;</span>两次密码不一致<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">validator</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validators</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>默认的校验器 存放路径在 /com/opensymphony/xwork2/validator/validators/default.xml，默认的校验器可以直接使用其name<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">validators</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"required\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.RequiredFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"requiredstring\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.RequiredStringValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"int\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.IntRangeFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"long\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.LongRangeFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"short\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.ShortRangeFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"double\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.DoubleRangeFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"date\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.DateRangeFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"expression\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.ExpressionValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fieldexpression\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.FieldExpressionValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.EmailValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.URLValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"visitor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.VisitorFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"conversion\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.ConversionErrorFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"stringlength\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.StringLengthFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"regex\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.RegexFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"conditionalvisitor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.ConditionalVisitorFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validators</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>对于不想使用拦截器的method可以添加注解@SkipValidation</p>\n<h2 id=\"类型转换器\"><a href=\"#类型转换器\" class=\"headerlink\" title=\"类型转换器\"></a>类型转换器</h2><p>TypeConvertor</p>\n<h2 id=\"国际化-i18n\"><a href=\"#国际化-i18n\" class=\"headerlink\" title=\"国际化 i18n\"></a>国际化 i18n</h2><h3 id=\"java中使用国际化\"><a href=\"#java中使用国际化\" class=\"headerlink\" title=\"java中使用国际化\"></a>java中使用国际化</h3><p>1、java中使用国际化<br>采用message_zh_cn.properties命名资源文件。<br>并使用ResourceBundle.getBundle（“com.lsh.struts.message“,request.getLoacl()）读取对应的资源文件</p>\n<p>2、struts中的国际化方法 </p>\n<p>搜索顺序为就近原则：</p>\n<p>为全局应用配置一个String资源包，在struts.xml中指定默认的全局String资源包 <constant name=\"struts.custom.i18n.resources=testmessages,testmessages2\" value=\"com.lsh.struts.resource.xxxxx\"></constant></p>\n<p>为指定包下配置一个String资源包 package_zh_cn.properties</p>\n<p>为指定action.class配置一个String资源包 ActionClassName_zh_cn.properties</p>\n<p>使用ActionSupport中TextProvider提供getText等方法可根据key值来获取string。</p>\n<h3 id=\"jsp中使用国际化\"><a href=\"#jsp中使用国际化\" class=\"headerlink\" title=\"jsp中使用国际化\"></a>jsp中使用国际化</h3><p>在jsp页面使用jstl进行国际化。<br>通过action访问jsp时，国际化会查找action的目录下的string资源文件，不适用action访问时使用全局的资源文件。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--资源搜索的顺序为--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">s:i18n</span> <span class=\"attr\">name</span>=<span class=\"string\">\"指定string资源路径\"</span>&gt;</span> <span class=\"comment\">&lt;!--不用写后面的zh_cn--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">s:text</span> <span class=\"attr\">name</span>=<span class=\"string\">\"指定string的key\"</span>/&gt;</span><span class=\"comment\">&lt;!--单独使用也可以--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">s:i18n</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/2017-2-4-Struts2入门/jsp下i18n的搜索顺序.png\" alt=\"jsp下i18n的搜索顺序\" title=\"jsp下i18n的搜索顺序.png\"></p>\n<h3 id=\"单个bean的国际化\"><a href=\"#单个bean的国际化\" class=\"headerlink\" title=\"单个bean的国际化\"></a>单个bean的国际化</h3><h2 id=\"自定义拦截器\"><a href=\"#自定义拦截器\" class=\"headerlink\" title=\"自定义拦截器\"></a>自定义拦截器</h2><p>MethodFilterInterceptor和Interceptor</p>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><p>文件上传通过fileUpload拦截器进行工作</p>\n<p>action模版代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> File[] program; <span class=\"comment\">// 自动注入 数组的方式是为了支持多文件上传</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String[] programFileName; <span class=\"comment\">// 固定格式parameter + FileName 获取文件名</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String[] programContentType;  <span class=\"comment\">// 固定个你parameter + ContentType 获取文件MIME类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">upExe</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 通过ServletContext获取一个资源的真实路径</span></span><br><span class=\"line\">\tServletContext servletContext = ServletActionContext</span><br><span class=\"line\">\t\t\t.getServletContext();</span><br><span class=\"line\">\tString realPath = servletContext.getRealPath(<span class=\"string\">\"/WEB-INF/upfiles\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tFile file = <span class=\"keyword\">new</span> File(realPath);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (file.exists()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!file.isDirectory()) &#123;</span><br><span class=\"line\">\t\t\tfile.delete();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfile.mkdirs();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 移动至</span></span><br><span class=\"line\">\tprogram[<span class=\"number\">0</span>].renameTo(<span class=\"keyword\">new</span> File(file, programFileName[<span class=\"number\">0</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--输出动作上的错误信息，非field错误信息--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">s:actionerror</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--固定格式 entype=”multipart/form-data“ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">s:form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"fileup/upExe\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">s:file</span> <span class=\"attr\">name</span>=<span class=\"string\">\"program\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"上传一个文件\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">s:submit</span> <span class=\"attr\">value</span>=<span class=\"string\">\"上传\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">s:form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>更改上传的大小限制：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.multipart.maxSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"byte为单位\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>限制文件上传的种类：<br>FileUploadInterceptor中有参数限制，<br>1、限制后缀名    allowedTypes<br>2、限制文件类型 allowedExtensions</p>\n<p>使用拦截器注入参数的方式<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultStack\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileupload.maximumSize\"</span>&gt;</span>上传大小byte单位<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileupload.allowedTypes\"</span>&gt;</span>image/pjpg,image/png<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileupload.allowedExtensions\"</span>&gt;</span>.jpg.png.gif<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h2><p>使用StreamResult流结果视图</p>\n<p>固定格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> InputStream inputStream; <span class=\"comment\">// 指定读取流 给其添加set/get</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String filename;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">download</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tString realPath = ServletActionContext.getServletContext().getRealPath(</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"/WEB-INF/downfiles/文件名\"</span>);</span><br><span class=\"line\">\tfilename = <span class=\"string\">\"文件名\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tinputStream = <span class=\"keyword\">new</span> FileInputStream(<span class=\"keyword\">new</span> File(realPath));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"downFile\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.struts.action.DownloadAction\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"download\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"stream\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 设置响应头：通知浏览器正文的类型，让其以下载的方式打开--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"contentType\"</span>&gt;</span>application/octet-stream<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 通知浏览器，以下载的方式打开并通知其下载名称 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"contentDisposition\"</span>&gt;</span>attachment;filename=$&#123;filename&#125;<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 将action.class中的读取流设置给结果视图--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"inputName\"</span>&gt;</span>inputStream<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"OGNL表达式\"><a href=\"#OGNL表达式\" class=\"headerlink\" title=\"OGNL表达式\"></a>OGNL表达式</h2><p>1、Ognl 的Roots节点<br>OgnlContext是一个支持使用ognl表达式进行对象查找的Map集合，他需要一个root节点。</p>\n<p>在Xwork中root节点被CompoundRoot替换成了一个roots节点，并且封装了一个OgnlValueStack类用以处理CompoundRoot节点和调用ognl的解析功能。</p>\n<p>CompoundRoot是一个CopyAndWriteArrayList改造而成的 栈 结构。</p>\n<p>因此roots具备了栈的特性。</p>\n<p>2、向OgnlContext的roots节点中添加数据<br>OgnlValueStack.push(obj);</p>\n<p>3、使用ognl表达式为OgnlContext中的对象属性赋值，和取值。<br>OgnlValueStack.setValue(exper,obj);<br>OgnlValueStack.setParameter(exper,obj);<br>OgnlValueStack.findValue(exper,obj);<br>OgnlValueStack.findString(exper);</p>\n<p>4、其中exper 取roots内容时不用带 “#” 。</p>\n<p>以索引的形式取roots中的值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0].name</span><br><span class=\"line\">[1].name</span><br></pre></td></tr></table></figure></p>\n<p>“[ ]”的意思并非真正的索引，其实现方法为下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> CompoundRoot <span class=\"title\">cutStack</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 剪切index之后的所有元素</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CompoundRoot(subList(index, size()));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>即其返回index以后的列表，并在这个列表中查找所指定的属性。</p>\n<p>index从0开始计算。</p>\n<p>则<a href=\"/img/2017-2-4-Struts2入门/jsp下i18n的搜索顺序.png\" title=\"jsp下i18n的搜索顺序.png\">1</a>.name代表查找第二个元素之后的所有元素，而不是单指第二个。</p>\n<p>5、特殊方法：</p>\n<ul>\n<li>OgnlValueStack.set(str,obj)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String key, Object o)</span> </span>&#123;</span><br><span class=\"line\">       Map setMap = retrieveSetMap();</span><br><span class=\"line\">       setMap.put(key, o);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"comment\">// 恢复map</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> Map <span class=\"title\">retrieveSetMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       Map setMap;</span><br><span class=\"line\">       Object topObj = peek();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (shouldUseOldMap(topObj)) &#123;</span><br><span class=\"line\">           setMap = (Map) topObj;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           setMap = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">           setMap.put(MAP_IDENTIFIER_KEY, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">           push(setMap);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> setMap;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"comment\">// 检测该对象是否为包含 MAP_IDENTIFIER_KEY 的map</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldUseOldMap</span><span class=\"params\">(Object topObj)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> topObj <span class=\"keyword\">instanceof</span> Map &amp;&amp; ((Map) topObj).get(MAP_IDENTIFIER_KEY) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>该方法，先检测root栈顶是否为map，不是则重新创建，是则直接返回，将这个map压入栈顶，并将str=obj put到map中去。</p>\n<p>特殊点： 该方法只会检测CompoundRoot的顶部是否有对应的map，一但顶部的原有的map被下压，仍然重新创建一个map。</p>\n<p>6、jsp中强制使用ognl表达式</p>\n<p>在一些struts-tags的属性中使用 “ %{ognl expression} “</p>\n<p>7、ognl表达式中可以使用四则运算</p>\n<p><img src=\"/img/2017-2-4-Struts2入门/struts数据结构详解.png\" alt=\"Struts2 的contextMap数据结构\" title=\"struts数据结构详解.png\"></p>\n<p><img src=\"/img/2017-2-4-Struts2入门/Struts2结构图.png\" alt=\"Struts2结构图\" title=\"Struts2结构图.png\"></p>\n","site":{"data":{}},"excerpt":"<p>Struts的简介：<br>Struts is a Model View Controller framework. Struts provides Controller and View components, and integrates with other technologies to provide the Model. The framework’s Controller acts as a bridge between the application’s Model and the web View.</p>","more":"<h2 id=\"基本的配置环境\"><a href=\"#基本的配置环境\" class=\"headerlink\" title=\"基本的配置环境\"></a>基本的配置环境</h2><p>1、导入以下包（参考struts-blank.war）</p>\n<ul>\n<li>asm-3.3.jar   // asm Java 字节码操纵框架（操控二进制）</li>\n<li>asm-commons-3.3.jar</li>\n<li>asm-tree-3.3.jar</li>\n<li>commons-fileupload-1.3.2.jar  // 上传下载</li>\n<li>commons-io-2.2.jar  // io增强包</li>\n<li>commons-lang3-3.2.jar  // lang增强包</li>\n<li>freemarker-2.3.22.jar  // 页面模版包（struts自身输出页面信息）</li>\n<li>javassist-3.11.0.GA.jar  // 字节码包</li>\n<li>log4j-api-2.3.jar  // 日志框架</li>\n<li>log4j-core-2.3.jar</li>\n<li>ognl-3.0.19.jar  // ognl 表达式</li>\n<li>struts2-core-2.3.31.jar  // 核心库</li>\n<li>xwork-core-2.3.31.jar  // 核心库</li>\n</ul>\n<p>2、配置Filter作为拦截器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">id</span>=<span class=\"string\">\"WebApp_9\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"2.4\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/j2ee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 该拦截器在struts2包中 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>3、在classpath的根目录下配置一个strut.xml</p>\n<h2 id=\"struts-xml的配置\"><a href=\"#struts-xml的配置\" class=\"headerlink\" title=\"struts.xml的配置\"></a>struts.xml的配置</h2><p>一个基本的struts.xml内容如下：<br>（其所需DTD在struts包下）<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class=\"line\"><span class=\"meta\">\t\"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">\t\"http://struts.apache.org/dtds/struts-2.3.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 开发模式（更改struts.xml不用重启） --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.devMode\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constant</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 被拦截action的后缀名（空串或者\",\"都代表无后缀，内部为切割逗号） --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.action.extension\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\",\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constant</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 命名空间以“/”开头 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pck01\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/hello\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"frist\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.struts.web.FristAction\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">method</span>=<span class=\"string\">\"helloStruts\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"true\"</span>&gt;</span>/success.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 包继成不能继承namespace！！继承后namespace为默认的\"\" --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pck02\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"pck01\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"second\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.struts.web.SecondAction\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">method</span>=<span class=\"string\">\"hiYa\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"true\"</span>&gt;</span>/success02.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"struts-xml中实用常量\"><a href=\"#struts-xml中实用常量\" class=\"headerlink\" title=\"struts.xml中实用常量\"></a>struts.xml中实用常量</h2><table>\n<thead>\n<tr>\n<th>常量名</th>\n<th>常量值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>struts.i18n.encoding</td>\n<td>UTF-8</td>\n<td>应用中使用的编码</td>\n</tr>\n<tr>\n<td>struts.objectFactory.spring.autoWire</td>\n<td>name</td>\n<td>和spring框架整合有关</td>\n</tr>\n<tr>\n<td>struts.multipart.parser</td>\n<td>jakarta</td>\n<td>指定文件上传用的组件</td>\n</tr>\n<tr>\n<td>struts.multipart.maxSize</td>\n<td>2097152</td>\n<td>文件上传总文件大小限制：2M</td>\n</tr>\n<tr>\n<td>struts.action.extension</td>\n<td>action,,</td>\n<td>能进入Struts2框架内部的url地址后缀名。多个值用逗号分隔</td>\n</tr>\n<tr>\n<td>struts.enable.DynamicMethodInvocation</td>\n<td>false</td>\n<td>是否允许动态方法调用</td>\n</tr>\n<tr>\n<td>struts.devMode    false</td>\n<td>是否是开发模式。</td>\n<td>开发模式：改了配置文件，不需要重启。输出更多的错误信息。开发阶段建议为true。</td>\n</tr>\n<tr>\n<td>struts.ui.theme</td>\n<td>xhtml</td>\n<td>页面展示用的主题</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"struts动态方法调用\"><a href=\"#struts动态方法调用\" class=\"headerlink\" title=\"struts动态方法调用\"></a>struts动态方法调用</h2><p>action标签中name属性可以使用”*“作为通配符，所以当出现这种情况时，通配符对应的内容可以被{1、2、3、4….}所代替。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"*_*\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.xxx.xxx.ActionSupport\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"&#123;2&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span>&gt;</span>&#123;2&#125;page.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"action-中-参数注入\"><a href=\"#action-中-参数注入\" class=\"headerlink\" title=\"action 中 参数注入\"></a>action 中 参数注入</h2><p>1、静态注入（注入指定值）<br>在struts.xml中的action下用<param name=\"key\">value注入对应的参数值，同时在ActionSupport中书写 set/get方法。</p>\n<p>在result 结果视图为redirectAction的情况下，可以通过ognl的方式将参数传给重定向的Action。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"reply\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"reply\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.demo.web.action.ShowTopicAction\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirectAction\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"actionName\"</span>&gt;</span>showTopic<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 传递静态参数给重定向的Action--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"topicId\"</span>&gt;</span>$&#123;topicId&#125;<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>2、动态参数注入 一<br>struts.xml无需改动，只写set/get方法即可注入</p>\n<p>如果需要注入一个bean，需为这个bean写set/get，同时请求参数为beanName.paramName的格式，struts会先调用get判断是否存在这个bean，不存在就set，然后再get这个bean去填充参数。</p>\n<p>3、动态参数注入 二<br>实现ModelDriven接口，用此接口的getModel返回指定bean，以此进行填充</p>\n<p>ModelDriven的注入会阻碍其他方法的注入。</p>\n<h2 id=\"Validation的使用\"><a href=\"#Validation的使用\" class=\"headerlink\" title=\"Validation的使用\"></a>Validation的使用</h2><p>作用：<br>在参数注入阶段，对参数进行校验。出现错误时，将提示信息返回到input结果视图。</p>\n<p>原理：</p>\n<p>ValidationAware接口、ValidationAwareSupport支持类、DefaultWorkflowInterceptor拦截器，会拦截action并判断参数的验证是否出现了问题</p>\n<p>ActionSupport实现了ValidationAware 接口，并在 addFieldError(String fieldName, String errorMessage);addActionError(String anErrorMessage);等方法中将错误信息添加到了ValidationAwareSupport中。</p>\n<p>ValidationAwareSupport支持类内部以Map存储了错误信息</p>\n<p>DefaultWorkflowInterceptor拦截器会判断是否存在错误信息，并在拦截器阶段返回 “input” 字段，标识验证失败。</p>\n<p>使用方法：</p>\n<ol>\n<li><p>ActionSupport中都实现了validater接口，validate方法中进行参数校验，出现错误时将错误信息使用addFieldError存放起来。</p>\n<p>2.当一个action中有多个method被调用，且各自需要一种验证方式时，为每个method创建创建一个validate+Method()方法进行校验。</p>\n<p>3.通过xml配置文件配置校验不同的校验。<br>xml名称为：ActionClassName-ActionName-validation.xml （注意时对应action的name不是action类中的method）</p>\n<p>一般写法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE validators PUBLIC</span></span><br><span class=\"line\"><span class=\"meta\">        \"-//Apache Struts//XWork Validator Definition 1.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">validators</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 以指定参数字段为校验单位，可以为这个字段配置多个校验器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">field</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">field-validator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"requiredstring\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">message</span>&gt;</span>密码不能为空<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">field-validator</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">field-validator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"stringlength\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxLength\"</span>&gt;</span>18<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minLength\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">message</span>&gt;</span>密码长度为$&#123;minLength&#125;~$&#123;maxLength&#125;位<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">field-validator</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">field</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 以一个验证器为单位进行配置，只能对这个验证器进行一次注入 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"expression\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"expression\"</span>&gt;</span>&lt;![CDATA[password == repassword]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">message</span>&gt;</span>两次密码不一致<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">validator</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validators</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>默认的校验器 存放路径在 /com/opensymphony/xwork2/validator/validators/default.xml，默认的校验器可以直接使用其name<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">validators</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"required\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.RequiredFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"requiredstring\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.RequiredStringValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"int\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.IntRangeFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"long\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.LongRangeFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"short\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.ShortRangeFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"double\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.DoubleRangeFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"date\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.DateRangeFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"expression\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.ExpressionValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fieldexpression\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.FieldExpressionValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.EmailValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.URLValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"visitor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.VisitorFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"conversion\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.ConversionErrorFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"stringlength\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.StringLengthFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"regex\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.RegexFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"conditionalvisitor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.opensymphony.xwork2.validator.validators.ConditionalVisitorFieldValidator\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validators</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>对于不想使用拦截器的method可以添加注解@SkipValidation</p>\n<h2 id=\"类型转换器\"><a href=\"#类型转换器\" class=\"headerlink\" title=\"类型转换器\"></a>类型转换器</h2><p>TypeConvertor</p>\n<h2 id=\"国际化-i18n\"><a href=\"#国际化-i18n\" class=\"headerlink\" title=\"国际化 i18n\"></a>国际化 i18n</h2><h3 id=\"java中使用国际化\"><a href=\"#java中使用国际化\" class=\"headerlink\" title=\"java中使用国际化\"></a>java中使用国际化</h3><p>1、java中使用国际化<br>采用message_zh_cn.properties命名资源文件。<br>并使用ResourceBundle.getBundle（“com.lsh.struts.message“,request.getLoacl()）读取对应的资源文件</p>\n<p>2、struts中的国际化方法 </p>\n<p>搜索顺序为就近原则：</p>\n<p>为全局应用配置一个String资源包，在struts.xml中指定默认的全局String资源包 <constant name=\"struts.custom.i18n.resources=testmessages,testmessages2\" value=\"com.lsh.struts.resource.xxxxx\"></constant></p>\n<p>为指定包下配置一个String资源包 package_zh_cn.properties</p>\n<p>为指定action.class配置一个String资源包 ActionClassName_zh_cn.properties</p>\n<p>使用ActionSupport中TextProvider提供getText等方法可根据key值来获取string。</p>\n<h3 id=\"jsp中使用国际化\"><a href=\"#jsp中使用国际化\" class=\"headerlink\" title=\"jsp中使用国际化\"></a>jsp中使用国际化</h3><p>在jsp页面使用jstl进行国际化。<br>通过action访问jsp时，国际化会查找action的目录下的string资源文件，不适用action访问时使用全局的资源文件。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--资源搜索的顺序为--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">s:i18n</span> <span class=\"attr\">name</span>=<span class=\"string\">\"指定string资源路径\"</span>&gt;</span> <span class=\"comment\">&lt;!--不用写后面的zh_cn--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">s:text</span> <span class=\"attr\">name</span>=<span class=\"string\">\"指定string的key\"</span>/&gt;</span><span class=\"comment\">&lt;!--单独使用也可以--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">s:i18n</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/2017-2-4-Struts2入门/jsp下i18n的搜索顺序.png\" alt=\"jsp下i18n的搜索顺序\" title=\"jsp下i18n的搜索顺序.png\"></p>\n<h3 id=\"单个bean的国际化\"><a href=\"#单个bean的国际化\" class=\"headerlink\" title=\"单个bean的国际化\"></a>单个bean的国际化</h3><h2 id=\"自定义拦截器\"><a href=\"#自定义拦截器\" class=\"headerlink\" title=\"自定义拦截器\"></a>自定义拦截器</h2><p>MethodFilterInterceptor和Interceptor</p>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><p>文件上传通过fileUpload拦截器进行工作</p>\n<p>action模版代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> File[] program; <span class=\"comment\">// 自动注入 数组的方式是为了支持多文件上传</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String[] programFileName; <span class=\"comment\">// 固定格式parameter + FileName 获取文件名</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String[] programContentType;  <span class=\"comment\">// 固定个你parameter + ContentType 获取文件MIME类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">upExe</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 通过ServletContext获取一个资源的真实路径</span></span><br><span class=\"line\">\tServletContext servletContext = ServletActionContext</span><br><span class=\"line\">\t\t\t.getServletContext();</span><br><span class=\"line\">\tString realPath = servletContext.getRealPath(<span class=\"string\">\"/WEB-INF/upfiles\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tFile file = <span class=\"keyword\">new</span> File(realPath);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (file.exists()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!file.isDirectory()) &#123;</span><br><span class=\"line\">\t\t\tfile.delete();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfile.mkdirs();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 移动至</span></span><br><span class=\"line\">\tprogram[<span class=\"number\">0</span>].renameTo(<span class=\"keyword\">new</span> File(file, programFileName[<span class=\"number\">0</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--输出动作上的错误信息，非field错误信息--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">s:actionerror</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--固定格式 entype=”multipart/form-data“ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">s:form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"fileup/upExe\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">s:file</span> <span class=\"attr\">name</span>=<span class=\"string\">\"program\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"上传一个文件\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">s:submit</span> <span class=\"attr\">value</span>=<span class=\"string\">\"上传\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">s:form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>更改上传的大小限制：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.multipart.maxSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"byte为单位\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>限制文件上传的种类：<br>FileUploadInterceptor中有参数限制，<br>1、限制后缀名    allowedTypes<br>2、限制文件类型 allowedExtensions</p>\n<p>使用拦截器注入参数的方式<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultStack\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileupload.maximumSize\"</span>&gt;</span>上传大小byte单位<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileupload.allowedTypes\"</span>&gt;</span>image/pjpg,image/png<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileupload.allowedExtensions\"</span>&gt;</span>.jpg.png.gif<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h2><p>使用StreamResult流结果视图</p>\n<p>固定格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> InputStream inputStream; <span class=\"comment\">// 指定读取流 给其添加set/get</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String filename;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">download</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tString realPath = ServletActionContext.getServletContext().getRealPath(</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"/WEB-INF/downfiles/文件名\"</span>);</span><br><span class=\"line\">\tfilename = <span class=\"string\">\"文件名\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tinputStream = <span class=\"keyword\">new</span> FileInputStream(<span class=\"keyword\">new</span> File(realPath));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"downFile\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.lsh.struts.action.DownloadAction\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"download\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"stream\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 设置响应头：通知浏览器正文的类型，让其以下载的方式打开--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"contentType\"</span>&gt;</span>application/octet-stream<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 通知浏览器，以下载的方式打开并通知其下载名称 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"contentDisposition\"</span>&gt;</span>attachment;filename=$&#123;filename&#125;<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 将action.class中的读取流设置给结果视图--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"inputName\"</span>&gt;</span>inputStream<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"OGNL表达式\"><a href=\"#OGNL表达式\" class=\"headerlink\" title=\"OGNL表达式\"></a>OGNL表达式</h2><p>1、Ognl 的Roots节点<br>OgnlContext是一个支持使用ognl表达式进行对象查找的Map集合，他需要一个root节点。</p>\n<p>在Xwork中root节点被CompoundRoot替换成了一个roots节点，并且封装了一个OgnlValueStack类用以处理CompoundRoot节点和调用ognl的解析功能。</p>\n<p>CompoundRoot是一个CopyAndWriteArrayList改造而成的 栈 结构。</p>\n<p>因此roots具备了栈的特性。</p>\n<p>2、向OgnlContext的roots节点中添加数据<br>OgnlValueStack.push(obj);</p>\n<p>3、使用ognl表达式为OgnlContext中的对象属性赋值，和取值。<br>OgnlValueStack.setValue(exper,obj);<br>OgnlValueStack.setParameter(exper,obj);<br>OgnlValueStack.findValue(exper,obj);<br>OgnlValueStack.findString(exper);</p>\n<p>4、其中exper 取roots内容时不用带 “#” 。</p>\n<p>以索引的形式取roots中的值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0].name</span><br><span class=\"line\">[1].name</span><br></pre></td></tr></table></figure></p>\n<p>“[ ]”的意思并非真正的索引，其实现方法为下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> CompoundRoot <span class=\"title\">cutStack</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 剪切index之后的所有元素</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CompoundRoot(subList(index, size()));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>即其返回index以后的列表，并在这个列表中查找所指定的属性。</p>\n<p>index从0开始计算。</p>\n<p>则<a href=\"/img/2017-2-4-Struts2入门/jsp下i18n的搜索顺序.png\" title=\"jsp下i18n的搜索顺序.png\">1</a>.name代表查找第二个元素之后的所有元素，而不是单指第二个。</p>\n<p>5、特殊方法：</p>\n<ul>\n<li>OgnlValueStack.set(str,obj)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String key, Object o)</span> </span>&#123;</span><br><span class=\"line\">       Map setMap = retrieveSetMap();</span><br><span class=\"line\">       setMap.put(key, o);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"comment\">// 恢复map</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> Map <span class=\"title\">retrieveSetMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       Map setMap;</span><br><span class=\"line\">       Object topObj = peek();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (shouldUseOldMap(topObj)) &#123;</span><br><span class=\"line\">           setMap = (Map) topObj;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           setMap = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">           setMap.put(MAP_IDENTIFIER_KEY, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">           push(setMap);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> setMap;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"comment\">// 检测该对象是否为包含 MAP_IDENTIFIER_KEY 的map</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldUseOldMap</span><span class=\"params\">(Object topObj)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> topObj <span class=\"keyword\">instanceof</span> Map &amp;&amp; ((Map) topObj).get(MAP_IDENTIFIER_KEY) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>该方法，先检测root栈顶是否为map，不是则重新创建，是则直接返回，将这个map压入栈顶，并将str=obj put到map中去。</p>\n<p>特殊点： 该方法只会检测CompoundRoot的顶部是否有对应的map，一但顶部的原有的map被下压，仍然重新创建一个map。</p>\n<p>6、jsp中强制使用ognl表达式</p>\n<p>在一些struts-tags的属性中使用 “ %{ognl expression} “</p>\n<p>7、ognl表达式中可以使用四则运算</p>\n<p><img src=\"/img/2017-2-4-Struts2入门/struts数据结构详解.png\" alt=\"Struts2 的contextMap数据结构\" title=\"struts数据结构详解.png\"></p>\n<p><img src=\"/img/2017-2-4-Struts2入门/Struts2结构图.png\" alt=\"Struts2结构图\" title=\"Struts2结构图.png\"></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjbx3x34c0000izij9ss4sdon","category_id":"cjbx3x34o0003izij7vtd05cw","_id":"cjbx3x355000dizijntgu6s8h"},{"post_id":"cjbx3x351000bizij3u22dp43","category_id":"cjbx3x3500008izijrxpa99li","_id":"cjbx3x35a000iizijffzkkxi9"},{"post_id":"cjbx3x34m0002izij2zwajd72","category_id":"cjbx3x3500008izijrxpa99li","_id":"cjbx3x35e000mizijxorjcpcq"},{"post_id":"cjbx3x353000cizijgmtzfltm","category_id":"cjbx3x3500008izijrxpa99li","_id":"cjbx3x35g000oizijamefx6sb"},{"post_id":"cjbx3x34r0005izijb7qyq8y1","category_id":"cjbx3x3500008izijrxpa99li","_id":"cjbx3x35k000sizija24x5xeo"},{"post_id":"cjbx3x34x0006izij0wgsyohu","category_id":"cjbx3x3500008izijrxpa99li","_id":"cjbx3x35m000vizijwr9srgx2"},{"post_id":"cjbx3x35f000nizijha2p8acy","category_id":"cjbx3x3500008izijrxpa99li","_id":"cjbx3x35o0010izijqptvezz6"},{"post_id":"cjbx3x35h000rizijtnoobgto","category_id":"cjbx3x35h000pizij808rj877","_id":"cjbx3x35p0012izijlbnqjrjg"},{"post_id":"cjbx3x34z0007izij42h6o6tz","category_id":"cjbx3x35h000pizij808rj877","_id":"cjbx3x35q0016izijt0293ymy"},{"post_id":"cjbx3x35l000uizijnarn5ow1","category_id":"cjbx3x35h000pizij808rj877","_id":"cjbx3x35q0018izijrnfn1ho6"},{"post_id":"cjbx3x357000gizijbpmyto58","category_id":"cjbx3x35h000pizij808rj877","_id":"cjbx3x35r001aizijun41xprr"},{"post_id":"cjbx3x359000hizijwohfq5v2","category_id":"cjbx3x35h000pizij808rj877","_id":"cjbx3x35t001eizijidufyumb"},{"post_id":"cjbx3x35d000lizijq9ceiu9e","category_id":"cjbx3x35h000pizij808rj877","_id":"cjbx3x35u001gizijh6iosat4"},{"post_id":"cjbx3x35n000zizijguhkbj3x","category_id":"cjbx3x35t001dizij9o35boi0","_id":"cjbx3x35v001jizijrbhyskoz"}],"PostTag":[{"post_id":"cjbx3x34c0000izij9ss4sdon","tag_id":"cjbx3x34r0004izijca5omg20","_id":"cjbx3x350000aizijp1yt6z82"},{"post_id":"cjbx3x34m0002izij2zwajd72","tag_id":"cjbx3x3500009izijbfya7sv0","_id":"cjbx3x35k000tizijz41e9hpb"},{"post_id":"cjbx3x34m0002izij2zwajd72","tag_id":"cjbx3x355000fizijhh17d5nb","_id":"cjbx3x35m000xizij783vqskp"},{"post_id":"cjbx3x34m0002izij2zwajd72","tag_id":"cjbx3x35c000kizijltdxg23g","_id":"cjbx3x35o0011izij4ey2sga3"},{"post_id":"cjbx3x34r0005izijb7qyq8y1","tag_id":"cjbx3x3500009izijbfya7sv0","_id":"cjbx3x35p0014izij7fii7ges"},{"post_id":"cjbx3x34x0006izij0wgsyohu","tag_id":"cjbx3x35m000yizijgv6ol30e","_id":"cjbx3x35q0017izijq4zevcm2"},{"post_id":"cjbx3x34z0007izij42h6o6tz","tag_id":"cjbx3x35p0015izijku2blddc","_id":"cjbx3x35s001cizijougqoytf"},{"post_id":"cjbx3x351000bizij3u22dp43","tag_id":"cjbx3x35r001bizij6fuk6mpy","_id":"cjbx3x35v001iizijafjos7g3"},{"post_id":"cjbx3x351000bizij3u22dp43","tag_id":"cjbx3x35u001fizij0os0vbyt","_id":"cjbx3x35v001kizij6kl8vuxq"},{"post_id":"cjbx3x353000cizijgmtzfltm","tag_id":"cjbx3x35m000yizijgv6ol30e","_id":"cjbx3x35v001mizijr6i9zdum"},{"post_id":"cjbx3x357000gizijbpmyto58","tag_id":"cjbx3x35v001lizijkamlal9v","_id":"cjbx3x35w001oizijzhg5yrs5"},{"post_id":"cjbx3x359000hizijwohfq5v2","tag_id":"cjbx3x35v001nizijpe4oin6d","_id":"cjbx3x35x001qizij2isih5t5"},{"post_id":"cjbx3x35d000lizijq9ceiu9e","tag_id":"cjbx3x35w001pizijri1lixy6","_id":"cjbx3x35y001sizijbm3epu92"},{"post_id":"cjbx3x35f000nizijha2p8acy","tag_id":"cjbx3x35x001rizijjsbkmhol","_id":"cjbx3x35y001uizijp4fdh4qc"},{"post_id":"cjbx3x35h000rizijtnoobgto","tag_id":"cjbx3x35y001tizijqfwbc2bb","_id":"cjbx3x35z001wizijhxunhke2"},{"post_id":"cjbx3x35l000uizijnarn5ow1","tag_id":"cjbx3x35y001vizij6k65buhy","_id":"cjbx3x35z001yizijbmm82hkr"},{"post_id":"cjbx3x35n000zizijguhkbj3x","tag_id":"cjbx3x35z001xizijhthtleze","_id":"cjbx3x35z001zizijc08gbeed"}],"Tag":[{"name":"python","_id":"cjbx3x34r0004izijca5omg20"},{"name":"Android","_id":"cjbx3x3500009izijbfya7sv0"},{"name":"WebView","_id":"cjbx3x355000fizijhh17d5nb"},{"name":"Js","_id":"cjbx3x35c000kizijltdxg23g"},{"name":"自定义View","_id":"cjbx3x35m000yizijgv6ol30e"},{"name":"Jsp","_id":"cjbx3x35p0015izijku2blddc"},{"name":"android","_id":"cjbx3x35r001bizij6fuk6mpy"},{"name":"Material Design","_id":"cjbx3x35u001fizij0os0vbyt"},{"name":"mvc","_id":"cjbx3x35v001lizijkamlal9v"},{"name":"SQL","_id":"cjbx3x35v001nizijpe4oin6d"},{"name":"JavaEE","_id":"cjbx3x35w001pizijri1lixy6"},{"name":"Android，自定义View","_id":"cjbx3x35x001rizijjsbkmhol"},{"name":"Hibernate","_id":"cjbx3x35y001tizijqfwbc2bb"},{"name":"Spring","_id":"cjbx3x35y001vizij6k65buhy"},{"name":"Struts2","_id":"cjbx3x35z001xizijhthtleze"}]}}