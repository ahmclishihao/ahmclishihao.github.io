<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[2016-12-30-自定义View高级知识点（一）]]></title>
      <url>http://www.lshao.me/2016/12/30/2016-12-30-%E8%87%AA%E5%AE%9A%E4%B9%89View%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86%E7%82%B9(%E4%B8%80).html</url>
      <content type="html"><![CDATA[<p>自定义View中比较重要的一些知识点，本篇主要学习Canvas的一些基本使用。</p>
<a id="more"></a>
<h2 id="Canvas可以画的东西"><a href="#Canvas可以画的东西" class="headerlink" title="Canvas可以画的东西"></a>Canvas可以画的东西</h2><table>
<thead>
<tr>
<th>操作类型</th>
<th>相关API</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>绘制颜色</td>
<td>drawColor, drawRGB, drawARGB</td>
<td>使用单一颜色填充整个画布</td>
</tr>
<tr>
<td>绘制基本形状</td>
<td>drawPoint, drawPoints, drawLine, drawLines, drawRect, drawRoundRect, drawOval, drawCircle, drawArc</td>
<td>依次为 点、线、矩形、圆角矩形、椭圆、圆、圆弧</td>
</tr>
<tr>
<td>绘制图片</td>
<td>drawBitmap, drawPicture</td>
<td>绘制位图和图片</td>
</tr>
<tr>
<td>绘制文本</td>
<td>drawText,    drawPosText, drawTextOnPath</td>
<td>依次为 绘制文字、绘制文字时指定每个文字位置、根据路径绘制文字</td>
</tr>
<tr>
<td>绘制路径</td>
<td>drawPath</td>
<td>绘制路径，绘制贝塞尔曲线时也需要用到该函数</td>
</tr>
<tr>
<td>顶点操作</td>
<td>drawVertices, drawBitmapMesh</td>
<td>通过对顶点操作可以使图像形变，drawVertices直接对画布作用、 drawBitmapMesh只对绘制的Bitmap作用</td>
</tr>
<tr>
<td>画布剪裁</td>
<td>clipPath,    clipRect</td>
<td>设置画布的显示区域</td>
</tr>
<tr>
<td>画布快照</td>
<td>save, restore, saveLayerXxx, restoreToCount, getSaveCount</td>
<td>依次为 保存当前状态、 回滚到上一次保存的状态、 保存图层状态、 回滚到指定状态、 获取保存次数</td>
</tr>
<tr>
<td>画布变换</td>
<td>translate, scale, rotate, skew</td>
<td>依次为 位移、缩放、 旋转、错切</td>
</tr>
<tr>
<td>Matrix(矩阵)</td>
<td>getMatrix, setMatrix, concat</td>
<td>实际画布的位移，缩放等操作的都是图像矩阵Matrix，只不过Matrix比较难以理解和使用，故封装了一些常用的方法。</td>
</tr>
</tbody>
</table>
<h2 id="颜色混合模式-Alpha通道相关"><a href="#颜色混合模式-Alpha通道相关" class="headerlink" title="颜色混合模式(Alpha通道相关)"></a>颜色混合模式(Alpha通道相关)</h2><p>通过前面介绍我们知道颜色一般都是四个通道(ARGB)的，其中(RGB)控制的是颜色,而A(Alpha)控制的是透明度。</p>
<p>因为我们的显示屏是没法透明的，因此最终显示在屏幕上的颜色里可以认为没有Alpha通道。Alpha通道主要在两个图像混合的时候生效。</p>
<p>默认情况下，当一个颜色绘制到Canvas上时的混合模式是这样计算的：</p>
<p>(RGB通道) 最终颜色 = 绘制的颜色 + (1 - 绘制颜色的透明度) × Canvas上的原有颜色。</p>
<p>注意：</p>
<p>1.这里我们一般把每个通道的取值从0(ox00)到255(0xff)映射到0到1的浮点数表示。</p>
<p>2.这里等式右边的“绘制的颜色”、“Canvas上的原有颜色” 都是经过预乘了自己的Alpha通道的值。如绘制颜色：0x88ffffff，那么参与运算时的每个颜色通道的值不是1.0，而是(1.0 * 0.5333 = 0.5333)。 (其中0.5333 = 0x88/0xff)</p>
<p>使用这种方式的混合，就会造成后绘制的内容以半透明的方式叠在上面的视觉效果。</p>
<h2 id="Paint-setXfermode模式"><a href="#Paint-setXfermode模式" class="headerlink" title="Paint.setXfermode模式"></a>Paint.setXfermode模式</h2><p>下表是各个PorterDuff模式的混合计算公式：（D指原本在Canvas上的内容dst，S指绘制输入的内容src，a指alpha通道，c指RGB各个通道）,各种模式如下图所示。</p>
<p><img src="/img/2016-12-30-自定义View高级知识点(一)/PorterDuffMode.jpg" alt="porterDuff的模式" title="PorterDuffMode.jpg"></p>
<h2 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure"></a>onMeasure</h2><p>真正进行测量的是 setMeasuredDimension<br>如果对View的宽高进行修改了，不要调用 super.onMeasure( widthMeasureSpec, heightMeasureSpec); 要调用 setMeasuredDimension( widthsize, heightsize); 这个函数。</p>
<h2 id="paint绘制图形"><a href="#paint绘制图形" class="headerlink" title="paint绘制图形"></a>paint绘制图形</h2><blockquote>
<p>一个要点：绘制的基本形状由Canvas确定，但绘制出来的颜色,具体效果则由Paint确定<br>STROKE                //描边<br>FILL                  //填充<br>FILL_AND_STROKE       //描边加填充</p>
</blockquote>
<p>1.圆角矩形</p>
<p>利用圆角矩形也可以绘制出椭圆</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">RectF rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>);</div><div class="line">mPaint.setColor(Color.BLACK);</div><div class="line">canvas.drawRect(rectF, mPaint);</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">canvas.drawRoundRect(rectF, <span class="number">100</span>, <span class="number">50</span>, mPaint);</div></pre></td></tr></table></figure>
<p>2.椭圆</p>
<p>椭圆绘制可以理解为做一个矩形的内切圆，如果这是一个正方形那么绘制出来的就是一个圆形</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RectF rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">300</span>);</div><div class="line">mPaint.setColor(Color.BLACK);</div><div class="line">canvas.drawOval(rectF, mPaint);</div></pre></td></tr></table></figure>
<p>3.扇形</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drawArc(RectF oval, <span class="function"><span class="keyword">float</span> <span class="title">startAngle</span><span class="params">(开始角度<span class="number">0</span><span class="number">-360</span>)</span>, <span class="keyword">float</span> <span class="title">sweepAngle</span><span class="params">(扫过角度<span class="number">0</span><span class="number">-360</span>)</span>, <span class="keyword">boolean</span> <span class="title">useCenter</span><span class="params">(是否连接圆心)</span>,Paint paint)</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用中心</span></div><div class="line">RectF rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line">mPaint.setStyle(Paint.Style.FILL_AND_STROKE); </div><div class="line">mPaint.setColor(Color.GRAY);</div><div class="line">canvas.drawRect(rectF, mPaint);</div><div class="line">mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">mPaint.setColor(Color.BLACK);</div><div class="line">canvas.drawArc(rectF, <span class="number">0</span>, <span class="number">90</span>, <span class="keyword">true</span>, mPaint);</div><div class="line"></div><div class="line"><span class="comment">// 不使用中心</span></div><div class="line">rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">300</span>, <span class="number">200</span>, <span class="number">400</span>);</div><div class="line">mPaint.setStyle(Paint.Style.FILL_AND_STROKE); <span class="comment">// 填充 并描边</span></div><div class="line">mPaint.setColor(Color.GRAY);</div><div class="line">canvas.drawRect(rectF, mPaint);</div><div class="line">mPaint.setStyle(Paint.Style.STROKE); <span class="comment">// 仅描边</span></div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">canvas.drawArc(rectF, <span class="number">0</span>, -<span class="number">90</span>, <span class="keyword">false</span>, mPaint);</div></pre></td></tr></table></figure>
<p><img src="/img/2016-12-30-自定义View高级知识点(一)/drawArc.png" alt="扇形" title="drawArc.png"></p>
<p>4.画一个圆饼图</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PieChartView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Paint mPaint;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Percent&gt; mPercentList;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PieChartView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PieChartView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PieChartView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        mPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);</div><div class="line">        mPaint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line">        mPaint.setStrokeWidth(<span class="number">2</span>);</div><div class="line"></div><div class="line">        mPercentList = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        mPercentList.add(<span class="keyword">new</span> Percent(<span class="string">"1"</span>, <span class="number">0.4f</span>, Color.WHITE));</div><div class="line">        mPercentList.add(<span class="keyword">new</span> Percent(<span class="string">"2"</span>, <span class="number">0.4f</span>, Color.BLUE));</div><div class="line">        mPercentList.add(<span class="keyword">new</span> Percent(<span class="string">"3"</span>, <span class="number">0.2f</span>, Color.RED));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        RectF rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">400</span>);</div><div class="line">        canvas.drawOval(rectF, mPaint);</div><div class="line"></div><div class="line">        <span class="keyword">float</span> surplus = <span class="number">1.0f</span>; <span class="comment">// 剩余的范围</span></div><div class="line">        <span class="keyword">float</span> startAngle = <span class="number">0</span>;</div><div class="line">        Percent percent;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = mPercentList.size(); i &lt; size; i++) &#123;</div><div class="line">            percent = mPercentList.get(i);</div><div class="line">            <span class="keyword">if</span> (percent.percent &lt;= surplus) &#123;</div><div class="line">                surplus -= percent.percent;</div><div class="line">                startAngle += percent.drawArc(mPaint, canvas, startAngle, rectF);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 采用封装的思想</div><div class="line">	*/</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Percent</span> </span>&#123;</div><div class="line">        String tag;</div><div class="line">        <span class="keyword">float</span> percent;</div><div class="line">        <span class="keyword">int</span> color;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Percent</span><span class="params">(String tag, <span class="keyword">float</span> percent, <span class="keyword">int</span> color)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.tag = tag;</div><div class="line">            <span class="keyword">this</span>.percent = percent;</div><div class="line">            <span class="keyword">this</span>.color = color;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 绘制 这个百分比</div><div class="line">         *</div><div class="line">         * <span class="doctag">@param</span> paint</div><div class="line">         * <span class="doctag">@param</span> canvas</div><div class="line">         * <span class="doctag">@param</span> startAngle</div><div class="line">         * <span class="doctag">@param</span> rectF</div><div class="line">         * <span class="doctag">@return</span> 返回绘制的角度大小</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">drawArc</span><span class="params">(Paint paint, Canvas canvas, <span class="keyword">float</span> startAngle, RectF rectF)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> oldColor = paint.getColor();</div><div class="line">            Paint.Style oldStyle = paint.getStyle();</div><div class="line"></div><div class="line">            paint.setColor(color);</div><div class="line">            paint.setStyle(Paint.Style.FILL);</div><div class="line"></div><div class="line">            canvas.drawArc(rectF, startAngle, <span class="number">360</span> * percent, <span class="keyword">true</span>, paint);</div><div class="line"></div><div class="line">            paint.setColor(oldColor);</div><div class="line">            paint.setStyle(oldStyle);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="number">360</span> * percent;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/img/2016-12-30-自定义View高级知识点(一)/pieChart.png" alt="圆饼图" title="pieChart.png"></p>
<h2 id="操作画布"><a href="#操作画布" class="headerlink" title="操作画布"></a>操作画布</h2><p>操作画布，操作的都是坐标系，是对当前坐标系进行移动、旋转、缩放、错切等操作</p>
<p>操作画布只会影响接下来的绘画，而不会影响之前已经绘画完成的图像</p>
<p>1.移动画布</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 移动画布</span></div><div class="line">canvas.translate(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</div><div class="line">canvas.drawCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, mPaint);</div><div class="line">canvas.drawCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">180</span>, mPaint);</div><div class="line"></div><div class="line"><span class="comment">// 旋转画布 并画线</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36</span>; i++) &#123;</div><div class="line">	canvas.drawLine(<span class="number">0</span>, <span class="number">180</span>, <span class="number">0</span>, <span class="number">200</span>, mPaint);</div><div class="line">	canvas.rotate(<span class="number">10</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/img/2016-12-30-自定义View高级知识点(一)/circleView.png" alt="通过旋转画布实现两圆之间的连线" title="circleView.png"></p>
<p>2.旋转画布</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">float</span> degrees)</span> </span>&#123;</div><div class="line">    native_rotate(mNativeCanvasWrapper, degrees);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 相对某点缩放</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">float</span> degrees, <span class="keyword">float</span> px, <span class="keyword">float</span> py)</span> </span>&#123;</div><div class="line">    translate(px, py);</div><div class="line">    rotate(degrees);</div><div class="line">    translate(-px, -py);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看下图为相对某点进行缩放，图中的绘制顺序 1.红 2.黄 3.蓝 4.绿</p>
<p><img src="/img/2016-12-30-自定义View高级知识点(一)/scale.png" alt="相对某点缩放" title="scale.png"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">RectF rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">canvas.drawRect(rectF, mPaint);</div><div class="line"></div><div class="line">canvas.translate(<span class="number">200</span>,<span class="number">200</span>); <span class="comment">// 先将坐标系O移动到相对点P</span></div><div class="line">mPaint.setColor(Color.YELLOW);</div><div class="line">canvas.drawRect(rectF, mPaint);</div><div class="line"></div><div class="line">canvas.rotate(<span class="number">90</span>);<span class="comment">// 在相对点P处将坐标系O进行旋转 O--&gt;o P--&gt;p</span></div><div class="line">mPaint.setColor(Color.BLUE);</div><div class="line">canvas.drawRect(rectF, mPaint);</div><div class="line"></div><div class="line">canvas.translate(-<span class="number">200</span>,-<span class="number">200</span>);<span class="comment">// 将旋转后的坐标系o中的p与P对齐，让以后的操作都仍然相对于P点</span></div><div class="line">mPaint.setColor(Color.GREEN);</div><div class="line">canvas.drawRect(rectF, mPaint);</div></pre></td></tr></table></figure>
<p>3.缩放画布</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scale</span><span class="params">(<span class="keyword">float</span> sx, <span class="keyword">float</span> sy)</span> </span>&#123;</div><div class="line">    native_scale(mNativeCanvasWrapper, sx, sy);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 相对于某点进行缩放，其相对原理与相对某点旋转相同</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scale</span><span class="params">(<span class="keyword">float</span> sx, <span class="keyword">float</span> sy, <span class="keyword">float</span> px, <span class="keyword">float</span> py)</span> </span>&#123;</div><div class="line">    translate(px, py);</div><div class="line">    scale(sx, sy);</div><div class="line">    translate(-px, -py);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>缩放比例(sx,sy)取值范围详解：</p>
<table>
<thead>
<tr>
<th>取值范围(n)</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>[-∞, -1)</td>
<td>先根据缩放中心放大n倍，再根据中心轴进行翻转</td>
</tr>
<tr>
<td>-1</td>
<td>根据缩放中心轴进行翻转</td>
</tr>
<tr>
<td>(-1, 0)</td>
<td>先根据缩放中心缩小到n，再根据中心轴进行翻转</td>
</tr>
<tr>
<td>0</td>
<td>不会显示，若sx为0，则宽度为0，不会显示，sy同理</td>
</tr>
<tr>
<td>(0, 1)</td>
<td>根据缩放中心缩小到n</td>
</tr>
<tr>
<td>1</td>
<td>没有变化</td>
</tr>
<tr>
<td>(1, +∞)</td>
<td>根据缩放中心放大n倍</td>
</tr>
</tbody>
</table>
<p>负值时，坐标系方向取反，scale(1,-1)这个操作将使得坐标系变为数学中常用坐标系</p>
<p>旋转，缩放，位移三者应用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 移动画布</span></div><div class="line">canvas.translate(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</div><div class="line"></div><div class="line">mPaint.setColor(Color.BLUE);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</div><div class="line">	canvas.drawCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, mPaint);</div><div class="line">	canvas.drawCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">180</span>, mPaint);</div><div class="line">	canvas.rotate(j);</div><div class="line">	<span class="comment">// 旋转画布 并画线![enter description here][6]</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">float</span> i = j; i &lt;= <span class="number">360f</span>; i += <span class="number">10f</span>) &#123;</div><div class="line">		canvas.drawLine(<span class="number">0</span>, <span class="number">180</span>, <span class="number">0</span>, <span class="number">200</span>, mPaint);</div><div class="line">		canvas.rotate(<span class="number">10</span>);</div><div class="line">	&#125;</div><div class="line">	canvas.scale(<span class="number">0.75f</span>, <span class="number">0.75f</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="/img/2016-12-30-自定义View高级知识点(一)/scale_ratote_translate.png" alt="nothing" title="scale_ratote_translate.png"></p>
<p>4.错切（skew）</p>
<blockquote>
<p>错切是在某方向上，按照一定的比例对图形的每个点到某条平行于该方向的直线的有向距离做放缩得到的平面图形。(度娘)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">skew</span><span class="params">(<span class="keyword">float</span> sx, <span class="keyword">float</span> sy)</span> </span>&#123;</div><div class="line">    native_skew(mNativeCanvasWrapper, sx, sy);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">canvas.translate(getWidth()/<span class="number">2</span>,getHeight()/<span class="number">2</span>);</div><div class="line">RectF rectF = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">canvas.drawRect(rectF, mPaint);</div><div class="line"></div><div class="line">canvas.skew(-<span class="number">1</span>,<span class="number">0</span>); <span class="comment">// 向左倾斜45度</span></div><div class="line">canvas.drawRect(rectF, mPaint);</div></pre></td></tr></table></figure></p>
<p>效果图：</p>
<p><img src="/img/2016-12-30-自定义View高级知识点(一)/skew.png" alt="错切" title="skew.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MD控件的使用]]></title>
      <url>http://www.lshao.me/2016/12/24/2016-12-24-MD%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
      <content type="html"><![CDATA[<p>Material Desgin风格控件的使用。Google官方design support包里的新控件，虽然好看，但是用起来还真不是一次就能搞定的。</p>
<a id="more"></a>
<h3 id="layout-scrollFlags属性"><a href="#layout-scrollFlags属性" class="headerlink" title="layout_scrollFlags属性"></a>layout_scrollFlags属性</h3><p>AppBarLayout的子布局有5种滚动标识(就是上面代码CollapsingToolbarLayout中配置的app:layout_scrollFlags属性)：</p>
<p>1、scroll:将此布局和滚动时间关联。这个标识要设置在其他标识之前，没有这个标识则布局不会滚动且其他标识设置无效。</p>
<p>2、enterAlways:任何向下滚动操作都会使此布局可见。这个标识通常被称为“快速返回”模式。</p>
<p>3、enterAlwaysCollapsed：假设你定义了一个最小高度（minHeight）同时enterAlways也定义了，那么view将在到达这个最小高度的时候开始显示，并且从这个时候开始慢慢展开，当滚动到顶部的时候展开完。</p>
<p>4、exitUntilCollapsed：当你定义了一个minHeight，此布局将在滚动到达这个最小高度的时候折叠。</p>
<p>5、snap:当一个滚动事件结束，如果视图是部分可见的，那么它将被滚动到收缩或展开。例如，如果视图只有底部25%显示，它将折叠。相反，如果它的底部75%可见，那么它将完全展开。</p>
<h3 id="fitSystemWindow"><a href="#fitSystemWindow" class="headerlink" title="fitSystemWindow"></a>fitSystemWindow</h3><p>以CoordinatorLayout为根布局时且设置 fit = true 控件会自己适应并填充状态栏</p>
<p>而普通的控件 fit = true 则会与状态栏间隔，fit = false 则会跑到状态中去<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span> （5.0） 该属性 不会让布局内容填充到状态栏中 就算设置fitSystemWindow = false</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span> （4.4属性） 该属性会让布局内容填充到状态栏中 不想填充到状态栏的控件设置 fit = true ； 想填充到状态栏的设置 fit = false （4.4中填充到状态栏就看不到控件了）</div></pre></td></tr></table></figure></p>
<h3 id="ActionBar-颜色-对应的主题"><a href="#ActionBar-颜色-对应的主题" class="headerlink" title="ActionBar 颜色 对应的主题"></a>ActionBar 颜色 对应的主题</h3><p>黑字 黑图标： app:theme=”@style/Theme.AppCompat.Light”</p>
<p>白字 白图标： app:theme=”@style/Theme.AppCompat”</p>
<h3 id="PopuWindow-颜色-对应的主题"><a href="#PopuWindow-颜色-对应的主题" class="headerlink" title="PopuWindow 颜色 对应的主题"></a>PopuWindow 颜色 对应的主题</h3><p>黑底 白字：app:popupTheme=”@style/ThemeOverlay.AppCompat.Dark”</p>
<p>白底 黑字：app:popupTheme=”@style/ThemeOverlay.AppCompat.Light”</p>
<h3 id="CollapseToolBarLayout-的使用"><a href="#CollapseToolBarLayout-的使用" class="headerlink" title="CollapseToolBarLayout 的使用"></a>CollapseToolBarLayout 的使用</h3><p>CollapseToolBarLayout中 ：<br>1、toolbar 要写在最下面 否则会有一系列失效</p>
<p>2、同时配置的ImageView要 fit = true才会填充状态栏</p>
<p>3、toolBar不随折叠变换 设置 collapsing.setTitleEnabled(false); 或 app:titleEnabled=”false” </p>
<p>4、title 改变文字 文字可折叠时通过collapse设置 不可折叠时通过toolbar先app:title=”tool bar 先设置一次 才可以写字” 然后才可以设置文字</p>
<p>5、折叠后内容的颜色 app:contentScrim=”#FF4081” 状态栏的颜色 app:statusBarScrim=”@android:color/transparent”</p>
<p>如下是一个标准的配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"260dp"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span><span class="attr">------</span>》》》<span class="attr">fit</span>后填充状态栏</div><div class="line">        <span class="attr">app:theme</span>=<span class="string">"@style/Theme.AppCompat"</span></div><div class="line">        &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/collapsing"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">app:contentScrim</span>=<span class="string">"#FF4081"</span> <span class="attr">----------</span>》》》折叠后颜色</div><div class="line"><span class="attr">app:statusBarScrim</span>=<span class="string">"@android:color/transparent"</span></div><div class="line">            <span class="attr">app:titleEnabled</span>=<span class="string">"false"</span><span class="attr">------------</span>》》》<span class="attr">title</span>不伸缩</div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|snap|exitUntilCollapsed"</span> <span class="attr">----</span>》》》滑动类型</div><div class="line">            &gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span><span class="attr">------</span>》》》<span class="attr">fit</span>后图片填充状态栏</div><div class="line">                <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">                <span class="attr">android:src</span>=<span class="string">"@drawable/test_pic"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span><span class="attr">----</span>》》》缩放模式</div><div class="line">                <span class="attr">app:layout_collapseParallaxMultiplier</span>=<span class="string">"0.7"</span><span class="attr">---</span>》》》缩放比例</div><div class="line">/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar-------》》》toolbar要写在最下面</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">android:theme</span>=<span class="string">"@style/Theme.AppCompat"</span></div><div class="line">                <span class="attr">app:title</span>=<span class="string">"tool bar 先设置一次 才可以写字"</span> <span class="attr">----</span>》》》必须先设置一次</div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span><span class="attr">-----</span>》》》固定模式</div><div class="line">                <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></div><div class="line">                /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果图：<img src="/img/collapselayout.gif" width="320" height="480"></p>
<h3 id="CoordinatorLayout-是怎么做到适应状态栏的？"><a href="#CoordinatorLayout-是怎么做到适应状态栏的？" class="headerlink" title="CoordinatorLayout 是怎么做到适应状态栏的？"></a>CoordinatorLayout 是怎么做到适应状态栏的？</h3><p>构造函数中调用 setupForInsets</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CoordinatorLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">...</div><div class="line"></div><div class="line">      mStatusBarBackground = a.getDrawable(R.styleable.CoordinatorLayout_statusBarBackground);<span class="comment">//-----》》》获取背景drawable</span></div><div class="line">      </div><div class="line">...</div><div class="line"></div><div class="line">      setupForInsets();<span class="comment">//-------------》》》》调用</span></div><div class="line"></div><div class="line">      <span class="keyword">super</span>.setOnHierarchyChangeListener(<span class="keyword">new</span> HierarchyChangeListener());</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>根据是否fitsSystemWindows来设置不同的 ui标签<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupForInsets</span><span class="params">()</span> </span>&#123;</div><div class="line">		</div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">21</span>) &#123;<span class="comment">// ----》》》5.0一下不适用</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ViewCompat.getFitsSystemWindows(<span class="keyword">this</span>)) &#123;</div><div class="line">        <span class="keyword">if</span> (mApplyWindowInsetsListener == <span class="keyword">null</span>) &#123;</div><div class="line">            mApplyWindowInsetsListener =</div><div class="line">                    <span class="keyword">new</span> android.support.v4.view.OnApplyWindowInsetsListener() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> WindowInsetsCompat <span class="title">onApplyWindowInsets</span><span class="params">(View v,</span></span></div><div class="line">                                WindowInsetsCompat insets) &#123;</div><div class="line">                            <span class="keyword">return</span> setWindowInsets(insets);</div><div class="line">                        &#125;</div><div class="line">                    &#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// First apply the insets listener</span></div><div class="line">        ViewCompat.setOnApplyWindowInsetsListener(<span class="keyword">this</span>, mApplyWindowInsetsListener);</div><div class="line"></div><div class="line">        <span class="comment">// Now set the sys ui flags to enable us to lay out in the window insets</span></div><div class="line">        setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE</div><div class="line">                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);<span class="comment">//----》》》设置UI标签</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        ViewCompat.setOnApplyWindowInsetsListener(<span class="keyword">this</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="水波纹特效"><a href="#水波纹特效" class="headerlink" title="水波纹特效"></a>水波纹特效</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">	<span class="attr">android:color</span>=<span class="string">"@color/touch_effect"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/mask"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@android:color/white"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="水波纹揭示效果"><a href="#水波纹揭示效果" class="headerlink" title="水波纹揭示效果"></a>水波纹揭示效果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ViewAnimationUtils.createCircularReveal(View view, <span class="keyword">int</span> centerX, <span class="keyword">int</span> centerY, <span class="keyword">float</span> startRadius, <span class="keyword">float</span> endRadius)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SurfaceView的使用]]></title>
      <url>http://www.lshao.me/2016/11/13/2016-11-13-SurfaceView%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
      <content type="html"><![CDATA[<p>SurfaceView的基本逻辑<br><a id="more"></a></p>
<h2 id="SurfaceView"><a href="#SurfaceView" class="headerlink" title="SurfaceView"></a>SurfaceView</h2><p>主要的类：</p>
<blockquote>
<p>SurfaceView 展示内容的地方</p>
<p>↓    getHolder()</p>
<p>SurfaceHolder 展示的内容</p>
<p>↓    addCallback() → getSurface() 获取 surface</p>
<p>SurfaceHolder.Callback</p>
<p>↓    线程需要在surfaceCreate时创建，surfaceDestroy停止</p>
<p>Thread 持续展示内容的工人</p>
</blockquote>
<h2 id="Surface"><a href="#Surface" class="headerlink" title="Surface"></a>Surface</h2><blockquote>
<p>lockCanvas 锁定画布 保证线程安全</p>
<p>↓ 开启线程</p>
<p>绘制界面 </p>
<p>unlockCanvasAndPost 解锁画布</p>
<p>↓ 关闭线程</p>
</blockquote>
<h2 id="绘制背景"><a href="#绘制背景" class="headerlink" title="绘制背景"></a>绘制背景</h2><p><code>每次一个对象重新绘制位置的时候都会造成叠加的效果</code>，<br>如何解决：是通过不断重新绘制背景来覆盖原来的图片</p>
<h2 id="Rect-矩形类"><a href="#Rect-矩形类" class="headerlink" title="Rect 矩形类"></a>Rect 矩形类</h2><p>android提供的范围类，可以检测是否包含某点</p>
<h2 id="Cocos2dx"><a href="#Cocos2dx" class="headerlink" title="Cocos2dx"></a>Cocos2dx</h2><p>CCGLSurfaceView surfaceview类</p>
<p>CCDirector 导演类 （单例的）CCDirector.sharedDirector</p>
<p>CCScene 场景类 CCScene.node() 展示节点的根节点</p>
<p>CCLayer 图层类 CCSense.addChild() 添加图层</p>
<p>CCSprite 精灵类</p>
<p>默认图片放在asset中</p>
<p>坐标都是左下角开始的正常坐标系，Sprite的默认锚点在中间点<br>默认从锚点绘制</p>
<p>director可以和activity生命周期绑定，手动绑定(在各个周期内绑定)</p>
<h2 id="layer处理触摸事件"><a href="#layer处理触摸事件" class="headerlink" title="layer处理触摸事件"></a>layer处理触摸事件</h2><blockquote>
<p>都是在子线程中进行的，不能进行UI操作，当然surfaceView可以</p>
</blockquote>
<p>layer事件中开启<br>setIsTouchEnabled(true);触摸事件开关</p>
<p>ccTOuchedBegan(event);按下事件</p>
<p>andorid坐标系的点转换为cocos中的点converTouchToNodeSpace</p>
<h2 id="CCNode"><a href="#CCNode" class="headerlink" title="CCNode"></a>CCNode</h2><p>获取单元的范围:CGRect rect = ccNode.getBoundingBox();</p>
<p>获取单元的大小：CGSize size = ccNode.getBoundingBox().size;</p>
<p>将Android的MotionEvent转换成 Cocos2d上的点<br>CGPoint cgPoint = convertTouchToNodeSpace(event);</p>
<h2 id="CCAction"><a href="#CCAction" class="headerlink" title="CCAction"></a>CCAction</h2><p>动作</p>
<p>CCSequence <code>串行动作</code> CCSequence.action(xx,xx);<br>CCSpawn <code>并行动作</code> </p>
<p>CCRepeatForever 重复的动作，用于包装Action</p>
<p>CCEaseIn 具备加速的动作，用于包装Action</p>
<p>CCLabel 专门显示文字的sprite</p>
<p>ccColor3B 颜色渐变的action cc3(r,g,b);</p>
<p>xxxBy 事件都重写了reserver 而 xxxTo都没有重写reserver会报异常。例如：CCTintTo CCRotateTo CCJumpTo</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android调H5]]></title>
      <url>http://www.lshao.me/2016/11/07/2016-11-07-Android%E8%B0%83H5.html</url>
      <content type="html"><![CDATA[<p>如何使用Android中的WebView与JavaScript交互？</p>
<a id="more"></a>
<h1 id="Android调H5"><a href="#Android调H5" class="headerlink" title="Android调H5"></a>Android调H5</h1><p>1.WebView</p>
<blockquote>
<p>可以加载链接，也可以加载本地网页<br>加载assets文件夹中的网页：loadUrl(“file:///android_asset/name”)</p>
</blockquote>
<p>2.java调js</p>
<blockquote>
<p>注意参数加‘’<br>“javascript:jsName(‘“+params+”‘)”–&gt;这是js的一种写法<br>webView.loadUrl(“javascript:jsName(‘“+params+”‘)”);</p>
</blockquote>
<p>3.js调java</p>
<blockquote>
<p>1.android<br>声明js对应接口，webWiew.addJavascriptInterface(new Class(), “字段名”)<br>字段对应的android类中方法名需要添加注解@JavascriptInterface<br>2.js<br>window.字段名.方法名</p>
</blockquote>
<h1 id="ScrollView结合ListView使用"><a href="#ScrollView结合ListView使用" class="headerlink" title="ScrollView结合ListView使用"></a>ScrollView结合ListView使用</h1><p>结合使用会造成listview只显示一行，因为listview需要重新测量高度，两种方法进行测量。</p>
<p>1、重新测量每一项高度+divider的总高度最后得到精确值，<br>2、重写onMeasure方法，直接设置高度测量规则为，<br>    MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE&gt;&gt;2,AT_MOST);<br>即给一个非常大的值让其自己适配</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python 入门基本点]]></title>
      <url>http://www.lshao.me/2016/10/28/2016-10-28-python%E5%85%A5%E9%97%A8.html</url>
      <content type="html"><![CDATA[<p>一些Python的基本用法，目的是看懂它~~</p>
<a id="more"></a>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>Python文件中输出中文以及中文注释，需要添加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*-coding:utf-8-*-</span></div><div class="line"><span class="comment"># 你必须声明文件的编码，方可输出中文以及中文的注释</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'hello world'</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'i\'m li'</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"i'm shi"</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"I come from \n\</span></div><div class="line">China"  <span class="comment"># Write as this syntax,if you want change line</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"""I'm li shi hao.</span></div><div class="line">You see!I'm Chinese!"""  <span class="comment"># This will get a new line</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"you can compare next statement different"</span></div><div class="line"><span class="keyword">print</span> <span class="string">"1\n2\n3\n4\t5\t6\t"</span></div><div class="line"><span class="keyword">print</span> <span class="string">r"1\n2\n3\n4\t5\t6\t"</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">u"厉害了 word中国！"</span></div></pre></td></tr></table></figure></p>
<p>注意上面每一个print就自动换行一次</p>
<h2 id="不同的运算符"><a href="#不同的运算符" class="headerlink" title="不同的运算符"></a>不同的运算符</h2><p>运算符<br>**幂运算</p>
<p>2**2 = 4 </p>
<p>/ 除法运算(带小数) //除法取整 %取余</p>
<p>and 逻辑与 not逻辑非 or逻辑或 同样都是短路的</p>
<p>~x 翻转x 即-(x+1)</p>
<h2 id="严格的缩进控制代码的区块"><a href="#严格的缩进控制代码的区块" class="headerlink" title="严格的缩进控制代码的区块"></a>严格的缩进控制代码的区块</h2><p>python中通过 : 来表明下面将是程序块<br>通过制表符的间隔对齐范围，表示程序块范围</p>
<p>例如</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">	<span class="keyword">print</span> <span class="string">'123'</span></div><div class="line">	<span class="keyword">print</span> <span class="string">'321'</span></div><div class="line"><span class="comment">#看到上面的部分代表while的程序块，下面部分代表这while以外的部分</span></div><div class="line"><span class="keyword">print</span> <span class="string">'000'</span></div></pre></td></tr></table></figure>
<h2 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h2><p>def关键字表示定义一个方法<br>pythond也有类似三元表达式 true_part if condition else false_part<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_num</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"最大的是："</span>, a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</div></pre></td></tr></table></figure></p>
<h2 id="方法中默认参数"><a href="#方法中默认参数" class="headerlink" title="方法中默认参数"></a>方法中默认参数</h2><p>如下方法的参数中，带有默认值的参数只能放在其他参数的后面才可以使用,<br>原因是：当你在调用方法是第一个参数往往是赋值给第一个形参的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(arg0,arg1=<span class="number">1</span>)</span>:</span></div><div class="line">	<span class="keyword">print</span> arg0*arg1</div></pre></td></tr></table></figure>
<h2 id="from-xxx-import-xxx"><a href="#from-xxx-import-xxx" class="headerlink" title="from xxx import xxx"></a>from xxx import xxx</h2><p>从某个module中导入参数，这样就不必每次都写xxx.yyy</p>
<p>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</div></pre></td></tr></table></figure></p>
<p>那么以后的argv就可以直接使用，但这将占用一个变量名</p>
<h2 id="主modul名称"><a href="#主modul名称" class="headerlink" title="主modul名称"></a>主modul名称</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="comment"># __name__是每一个module在执行是的名称</span></div><div class="line"><span class="comment"># __main__是主线程的名称</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"I called by myself"</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"who called me?"</span>, __name__</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">moduleM</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"Hi! I'm module"</span></div><div class="line"></div><div class="line"></div><div class="line">name = <span class="string">"using"</span></div></pre></td></tr></table></figure>
<h2 id="dir查看命令"><a href="#dir查看命令" class="headerlink" title="dir查看命令"></a>dir查看命令</h2><p>dir()命令在命令行中使用，会打印对应module中的属性列表,方法列表<br>dir(xxx)可以打印指定module的信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## del删除命令</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">()</span>:</span></div><div class="line">	    <span class="keyword">global</span> x</div><div class="line">	    <span class="keyword">print</span> x</div><div class="line">	    <span class="keyword">del</span> x</div><div class="line">	    <span class="comment"># del method 不能在方法中删除方法</span></div><div class="line">	</div><div class="line">	x = <span class="string">"test del"</span></div><div class="line">	method()</div><div class="line">	</div><div class="line">	<span class="comment"># del method # 可以删除变量这样这个变量，他也可以删除一个方法就像没有存在过一样</span></div><div class="line">	<span class="comment"># method() # 该句将出错因为x已经被删除了</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
  
  
</search>
