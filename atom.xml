<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>潜水的沙 -- Java 开发者</title>
  
  <subtitle>潜水的沙 -- Java 开发者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lshao.xyz/"/>
  <updated>2018-01-01T15:04:03.954Z</updated>
  <id>http://lshao.xyz/</id>
  
  <author>
    <name>潜水的沙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017-2-22-Spring（一）</title>
    <link href="http://lshao.xyz/2017/02/22/2017-2-22-Spring%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://lshao.xyz/2017/02/22/2017-2-22-Spring（一）/</id>
    <published>2017-02-22T12:25:52.000Z</published>
    <updated>2018-01-01T15:04:03.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h2><p>Spring核心内容：bean、core、context、expression language</p><h2 id="BeanFactory和ApplicationContext的区别"><a href="#BeanFactory和ApplicationContext的区别" class="headerlink" title="BeanFactory和ApplicationContext的区别"></a>BeanFactory和ApplicationContext的区别</h2><p>1、加载问题<br>beanFactory会具备懒加载，只有在getBean的时候才会加载bean<br>applicationContext<strong><em>会立即加载配置文件中的所有bean</em></strong><br>2、applicationContext更强大<br>applicationContext可以进行国际化处理、事件传递、Bean自动装配、各种不同应用层的Context实现</p><h2 id="Bean文件详解"><a href="#Bean文件详解" class="headerlink" title="Bean文件详解"></a>Bean文件详解</h2><h3 id="Bean的生成方式"><a href="#Bean的生成方式" class="headerlink" title="Bean的生成方式"></a>Bean的生成方式</h3><p>1、默认构造<br>即普通的bean声明方式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认构造 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.lsh.spring.b_instance.UserServiceImpl"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>2、静态工厂构造<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 静态工厂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.lsh.spring.b_instance.StaticFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getUserService"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>3、实例工厂构造<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实例工厂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myFactory"</span> <span class="attr">class</span>=<span class="string">"com.lsh.spring.b_instance.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService02"</span> <span class="attr">factory-bean</span>=<span class="string">"myFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getUserService"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p>spring提供的工厂包装bean，实现factoryBean接口后，spring将加载首先加载该接口。</p><p>起到懒加载的作用。</p><p><strong><em>但是用这种方式后需要手动进行依赖注入。</em></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- FactoryBean 一个实现了工厂的bean每次实例时，都是通过工厂创建，而不是直接的实例</span></span><br><span class="line"><span class="comment">   spring内部调用其getObject方法获取实例</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.lsh.spring.c_factorybean.MyFactoryBean"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String xmlPath = <span class="string">"com/lsh/spring/c_factorybean/applicationContext.xml"</span>;</span><br><span class="line"><span class="comment">// bean不会被立即加载UserService而是调用getBean时才会加载</span></span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">xmlPath);</span><br><span class="line">IUserService userService = (IUserService) applicationContext</span><br><span class="line">.getBean(<span class="string">"userService"</span>);</span><br><span class="line">userService.serviceMethod();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="scope-作用域"><a href="#scope-作用域" class="headerlink" title="scope 作用域"></a>scope 作用域</h3><p>指定生成的bean是否为单例或者多例，默认为单例<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">scope</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>singleton : 单例<br>prototype : 多例</p><p>对于FactoryBean生产的bean需要在scope和isSingleton同时为单例的情况下才能生成单例的实例。</p><h3 id="lifecycle-生命周期"><a href="#lifecycle-生命周期" class="headerlink" title="lifecycle 生命周期"></a>lifecycle 生命周期</h3><p>xml 中 指定对应 init和destory方法，spring自动调用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.lsh.spring.d_lifecycle.UserServiceImpl"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="BeanPostProcessor-回调"><a href="#BeanPostProcessor-回调" class="headerlink" title="BeanPostProcessor 回调"></a>BeanPostProcessor 回调</h3><p>BeanPostProcessor会在对象的init方法前后分别执行，开发者可以在此时对对象进行加工或者替换，但是<strong><em>对象销毁时仍然使用源对象的destroy方法</em></strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明一个BeanPostProcessor，提供给Spring回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lsh.spring.d_lifecycle.MyBeanPostProcessor"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyBeanPostProcessor postProcessBefore "</span>);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(<span class="keyword">final</span> Object bean,</span></span></span><br><span class="line"><span class="function"><span class="params">String beanName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyBeanPostProcessor postProcessAfter "</span>);</span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">MyBeanPostProcessor.class.getClassLoader(),</span><br><span class="line">UserServiceImpl.class.getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method,</span></span></span><br><span class="line"><span class="function"><span class="params">Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">String name = method.getName();</span><br><span class="line">System.out.println(<span class="string">"开始调用"</span> + name + <span class="string">" 已经记录和处理"</span>);</span><br><span class="line">Object methodResult = method.invoke(bean, args);</span><br><span class="line">System.out.println(<span class="string">"结束调用"</span> + name + <span class="string">"已经记录和处理"</span>);</span><br><span class="line"><span class="keyword">return</span> methodResult;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">com.lsh.spring.d_lifecycle.UserServiceImpl construct</span><br><span class="line">MyBeanPostProcessor postProcessBefore  ------------------------ &gt;&gt;&gt; postProcessor开始执行</span><br><span class="line">CopyOfMyBeanPostProcessor postProcessBefore </span><br><span class="line">com.lsh.spring.d_lifecycle.UserServiceImpl init</span><br><span class="line">MyBeanPostProcessor postProcessAfter </span><br><span class="line"></span><br><span class="line">CopyOfMyBeanPostProcessor postProcessAfter </span><br><span class="line">Copy 开始调用serviceMethod 已经记录和处理 ------------------------&gt;&gt;&gt;已经转为代理类</span><br><span class="line">开始调用serviceMethod 已经记录和处理</span><br><span class="line">com.lsh.spring.d_lifecycle.UserServiceImpl serviceMethod ------------------&gt;&gt;&gt;代理类中调用了源实例的方法</span><br><span class="line">结束调用serviceMethod已经记录和处理</span><br><span class="line">Copy 结束调用serviceMethod已经记录和处理</span><br><span class="line">com.lsh.spring.d_lifecycle.UserServiceImpl destroy ---------------&gt;&gt;&gt;调用了destroy</span><br></pre></td></tr></table></figure><h3 id="P命令空间"><a href="#P命令空间" class="headerlink" title="P命令空间"></a>P命令空间</h3><p>可以简化get/set方法，在参数注入时不用再去书写<property>&lt;/~&gt;类似的二级节点，类似android的配置文件。<br>使用时写上命名空间，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></property></p><h3 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h3><p>对<code>&lt;property&gt;</code>进行统一编程，所有的内容都使用value<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"#&#123;表达式&#125;"</span>&gt;</span></span><br><span class="line">#&#123;123&#125;、#&#123;'jack'&#125; ： 数字、字符串</span><br><span class="line">#&#123;beanId&#125;：另一个bean引用</span><br><span class="line">#&#123;beanId.propName&#125;：操作数据</span><br><span class="line">#&#123;beanId.toString()&#125;：执行方法</span><br><span class="line">#&#123;T(类).字段|方法&#125;：静态方法或字段</span><br></pre></td></tr></table></figure></p><h2 id="spring常用注解"><a href="#spring常用注解" class="headerlink" title="spring常用注解"></a>spring常用注解</h2><p>使用注解时需要添加命名空间，并配置要扫描的包，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lsh.spring.e_di"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>常用替代bean配置的注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@component</span> <span class="comment">// 指定一个bean，以下三个为component的衍生注解</span></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">// 指明是一个control层</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">// 指明是一个Service层</span></span><br><span class="line"><span class="meta">@Repository</span> <span class="comment">// 指明是一个dao层</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span> <span class="comment">// 注入参数</span></span><br><span class="line"><span class="meta">@Autowired</span> <span class="comment">// 自动装配，可写在变量名上，也可写在set方法上</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE) <span class="comment">// 指明参数的作用域 单例(singleton)或者多例(prototype)</span></span><br></pre></td></tr></table></figure></p><p>即使，使用了注解setter方法也是不可避免的，需要添加setter方法才可以注入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring简介&quot;&gt;&lt;a href=&quot;#Spring简介&quot; class=&quot;headerlink&quot; title=&quot;Spring简介&quot;&gt;&lt;/a&gt;Spring简介&lt;/h2&gt;&lt;p&gt;Spring核心内容：bean、core、context、expression langua
      
    
    </summary>
    
      <category term="Java EE" scheme="http://lshao.xyz/categories/Java-EE/"/>
    
    
      <category term="Spring" scheme="http://lshao.xyz/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>2017-2-13-Hibernate</title>
    <link href="http://lshao.xyz/2017/02/13/2017-2-13-Hibernate/"/>
    <id>http://lshao.xyz/2017/02/13/2017-2-13-Hibernate/</id>
    <published>2017-02-13T11:59:03.000Z</published>
    <updated>2018-01-01T15:04:21.130Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Hibernate中的小知识"><a href="#Hibernate中的小知识" class="headerlink" title="Hibernate中的小知识"></a>Hibernate中的小知识</h2><p>1、每一个线程的Session在事务提交的时候，会自动关闭并从当前线程删除。</p><p>2、HQL 每次都重新去查询（发送sql），而不是从一级缓存中获取</p><p>3、HQL 会将结果放入一级缓存中</p><p>4、persist和save方法的区别</p><pre><code>- persist将会完整的持久化bean对象，所以对应的主键不能自己配置（除非主键自增策略为assigned）- save方法中，每次都重新设置id</code></pre><h2 id="多表设计"><a href="#多表设计" class="headerlink" title="多表设计"></a>多表设计</h2><p>外键：如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为主表，具有此外键的表被称为主表的从表。外键又称作外关键字。</p><h3 id="控制权限-inverse"><a href="#控制权限-inverse" class="headerlink" title="控制权限 inverse"></a>控制权限 inverse</h3><p>inverse表示 外键的维护权限是否反转。</p><h3 id="级联操作-cascade"><a href="#级联操作-cascade" class="headerlink" title="级联操作 cascade"></a>级联操作 cascade</h3><h2 id="加载策略"><a href="#加载策略" class="headerlink" title="加载策略"></a>加载策略</h2><h3 id="类加载策略"><a href="#类加载策略" class="headerlink" title="类加载策略"></a>类加载策略</h3><p>get/load方法。。</p><p>默认：load方法是在对象的属性被调用的时候才发送语句查询，被称为懒加载(lazy)。<br>其配置属性为:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 懒加载默认是开启的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Student"</span> <span class="attr">table</span>=<span class="string">"t_student"</span> <span class="attr">lazy</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关联级别懒加载"><a href="#关联级别懒加载" class="headerlink" title="关联级别懒加载"></a>关联级别懒加载</h3><p>默认：所关联的数据，在使用时才开始加载其数据。</p><p>关联级别的加载受两个属性控制：</p><pre><code>&lt;set&gt;    lazy：是否使用懒加载    fetch：加载集合使用的sql语句种类        select ： 普通的select查询        join：表链接语句        subselect：子查询加载</code></pre><h3 id="join语句的规则"><a href="#join语句的规则" class="headerlink" title="join语句的规则"></a>join语句的规则</h3><p>其各有四条记录，其中有两条记录是相同的，如下所示：</p><table><thead><tr><th>id</th><th>name</th><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>Tom</td><td>1</td><td>Rutabaga</td></tr><tr><td>2</td><td>Jack</td><td>2</td><td>Jerry</td></tr><tr><td>3</td><td>Rose</td><td>3</td><td>Tom</td></tr><tr><td>4</td><td>Jerry</td><td>4</td><td>Ninja</td></tr></tbody></table><p>那么对应的join语句有如下五种情况：</p><table><thead><tr><th>语句</th><th>sql结果</th><th>图形表示</th></tr></thead><tbody><tr><td>SELECT * FROM TableA INNER JOIN TableB ON TableA.name = TableB.name</td><td></td><td><img src="/img/2017-2-13-Hibernate/inner_join.png" alt="inner_join" title="inner_join.png"></td></tr><tr><td>SELECT * FROM TableA FULL OUTER JOIN TableB ON TableA.name = TableB.name</td><td></td><td><img src="/img/2017-2-13-Hibernate/full_outer_join.png" alt="full_outer_join" title="full_outer_join.png"></td></tr><tr><td>SELECT * FROM TableA LEFT OUTER JOIN TableB ON TableA.name = TableB.name</td><td></td><td><img src="/img/2017-2-13-Hibernate/left_outer_join.png" alt="left_outer_join" title="left_outer_join.png"></td></tr><tr><td>SELECT * FROM TableA LEFT OUTER JOIN TableB ON TableA.name = TableB.nameWHERE TableB.id IS null</td><td></td><td><img src="/img/2017-2-13-Hibernate/left_outer_isnull.png" alt="left_outer_isnull" title="left_outer_isnull.png"></td></tr><tr><td>SELECT * FROM TableA FULL OUTER JOIN TableB ON TableA.name = TableB.nameWHERE TableA.id IS null ORTableB.id IS null</td><td></td><td><img src="/img/2017-2-13-Hibernate/full_join_isnull.png" alt="full_join_isnull" title="full_join_isnull.png"></td></tr></tbody></table><h2 id="HQL详解"><a href="#HQL详解" class="headerlink" title="HQL详解"></a>HQL详解</h2><h2 id="使用C3P0的连接池"><a href="#使用C3P0的连接池" class="headerlink" title="使用C3P0的连接池"></a>使用C3P0的连接池</h2><p>先导入c3p0的jar包，再更改hibernate.cfg中的：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>同时还可以配置更多的C3P0的属性，如下：</p><p>#hibernate.c3p0.max_size 2</p><p>#hibernate.c3p0.min_size 2</p><p>#hibernate.c3p0.timeout 5000</p><p>#hibernate.c3p0.max_statements 100</p><p>#hibernate.c3p0.idle_test_period 3000</p><p>#hibernate.c3p0.acquire_increment 2</p><p>#hibernate.c3p0.validate false</p><h2 id="数据库的锁"><a href="#数据库的锁" class="headerlink" title="数据库的锁"></a>数据库的锁</h2><p>解决并发问题</p><p>悲观锁：<br>    读锁：select <em> from t_xxxx lock in share mode; (该锁可被所有人使用)<br>    写锁：select </em> from t_xxxx for update; (该锁会造成阻塞)</p><p>乐观锁：<br>    使用乐观锁时，每个table中都要添加version字段，用于hibernate每次commit校验。只有version值小于事物开启前的值方可进行提交。</p><h2 id="一对一多表设计"><a href="#一对一多表设计" class="headerlink" title="一对一多表设计"></a>一对一多表设计</h2><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>二级缓存是进程级别的缓存。</p><p>1.一级缓存的主要优化手段是快照。</p><p>添加缓存的方式：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 启用二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_second_level_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缓存的提供类 ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.provider_class"</span>&gt;</span>org.hibernate.cache.EhCacheProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 哪个类需要缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class-cache</span> <span class="attr">usage</span>=<span class="string">"read-only"</span> <span class="attr">class</span>=<span class="string">"com.lsh.hibernate.domain.Student"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="类缓存区"><a href="#类缓存区" class="headerlink" title="类缓存区"></a>类缓存区</h3><p>类缓存的方式：<br>类缓存并非将数据一对象的形式缓存，而是缓存成散列数据，在一级缓存中组装成对象。</p><h3 id="集合缓存区"><a href="#集合缓存区" class="headerlink" title="集合缓存区"></a>集合缓存区</h3><p>集合缓存的方式：<br>集合缓存会将集合中每个对象的id存放起来，在使用时去类缓存中查询，集合缓存，也必须声明缓存集合中的元素。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class-cache</span> <span class="attr">usage</span>=<span class="string">"read-only"</span> <span class="attr">class</span>=<span class="string">"com.lsh.hibernate.domain.Course"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection-cache</span> <span class="attr">usage</span>=<span class="string">"read-only"</span> <span class="attr">collection</span>=<span class="string">"com.lsh.hibernate.domain.Student.courses"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="查询缓存区"><a href="#查询缓存区" class="headerlink" title="查询缓存区"></a>查询缓存区</h3><p>对HQL语句进行缓存，通过<code>setCachable(true)</code>开启查询缓存。<br>查询缓存会将查询到的结果的id存储起来，再此查询的时候通过id到类缓存中查找。</p><p>查询缓存内部是将HQL语句所对应的SQL语句与要缓存的id一同存储起来，<br>所以“select c from Customer c”与”from Customer”会得到相同的结果。</p><h2 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h2><p>1、Hibernate中配置集合不一定只使用set，使用bag可以通过order-by参数添加排序方式</p><bag name="replies" cascade="save-update" order-by="id asc"><br>            <key column="tid"></key><br>            <one-to-many class="Reply"><br></one-to-many></bag><p>2、Hibernate配置bean中的类型与sql中的类型<br><img src="/img/2017-2-13-Hibernate/hibernate中属性的对应参数.png" alt="类型对应" title="hibernate中属性的对应参数.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Hibernate中的小知识&quot;&gt;&lt;a href=&quot;#Hibernate中的小知识&quot; class=&quot;headerlink&quot; title=&quot;Hibernate中的小知识&quot;&gt;&lt;/a&gt;Hibernate中的小知识&lt;/h2&gt;&lt;p&gt;1、每一
      
    
    </summary>
    
      <category term="Java EE" scheme="http://lshao.xyz/categories/Java-EE/"/>
    
    
      <category term="Hibernate" scheme="http://lshao.xyz/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>2017-2-4-Struts2入门</title>
    <link href="http://lshao.xyz/2017/02/04/2017-2-4-Struts2%E5%85%A5%E9%97%A8/"/>
    <id>http://lshao.xyz/2017/02/04/2017-2-4-Struts2入门/</id>
    <published>2017-02-04T03:25:54.000Z</published>
    <updated>2018-01-01T11:22:05.533Z</updated>
    
    <content type="html"><![CDATA[<p>Struts的简介：<br>Struts is a Model View Controller framework. Struts provides Controller and View components, and integrates with other technologies to provide the Model. The framework’s Controller acts as a bridge between the application’s Model and the web View.</p><a id="more"></a><h2 id="基本的配置环境"><a href="#基本的配置环境" class="headerlink" title="基本的配置环境"></a>基本的配置环境</h2><p>1、导入以下包（参考struts-blank.war）</p><ul><li>asm-3.3.jar   // asm Java 字节码操纵框架（操控二进制）</li><li>asm-commons-3.3.jar</li><li>asm-tree-3.3.jar</li><li>commons-fileupload-1.3.2.jar  // 上传下载</li><li>commons-io-2.2.jar  // io增强包</li><li>commons-lang3-3.2.jar  // lang增强包</li><li>freemarker-2.3.22.jar  // 页面模版包（struts自身输出页面信息）</li><li>javassist-3.11.0.GA.jar  // 字节码包</li><li>log4j-api-2.3.jar  // 日志框架</li><li>log4j-core-2.3.jar</li><li>ognl-3.0.19.jar  // ognl 表达式</li><li>struts2-core-2.3.31.jar  // 核心库</li><li>xwork-core-2.3.31.jar  // 核心库</li></ul><p>2、配置Filter作为拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">id</span>=<span class="string">"WebApp_9"</span> <span class="attr">version</span>=<span class="string">"2.4"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 该拦截器在struts2包中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、在classpath的根目录下配置一个strut.xml</p><h2 id="struts-xml的配置"><a href="#struts-xml的配置" class="headerlink" title="struts.xml的配置"></a>struts.xml的配置</h2><p>一个基本的struts.xml内容如下：<br>（其所需DTD在struts包下）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开发模式（更改struts.xml不用重启） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 被拦截action的后缀名（空串或者","都代表无后缀，内部为切割逗号） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.action.extension"</span> <span class="attr">value</span>=<span class="string">","</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 命名空间以“/”开头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"pck01"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/hello"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"frist"</span> <span class="attr">class</span>=<span class="string">"com.lsh.struts.web.FristAction"</span></span></span><br><span class="line"><span class="tag"><span class="attr">method</span>=<span class="string">"helloStruts"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"true"</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 包继成不能继承namespace！！继承后namespace为默认的"" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"pck02"</span> <span class="attr">extends</span>=<span class="string">"pck01"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"second"</span> <span class="attr">class</span>=<span class="string">"com.lsh.struts.web.SecondAction"</span></span></span><br><span class="line"><span class="tag"><span class="attr">method</span>=<span class="string">"hiYa"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"true"</span>&gt;</span>/success02.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="struts-xml中实用常量"><a href="#struts-xml中实用常量" class="headerlink" title="struts.xml中实用常量"></a>struts.xml中实用常量</h2><table><thead><tr><th>常量名</th><th>常量值</th><th>说明</th></tr></thead><tbody><tr><td>struts.i18n.encoding</td><td>UTF-8</td><td>应用中使用的编码</td></tr><tr><td>struts.objectFactory.spring.autoWire</td><td>name</td><td>和spring框架整合有关</td></tr><tr><td>struts.multipart.parser</td><td>jakarta</td><td>指定文件上传用的组件</td></tr><tr><td>struts.multipart.maxSize</td><td>2097152</td><td>文件上传总文件大小限制：2M</td></tr><tr><td>struts.action.extension</td><td>action,,</td><td>能进入Struts2框架内部的url地址后缀名。多个值用逗号分隔</td></tr><tr><td>struts.enable.DynamicMethodInvocation</td><td>false</td><td>是否允许动态方法调用</td></tr><tr><td>struts.devMode    false</td><td>是否是开发模式。</td><td>开发模式：改了配置文件，不需要重启。输出更多的错误信息。开发阶段建议为true。</td></tr><tr><td>struts.ui.theme</td><td>xhtml</td><td>页面展示用的主题</td></tr></tbody></table><h2 id="struts动态方法调用"><a href="#struts动态方法调用" class="headerlink" title="struts动态方法调用"></a>struts动态方法调用</h2><p>action标签中name属性可以使用”*“作为通配符，所以当出现这种情况时，通配符对应的内容可以被{1、2、3、4….}所代替。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"*_*"</span> <span class="attr">class</span>=<span class="string">"com.xxx.xxx.ActionSupport"</span> <span class="attr">method</span>=<span class="string">"&#123;2&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>&#123;2&#125;page.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="action-中-参数注入"><a href="#action-中-参数注入" class="headerlink" title="action 中 参数注入"></a>action 中 参数注入</h2><p>1、静态注入（注入指定值）<br>在struts.xml中的action下用<param name="key">value注入对应的参数值，同时在ActionSupport中书写 set/get方法。</p><p>在result 结果视图为redirectAction的情况下，可以通过ognl的方式将参数传给重定向的Action。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"reply"</span> <span class="attr">method</span>=<span class="string">"reply"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.lsh.demo.web.action.ShowTopicAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"actionName"</span>&gt;</span>showTopic<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 传递静态参数给重定向的Action--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"topicId"</span>&gt;</span>$&#123;topicId&#125;<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2、动态参数注入 一<br>struts.xml无需改动，只写set/get方法即可注入</p><p>如果需要注入一个bean，需为这个bean写set/get，同时请求参数为beanName.paramName的格式，struts会先调用get判断是否存在这个bean，不存在就set，然后再get这个bean去填充参数。</p><p>3、动态参数注入 二<br>实现ModelDriven接口，用此接口的getModel返回指定bean，以此进行填充</p><p>ModelDriven的注入会阻碍其他方法的注入。</p><h2 id="Validation的使用"><a href="#Validation的使用" class="headerlink" title="Validation的使用"></a>Validation的使用</h2><p>作用：<br>在参数注入阶段，对参数进行校验。出现错误时，将提示信息返回到input结果视图。</p><p>原理：</p><p>ValidationAware接口、ValidationAwareSupport支持类、DefaultWorkflowInterceptor拦截器，会拦截action并判断参数的验证是否出现了问题</p><p>ActionSupport实现了ValidationAware 接口，并在 addFieldError(String fieldName, String errorMessage);addActionError(String anErrorMessage);等方法中将错误信息添加到了ValidationAwareSupport中。</p><p>ValidationAwareSupport支持类内部以Map存储了错误信息</p><p>DefaultWorkflowInterceptor拦截器会判断是否存在错误信息，并在拦截器阶段返回 “input” 字段，标识验证失败。</p><p>使用方法：</p><ol><li><p>ActionSupport中都实现了validater接口，validate方法中进行参数校验，出现错误时将错误信息使用addFieldError存放起来。</p><p>2.当一个action中有多个method被调用，且各自需要一种验证方式时，为每个method创建创建一个validate+Method()方法进行校验。</p><p>3.通过xml配置文件配置校验不同的校验。<br>xml名称为：ActionClassName-ActionName-validation.xml （注意时对应action的name不是action类中的method）</p><p>一般写法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE validators PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Struts//XWork Validator Definition 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">validators</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以指定参数字段为校验单位，可以为这个字段配置多个校验器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field-validator</span> <span class="attr">type</span>=<span class="string">"requiredstring"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>密码不能为空<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">field-validator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field-validator</span> <span class="attr">type</span>=<span class="string">"stringlength"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"maxLength"</span>&gt;</span>18<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"minLength"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>密码长度为$&#123;minLength&#125;~$&#123;maxLength&#125;位<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">field-validator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 以一个验证器为单位进行配置，只能对这个验证器进行一次注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">validator</span> <span class="attr">type</span>=<span class="string">"expression"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"expression"</span>&gt;</span>&lt;![CDATA[password == repassword]]&gt;<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>两次密码不一致<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">validator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">validators</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>默认的校验器 存放路径在 /com/opensymphony/xwork2/validator/validators/default.xml，默认的校验器可以直接使用其name<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">validators</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"required"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.RequiredFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"requiredstring"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.RequiredStringValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"int"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.IntRangeFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"long"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.LongRangeFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"short"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.ShortRangeFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"double"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.DoubleRangeFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"date"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.DateRangeFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"expression"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.ExpressionValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"fieldexpression"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.FieldExpressionValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.EmailValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.URLValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"visitor"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.VisitorFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"conversion"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.ConversionErrorFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"stringlength"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.StringLengthFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"regex"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.RegexFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"conditionalvisitor"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.ConditionalVisitorFieldValidator"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">validators</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>对于不想使用拦截器的method可以添加注解@SkipValidation</p><h2 id="类型转换器"><a href="#类型转换器" class="headerlink" title="类型转换器"></a>类型转换器</h2><p>TypeConvertor</p><h2 id="国际化-i18n"><a href="#国际化-i18n" class="headerlink" title="国际化 i18n"></a>国际化 i18n</h2><h3 id="java中使用国际化"><a href="#java中使用国际化" class="headerlink" title="java中使用国际化"></a>java中使用国际化</h3><p>1、java中使用国际化<br>采用message_zh_cn.properties命名资源文件。<br>并使用ResourceBundle.getBundle（“com.lsh.struts.message“,request.getLoacl()）读取对应的资源文件</p><p>2、struts中的国际化方法 </p><p>搜索顺序为就近原则：</p><p>为全局应用配置一个String资源包，在struts.xml中指定默认的全局String资源包 <constant name="struts.custom.i18n.resources=testmessages,testmessages2" value="com.lsh.struts.resource.xxxxx"></constant></p><p>为指定包下配置一个String资源包 package_zh_cn.properties</p><p>为指定action.class配置一个String资源包 ActionClassName_zh_cn.properties</p><p>使用ActionSupport中TextProvider提供getText等方法可根据key值来获取string。</p><h3 id="jsp中使用国际化"><a href="#jsp中使用国际化" class="headerlink" title="jsp中使用国际化"></a>jsp中使用国际化</h3><p>在jsp页面使用jstl进行国际化。<br>通过action访问jsp时，国际化会查找action的目录下的string资源文件，不适用action访问时使用全局的资源文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--资源搜索的顺序为--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:i18n</span> <span class="attr">name</span>=<span class="string">"指定string资源路径"</span>&gt;</span> <span class="comment">&lt;!--不用写后面的zh_cn--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:text</span> <span class="attr">name</span>=<span class="string">"指定string的key"</span>/&gt;</span><span class="comment">&lt;!--单独使用也可以--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:i18n</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/2017-2-4-Struts2入门/jsp下i18n的搜索顺序.png" alt="jsp下i18n的搜索顺序" title="jsp下i18n的搜索顺序.png"></p><h3 id="单个bean的国际化"><a href="#单个bean的国际化" class="headerlink" title="单个bean的国际化"></a>单个bean的国际化</h3><h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><p>MethodFilterInterceptor和Interceptor</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>文件上传通过fileUpload拦截器进行工作</p><p>action模版代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> File[] program; <span class="comment">// 自动注入 数组的方式是为了支持多文件上传</span></span><br><span class="line"><span class="keyword">private</span> String[] programFileName; <span class="comment">// 固定格式parameter + FileName 获取文件名</span></span><br><span class="line"><span class="keyword">private</span> String[] programContentType;  <span class="comment">// 固定个你parameter + ContentType 获取文件MIME类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upExe</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 通过ServletContext获取一个资源的真实路径</span></span><br><span class="line">ServletContext servletContext = ServletActionContext</span><br><span class="line">.getServletContext();</span><br><span class="line">String realPath = servletContext.getRealPath(<span class="string">"/WEB-INF/upfiles"</span>);</span><br><span class="line"></span><br><span class="line">File file = <span class="keyword">new</span> File(realPath);</span><br><span class="line"><span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line"><span class="keyword">if</span> (!file.isDirectory()) &#123;</span><br><span class="line">file.delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">file.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动至</span></span><br><span class="line">program[<span class="number">0</span>].renameTo(<span class="keyword">new</span> File(file, programFileName[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--输出动作上的错误信息，非field错误信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:actionerror</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--固定格式 entype=”multipart/form-data“ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:form</span> <span class="attr">action</span>=<span class="string">"fileup/upExe"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:file</span> <span class="attr">name</span>=<span class="string">"program"</span> <span class="attr">label</span>=<span class="string">"上传一个文件"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:submit</span> <span class="attr">value</span>=<span class="string">"上传"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更改上传的大小限制：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.multipart.maxSize"</span> <span class="attr">value</span>=<span class="string">"byte为单位"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>限制文件上传的种类：<br>FileUploadInterceptor中有参数限制，<br>1、限制后缀名    allowedTypes<br>2、限制文件类型 allowedExtensions</p><p>使用拦截器注入参数的方式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"fileupload.maximumSize"</span>&gt;</span>上传大小byte单位<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"fileupload.allowedTypes"</span>&gt;</span>image/pjpg,image/png<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"fileupload.allowedExtensions"</span>&gt;</span>.jpg.png.gif<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>使用StreamResult流结果视图</p><p>固定格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> InputStream inputStream; <span class="comment">// 指定读取流 给其添加set/get</span></span><br><span class="line"><span class="keyword">private</span> String filename;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">download</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String realPath = ServletActionContext.getServletContext().getRealPath(</span><br><span class="line"><span class="string">"/WEB-INF/downfiles/文件名"</span>);</span><br><span class="line">filename = <span class="string">"文件名"</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(realPath));</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"downFile"</span> <span class="attr">class</span>=<span class="string">"com.lsh.struts.action.DownloadAction"</span> <span class="attr">method</span>=<span class="string">"download"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"stream"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置响应头：通知浏览器正文的类型，让其以下载的方式打开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>application/octet-stream<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通知浏览器，以下载的方式打开并通知其下载名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentDisposition"</span>&gt;</span>attachment;filename=$&#123;filename&#125;<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将action.class中的读取流设置给结果视图--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"inputName"</span>&gt;</span>inputStream<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h2><p>1、Ognl 的Roots节点<br>OgnlContext是一个支持使用ognl表达式进行对象查找的Map集合，他需要一个root节点。</p><p>在Xwork中root节点被CompoundRoot替换成了一个roots节点，并且封装了一个OgnlValueStack类用以处理CompoundRoot节点和调用ognl的解析功能。</p><p>CompoundRoot是一个CopyAndWriteArrayList改造而成的 栈 结构。</p><p>因此roots具备了栈的特性。</p><p>2、向OgnlContext的roots节点中添加数据<br>OgnlValueStack.push(obj);</p><p>3、使用ognl表达式为OgnlContext中的对象属性赋值，和取值。<br>OgnlValueStack.setValue(exper,obj);<br>OgnlValueStack.setParameter(exper,obj);<br>OgnlValueStack.findValue(exper,obj);<br>OgnlValueStack.findString(exper);</p><p>4、其中exper 取roots内容时不用带 “#” 。</p><p>以索引的形式取roots中的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[0].name</span><br><span class="line">[1].name</span><br></pre></td></tr></table></figure></p><p>“[ ]”的意思并非真正的索引，其实现方法为下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> CompoundRoot <span class="title">cutStack</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 剪切index之后的所有元素</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> CompoundRoot(subList(index, size()));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>即其返回index以后的列表，并在这个列表中查找所指定的属性。</p><p>index从0开始计算。</p><p>则<a href="/img/2017-2-4-Struts2入门/jsp下i18n的搜索顺序.png" title="jsp下i18n的搜索顺序.png">1</a>.name代表查找第二个元素之后的所有元素，而不是单指第二个。</p><p>5、特殊方法：</p><ul><li>OgnlValueStack.set(str,obj)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object o)</span> </span>&#123;</span><br><span class="line">       Map setMap = retrieveSetMap();</span><br><span class="line">       setMap.put(key, o);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 恢复map</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> Map <span class="title">retrieveSetMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Map setMap;</span><br><span class="line">       Object topObj = peek();</span><br><span class="line">       <span class="keyword">if</span> (shouldUseOldMap(topObj)) &#123;</span><br><span class="line">           setMap = (Map) topObj;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           setMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">           setMap.put(MAP_IDENTIFIER_KEY, <span class="string">""</span>);</span><br><span class="line">           push(setMap);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> setMap;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 检测该对象是否为包含 MAP_IDENTIFIER_KEY 的map</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">shouldUseOldMap</span><span class="params">(Object topObj)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> topObj <span class="keyword">instanceof</span> Map &amp;&amp; ((Map) topObj).get(MAP_IDENTIFIER_KEY) != <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><p>该方法，先检测root栈顶是否为map，不是则重新创建，是则直接返回，将这个map压入栈顶，并将str=obj put到map中去。</p><p>特殊点： 该方法只会检测CompoundRoot的顶部是否有对应的map，一但顶部的原有的map被下压，仍然重新创建一个map。</p><p>6、jsp中强制使用ognl表达式</p><p>在一些struts-tags的属性中使用 “ %{ognl expression} “</p><p>7、ognl表达式中可以使用四则运算</p><p><img src="/img/2017-2-4-Struts2入门/struts数据结构详解.png" alt="Struts2 的contextMap数据结构" title="struts数据结构详解.png"></p><p><img src="/img/2017-2-4-Struts2入门/Struts2结构图.png" alt="Struts2结构图" title="Struts2结构图.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Struts的简介：&lt;br&gt;Struts is a Model View Controller framework. Struts provides Controller and View components, and integrates with other technologies to provide the Model. The framework’s Controller acts as a bridge between the application’s Model and the web View.&lt;/p&gt;
    
    </summary>
    
      <category term="JavaEE" scheme="http://lshao.xyz/categories/JavaEE/"/>
    
    
      <category term="Struts2" scheme="http://lshao.xyz/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>2017-1-31-Listener与Filter</title>
    <link href="http://lshao.xyz/2017/01/31/2017-1-31-Listener%E4%B8%8EFilter/"/>
    <id>http://lshao.xyz/2017/01/31/2017-1-31-Listener与Filter/</id>
    <published>2017-01-31T06:25:24.000Z</published>
    <updated>2018-01-01T15:04:43.669Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="jsonConfig"><a href="#jsonConfig" class="headerlink" title="jsonConfig"></a>jsonConfig</h2><p>jsonConfig可以通过配置不需要的bean属性，在parse阶段过滤指定属性。</p><h2 id="监听器Listener"><a href="#监听器Listener" class="headerlink" title="监听器Listener"></a>监听器Listener</h2><p>实现对应的接口：</p><p>1、监听生命周期 （web.xml 配置listener）<br>HttpSessionListener</p><p>ServletContextListener</p><p>ServletRequestListener</p><p>2、监听属性添加 （web.xml 配置listener）<br>HttpSessionAttributeListener</p><p>ServletContextAttributeListener</p><p>ServletRequestAttributeListener</p><p>3、它是用于监听javaBean对象是否绑定到了session域，用于java bean实现接口得到通知<br>HttpSessionBindingListener</p><p>4、钝化和活化对象 bean实现 HttpSessionActivationListener</p><p>我们还需要个context.xml文件来配置钝化时存储的文件<br>在meta-inf目录下创建一个context.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.session.PersistentManager"</span> <span class="attr">maxIdleSwap</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Store</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.session.FileStore"</span> <span class="attr">directory</span>=<span class="string">"存储的文件夹名"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Manager</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter 过滤器"></a>Filter 过滤器</h2><p>Javaweb中的过滤器可以拦截所有访问web资源的请求或响应操作。</p><p>实现Filter后 需在web.xml中进行配置（类似servlet的配置）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"><span class="comment">// 允许当前的request向下传递，不传递无法正常访问</span></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个请求可以被多个Filter拦截，拦截的顺序是web.xml中的配置顺序，<strong>第一个filter会在最后一个filter结束后结束</strong></p><p>生命周期：</p><p>在服务器启动时 init</p><p>在一个请求到来时 doFilter</p><p>在服务器结束时 destroy</p><h3 id="Filter拦截的配置"><a href="#Filter拦截的配置" class="headerlink" title="Filter拦截的配置"></a>Filter拦截的配置</h3><p>拦截指定的servlet(不用再写url-pattern)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MyFilter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>拦截一次request的转发和请求</p><p>filter会配置所拦截的所有方式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MyFilter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>FORWARD<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h2><p>Java在其网络传输中使用的是iso-8859-1格式的编码。因为iso-8859-1是一种单字节只支持0-255的编码方式。</p><p>在JSP页面获取表单的值时会出现乱码，有两种解决方法：</p><p>1.post 在调用getParameter之前通过request.setCharacterEncoding设置字符编码</p><p>2.get 调用new String(str.getBytes(“iso8859-1”), “UTF-8”);编码后解码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java判断是否可以解码</span></span><br><span class="line">Charset.forName(<span class="string">"UTF-8"</span>).newEncoder().canEncode(req.getParameter(<span class="string">"id"</span>))</span><br></pre></td></tr></table></figure><p><strong>new String(str.getBytes(“iso8859-1”), “UTF-8”);该方法仅仅是在出现浏览器不以U8转换URL时才会使用到</strong></p><p>js中也可以将uri转换为u8格式的url</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enc</span>(<span class="params">uri</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> u = <span class="built_in">encodeURI</span>(uri);</span><br><span class="line">alert(u);</span><br><span class="line">location.href = u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态代理-aop"><a href="#动态代理-aop" class="headerlink" title="动态代理+aop"></a>动态代理+aop</h2><p>代理机制需要两个要素：1、被代理对象 2、代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getPoxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 被代理对象</span></span><br><span class="line"><span class="keyword">final</span> MyFilter myFilter = <span class="keyword">new</span> MyFilter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理对象</span></span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(classLoader<span class="string">"被代理对象的加载器"</span>, interfaces[]“被代理对象所具有的接口对象”,invokeHandler“调用方法的处理类”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AOP 将对应的方法在调用前进行拦截，并穿插其他的信息，从而保证原调用方法不被改动<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getPoxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> MyFilter myFilter = <span class="keyword">new</span> MyFilter();</span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(MyFilter.class.getClassLoader(), MyFilter.class.getInterfaces(),</span><br><span class="line"><span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"><span class="comment">// 返回调用方法的结构</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">...</span><br><span class="line">Object result = method.invoke(myFilter, args);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;jsonConfig&quot;&gt;&lt;a href=&quot;#jsonConfig&quot; class=&quot;headerlink&quot; title=&quot;jsonConfig&quot;&gt;&lt;/a&gt;jsonConfig&lt;/h2&gt;&lt;p&gt;jsonConfig可以通过配置不需要的
      
    
    </summary>
    
      <category term="Java EE" scheme="http://lshao.xyz/categories/Java-EE/"/>
    
    
      <category term="JavaEE" scheme="http://lshao.xyz/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>2017-1-20-事务连接池</title>
    <link href="http://lshao.xyz/2017/01/20/2017-1-20-%E4%BA%8B%E5%8A%A1%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://lshao.xyz/2017/01/20/2017-1-20-事务连接池/</id>
    <published>2017-01-20T06:00:37.000Z</published>
    <updated>2018-01-01T15:04:47.109Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="事务-Transaction"><a href="#事务-Transaction" class="headerlink" title="事务 Transaction"></a>事务 Transaction</h2><p>MySql默认是语句自动提交事物的</p><p>命令行中使用begin开始事物，rollback回滚事务，commit提交事务。</p><p>JDBC中有如下方法开启一个事物<br>Connection.setAutoCommit(false); // 关闭自动提交事务<br>Connection.rollback(); // 回滚<br>Connection.commit(); // 提交</p><p>1、事务具有四个特性：</p><p>原子性、一致性、隔离性、持久性(更改后不可回滚)</p><p>2、事务的隔离性</p><p>command：</p><p>select @@tx_isolation; // 查询当前的事务级别<br>set transaction isolation level xxxx; // 临时设置当前的事务级别</p><p>JDBC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_NONE <span class="number">0</span>; <span class="comment">// 不设置事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_READ_UNCOMMITTED <span class="number">1</span>;  <span class="comment">// 不能避免脏读、不可重复读、虚读</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_READ_COMMITTED <span class="number">2</span>;  <span class="comment">// 避免脏读，不可重复读、虚读</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_REPEATABLE_READ <span class="number">4</span>;  <span class="comment">// 避免脏读、不可重复读，可能会虚读</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_SERIALIZABLE <span class="number">8</span>;  <span class="comment">// 全部避免，同步，一个事务会等待另一个事务的commit</span></span><br></pre></td></tr></table></figure><p>JDBC设置事务的级别<br>connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);</p><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>可以使用Java统一标准DataSource(数据源)写自己的连接池(集合)。</p><p>C3P0 和 common-dbpc</p><p>JNDI (java naming directory interface) 让服务器管理连接池，jndi由多个在服务器context.xml配置的连接池信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;事务-Transaction&quot;&gt;&lt;a href=&quot;#事务-Transaction&quot; class=&quot;headerlink&quot; title=&quot;事务 Transaction&quot;&gt;&lt;/a&gt;事务 Transaction&lt;/h2&gt;&lt;p&gt;MySq
      
    
    </summary>
    
      <category term="Java EE" scheme="http://lshao.xyz/categories/Java-EE/"/>
    
    
      <category term="SQL" scheme="http://lshao.xyz/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>2017-1-18-ee中的小知识</title>
    <link href="http://lshao.xyz/2017/01/18/2017-1-18-ee%E4%B8%AD%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <id>http://lshao.xyz/2017/01/18/2017-1-18-ee中的小知识/</id>
    <published>2017-01-18T07:08:20.000Z</published>
    <updated>2018-01-01T15:04:50.301Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="简单的知识"><a href="#简单的知识" class="headerlink" title="简单的知识"></a>简单的知识</h2><p>1、邮箱的正则表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;\\b^[&apos;_a-z0-9-\\+]+(\\.[&apos;_a-z0-9-\\+]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*\\.([a-z]&#123;2&#125;|aero|arpa|asia|biz|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|nato|net|org|pro|tel|travel|xxx)$\\b&quot;</span><br></pre></td></tr></table></figure><p>2、web app运行时期的资源获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">"/WEB-INF/classes/com/xxx.file"</span>;</span><br><span class="line">path = <span class="string">"/WEB-INF/classes/xxx.file"</span>;</span><br><span class="line">path = <span class="string">"/WEB-INF/xxx.file"</span>;</span><br><span class="line"></span><br><span class="line">String realPath =  servletContext.getRealPath(path);<span class="comment">//根据资源名称得到资源的绝对路径.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> InputFileStream(realPath);</span><br></pre></td></tr></table></figure><p>可以得到当前应用任何位置的任何资源。</p><p>3、ClassLoader获取src文件夹下的资源</p><p>xxx.class.getClassLoader().getResourceAsStream(path);</p><p>path的根目录一半从src目录开始</p><p>xxx.class.getResourceAsStream(path);<br>此时path的根目录从对应类的文件夹开始</p><p>4、区分绝对路径和相对路径</p><p>相对路径：</p><pre><code>- &quot;.&quot; 开头 “./img/xxxxxx”- 无前缀 &quot;img/xxxxxx”&quot;</code></pre><p>绝对路径：</p><pre><code>- &quot;/&quot; 开头 &quot;/img/xxxxxx”&quot;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;简单的知识&quot;&gt;&lt;a href=&quot;#简单的知识&quot; class=&quot;headerlink&quot; title=&quot;简单的知识&quot;&gt;&lt;/a&gt;简单的知识&lt;/h2&gt;&lt;p&gt;1、邮箱的正则表达式&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="Java EE" scheme="http://lshao.xyz/categories/Java-EE/"/>
    
    
      <category term="mvc" scheme="http://lshao.xyz/tags/mvc/"/>
    
  </entry>
  
  <entry>
    <title>2017-1-17-Jsp的使用</title>
    <link href="http://lshao.xyz/2017/01/17/2017-1-17-Jsp%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://lshao.xyz/2017/01/17/2017-1-17-Jsp的使用/</id>
    <published>2017-01-17T04:56:33.000Z</published>
    <updated>2018-01-01T15:04:53.433Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><p>转发：<code>request.getRequestDispatcher(&quot;success.jsp&quot;).forward(request, response);</code><br>重定向：<code>response.sendRedirect(request.getContextPath() + &quot;/login.jsp&quot;);</code></p><p>Jsp中声明方法和全局变量，静态变量等 <code>&lt;%! ... %&gt;</code></p><h2 id="jsp具有4大域对象"><a href="#jsp具有4大域对象" class="headerlink" title="jsp具有4大域对象"></a>jsp具有4大域对象</h2><p>1.PageContext （每个Jsp中都会通过JspFactory生成一个对应本Servlet的对象（非静态），只代表当前的Servlet。类似Android中的Activity的Context）<br>2.request （一次向服务器的请求）<br>3.session （一个Session在服务器上有指定的存活时间，关闭浏览器会切断当前的Session）<br>4.application (全局应用，是一个大容器可以包含多个Servlet和Session)</p><h2 id="jsp中6个常用指令"><a href="#jsp中6个常用指令" class="headerlink" title="jsp中6个常用指令"></a>jsp中6个常用指令</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建一个Bean放到作用域里 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:useBean</span> <span class="attr">id</span>=<span class="string">"对象在域中的name"</span> <span class="attr">class</span>=<span class="string">"com.xxx.xx.xx"</span> <span class="attr">scope</span>=<span class="string">"application|session|request|page"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置域中的对象属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:setProperty</span> <span class="attr">property</span>=<span class="string">"对象的参数名"</span> <span class="attr">name</span>=<span class="string">"对象在域中的name"</span> <span class="attr">param</span>=<span class="string">"请求参数中的值，可代替value"</span> <span class="attr">value</span>=<span class="string">"值"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取与对象中的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:getProperty</span> <span class="attr">property</span>=<span class="string">"对象的参数名"</span> <span class="attr">name</span>=<span class="string">"对象在域中的name"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 转发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:forward</span> <span class="attr">page</span>=<span class="string">"转发到的页面"</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 附带的get参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:param</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jsp:forward</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态包含页面 flush为true将包含的页面刷新出去 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">"指定页面"</span> <span class="attr">flush</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:include</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jsp中有-9-个内置对象"><a href="#jsp中有-9-个内置对象" class="headerlink" title="jsp中有 9 个内置对象"></a>jsp中有 9 个内置对象</h2><p>Request、Response<br>Page(this)、PageContext<br>Session、Application<br>Exception( 错误页面使用 )、out( request.getWriter() )<br>config(即ServletConfig)</p><p>PageContext具有获取其他 8 个对象的方法</p><p>所谓9个内置对象，因为Jsp被转换为java代码，所以这9大对象也意味着在Java代码中能取得的对象。</p><p>那么自定义的Servlet中同样可以获取以上9个对象</p><table><thead><tr><th>对象名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>request</td><td>javax.servlet.http.HttpServletRequest</td><td></td></tr><tr><td>response</td><td>javax.servlet.http.HttpServletResponse</td><td></td></tr><tr><td>session</td><td>javax.servlet.http.HttpSession</td><td>由session=”true”开关</td></tr><tr><td>application</td><td>javax.servlet.ServletContext</td><td></td></tr><tr><td>exception</td><td>java.lang.Throwable</td><td>由isErrorPage=”false”开关</td></tr><tr><td>page</td><td>java.lang.Object当前对象this</td><td>当前servlet实例</td></tr><tr><td>config</td><td>javax.servlet.ServletConfig</td><td></td></tr><tr><td>out</td><td>javax.servlet.jsp.JspWriter</td><td>字符输出流，相当于 printWriter对象</td></tr><tr><td>pageContext</td><td>javax.servlet.jsp.PageContext</td></tr></tbody></table><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><p>EL表达式的存在是为了减少 jsp中频繁的调用java对象所产生的复杂语句，将大部分的对象获取和打印精简为一句，实际上底层是对java语法的封装，同时避免了空指针等现象。<br>eg：<br>查找一个存储到了request对象的参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java中的写法</span></span><br><span class="line"></span><br><span class="line">request.setAttribute(name, o);</span><br><span class="line"></span><br><span class="line">Object obj = request.getAttribute(name);</span><br><span class="line"></span><br><span class="line">out.print(obj.xxx);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// el表达式中将直接遍历所有域对象去寻找这个值</span><br><span class="line">$&#123;name[“xxx”]&#125;</span><br><span class="line">$&#123;name.xxxx&#125;</span><br></pre></td></tr></table></figure><p>EL表达式中可以做一些简单的运算操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123; empty XXX &#125; // 是否为空 null / 0</span><br><span class="line">$&#123; empty xxx ? &quot;是&quot; : &quot;否&quot; &#125; // 三项表达式</span><br><span class="line">$&#123; 10+5 &#125; // 逻辑运算等</span><br></pre></td></tr></table></figure><h2 id="EL表达式里有隐藏的-11-个对象"><a href="#EL表达式里有隐藏的-11-个对象" class="headerlink" title="EL表达式里有隐藏的 11 个对象"></a>EL表达式里有隐藏的 11 个对象</h2><p>在EL表达式中同样具有隐藏的对象，与jsp的9大对象不同的是除了pageContext 与java中的pageContext对应外其他均为EL中的map集合</p><table><thead><tr><th>EL隐式对象引用名称</th><th>类型</th><th>JSP内置对象名称</th><th>说明</th></tr></thead><tbody><tr><td>pageContext</td><td>javax.servlet.jsp.PageContext</td><td>pageContext</td><td>一样的</td></tr><tr><td>pageScope</td><td>java.util.Map<string,object></string,object></td><td>没有对应的</td><td>pageContext范围中存放的数据,页面范围</td></tr><tr><td>requestScope</td><td>java.util.Map<string,object></string,object></td><td>没有对应的</td><td>请求范围数据</td></tr><tr><td>sessionScope</td><td>java.util.Map<string,object></string,object></td><td>没有对应的</td><td>会话范围数据</td></tr><tr><td>applicationScope</td><td>java.util.Map<string,object></string,object></td><td>没有对应的</td><td>应用范围数据</td></tr><tr><td>param</td><td>java.util.Map<string,string></string,string></td><td>request.getParameter()</td><td>一个请求参数</td></tr><tr><td>paramValues</td><td>java.util.Map<string,string[]></string,string[]></td><td>request.getParameterValues()</td><td>重名请求参数</td></tr><tr><td>header</td><td>java.util.Map<string,string></string,string></td><td>request.getHeader()</td><td>一个请求消息头</td></tr><tr><td>headerValues</td><td>java.util.Map<string,string[]></string,string[]></td><td>request.getHeaders()</td><td>重名请求消息头</td></tr><tr><td>initParam</td><td>java.util.Map<string,string></string,string></td><td>getServletConfig().getInitParameter()</td><td>web.xml中全局参数</td></tr><tr><td>cookie</td><td>java.util.Map<string,cookie></string,cookie></td><td>request.getCookies()</td><td>key:cookie对象的name值</td></tr></tbody></table><p> <img src="/img/2017-1-17-Jsp的使用/el.jpg" alt="EL表达式" title="el.jpg"></p><p>因此 EL表达式中可以使用 pageContext 获取更多信息，例如：<code>${pageContext.request.contextPath}</code>（同时也证明了 EL表达式是封装了Java代码）</p><h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><p>全称 jsp standard tag library。调用方法<br><code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;</code></p><p><img src="/img/2017-1-17-Jsp的使用/jstl.jpg" alt="jstl 核心库常用方法" title="jstl.jpg"></p><p>ForEach 仿 java增强for循环</p><p>下方items不使用${list} 仍然可以输出，其原因是，该标签只对“ ， ”进行分割</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">bordercolor</span>=<span class="string">"red"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span></span></span><br><span class="line"><span class="tag"><span class="attr">items</span>=<span class="string">"[jstl foreach 100, jstl foreach 300, jstl foreach 100]"</span></span></span><br><span class="line"><span class="tag"><span class="attr">var</span>=<span class="string">"bean"</span> <span class="attr">varStatus</span>=<span class="string">"vs"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;bean &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;list &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;vs &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;vs.index &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;vs.count &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;vs.first &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;vs.last &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ForToken 对指定items按照delims中指定的标识符进行切割。它是上面的拓展，同时也可以切割${list}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c:forTokens</span> <span class="attr">items</span>=<span class="string">"[jstl foreach 100, jstl foreach 300, jstl foreach 100]"</span> <span class="attr">delims</span>=<span class="string">" "</span> <span class="attr">var</span>=<span class="string">"l"</span>&gt;</span></span><br><span class="line">$&#123;l &#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forTokens</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h2&gt;&lt;p&gt;转发：&lt;code&gt;request.getRequestDispatcher(&amp;quot;
      
    
    </summary>
    
      <category term="Java EE" scheme="http://lshao.xyz/categories/Java-EE/"/>
    
    
      <category term="Jsp" scheme="http://lshao.xyz/tags/Jsp/"/>
    
  </entry>
  
  <entry>
    <title>2017-1-9-Path的基本使用</title>
    <link href="http://lshao.xyz/2017/01/09/2017-1-9-Path%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://lshao.xyz/2017/01/09/2017-1-9-Path的基本使用/</id>
    <published>2017-01-09T04:35:44.000Z</published>
    <updated>2018-01-01T11:22:05.533Z</updated>
    
    <content type="html"><![CDATA[<p>Path是自定义View中不可或缺的东西，熟练使用Path可以画出不一般的效果。</p><a id="more"></a><h2 id="path的基本方法"><a href="#path的基本方法" class="headerlink" title="path的基本方法"></a>path的基本方法</h2><p>path.lineTo(x,y); // 从上一个点 移动到某点 ，如果没有上一个点就是从当前的canvas坐标系开始</p><p>path.moveTo(x,y); // 将下一点移动到某点，移动后下一次的起点将是该点，同时该点不会影响上一次的绘画</p><p>path.setLastPoint(x,y); // 设置最后一次操作的点，同样可以改变下一次的起点，但同时会影响上一次的操作</p><p>path.close(); // 闭合path， path会找一条最短路径去闭合当前的曲线 move后的点是不会和之前的点进行闭合的</p><p><img src="/img/2017-1-9-Path的基本使用/move&amp;close.png" alt="move和close同时使用" title="move&amp;close.png"></p><h2 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h2><p>path.quadTo() // 二阶贝塞尔<br>path.cubicTo() // 三阶贝塞尔</p><h2 id="Region判断点击"><a href="#Region判断点击" class="headerlink" title="Region判断点击"></a>Region判断点击</h2><p>Region 中包含一个矩形范围可以用来判断是否包含某点<br>region.contains(point);</p><h2 id="view-pager-indicator的动画"><a href="#view-pager-indicator的动画" class="headerlink" title="view pager indicator的动画"></a>view pager indicator的动画</h2><p>通过将动画存储在集合中，在不同的pager position下创建对应的动画，让viewpager中offset与动画时间形成比例<br><code>animator.setCurrentPlayTime((long) (5000.0F * offset));</code></p><h2 id="Android中的填充模式"><a href="#Android中的填充模式" class="headerlink" title="Android中的填充模式"></a>Android中的填充模式</h2><p>Android中的填充模式有四种，是封装在Path中的一个枚举。</p><table><thead><tr><th>模式</th><th>简介</th></tr></thead><tbody><tr><td>EVEN_ODD</td><td>奇偶规则</td></tr><tr><td>INVERSE_EVEN_ODD</td><td>反奇偶规则</td></tr><tr><td>WINDING</td><td>非零环绕数规则</td></tr><tr><td>INVERSE_WINDING</td><td>反非零环绕数规则</td></tr></tbody></table><p>paint的填充规则为FILL时 path默认的是winding规则。填充时会有一个范围。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Path是自定义View中不可或缺的东西，熟练使用Path可以画出不一般的效果。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://lshao.xyz/categories/Android/"/>
    
    
      <category term="Android，自定义View" scheme="http://lshao.xyz/tags/Android%EF%BC%8C%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>2017-1-1-自定义View高级知识点(二)</title>
    <link href="http://lshao.xyz/2017/01/01/2017-1-1-%E8%87%AA%E5%AE%9A%E4%B9%89View%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86%E7%82%B9(%E4%BA%8C)/"/>
    <id>http://lshao.xyz/2017/01/01/2017-1-1-自定义View高级知识点(二)/</id>
    <published>2017-01-01T14:40:41.000Z</published>
    <updated>2018-01-01T13:53:55.409Z</updated>
    
    <content type="html"><![CDATA[<p>如何使用Canvas操作图片和文字</p><a id="more"></a><h2 id="drawPicture"><a href="#drawPicture" class="headerlink" title="drawPicture()"></a>drawPicture()</h2><p>Picture可以记录下Canvas的绘画过程并重复利用。</p><p>picture的创建过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">      mPicture = <span class="keyword">new</span> Picture();</span><br><span class="line"><span class="comment">// 开始记录</span></span><br><span class="line">      Canvas canvas = mPicture.beginRecording(Integer.MAX_VALUE &gt;&gt; <span class="number">2</span>, Integer.MAX_VALUE &gt;&gt; <span class="number">2</span>);</span><br><span class="line">      canvas.drawRoundRect(<span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>), <span class="number">10</span>, <span class="number">10</span>, mPaint);</span><br><span class="line">      canvas.translate(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">              mPaint.setColor(Color.RED);</span><br><span class="line">              canvas.drawLine(<span class="number">0</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="number">100</span>, mPaint);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              mPaint.setColor(Color.BLUE);</span><br><span class="line">              canvas.drawLine(<span class="number">0</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">100</span>, mPaint);</span><br><span class="line">          &#125;</span><br><span class="line">          canvas.rotate(<span class="number">6</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      canvas.drawCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, mPaint);</span><br><span class="line"><span class="comment">// 结束记录</span></span><br><span class="line">      mPicture.endRecording();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可以通过PictureDrawable的方式设置绘画的区域</span></span><br><span class="line"><span class="comment">      mPictureDrawable = new PictureDrawable(mPicture);</span></span><br><span class="line"><span class="comment">      mPictureDrawable.setBounds(0, 0,320, 480);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>如何将Picture画出来？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 使用Canvas进行绘画</span></span><br><span class="line">canvas.drawPicture(Picture picture);</span><br><span class="line">canvas.drawPicture(Picture picture,RectF dst); <span class="comment">// 画到指定的区域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 通过转化成PictureDrawable的形式进行绘画</span></span><br><span class="line">mPictureDrawable.draw(canvas);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 使用Picture 画到指定的画布上面</span></span><br><span class="line">mPicture.draw(canvas);</span><br></pre></td></tr></table></figure><h2 id="drawBitmap"><a href="#drawBitmap" class="headerlink" title="drawBitmap()"></a>drawBitmap()</h2><p>BitmapFactory获取Bitmap的常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 资源文件(drawable/mipmap/raw):</span></span><br><span class="line">Bitmap bitmap = BitmapFactory.decodeResource(mContext.getResources(),R.raw.bitmap);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源文件(assets):</span></span><br><span class="line">Bitmap bitmap=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    InputStream is = mContext.getAssets().open(<span class="string">"bitmap.png"</span>);</span><br><span class="line">    bitmap = BitmapFactory.decodeStream(is);</span><br><span class="line">    is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内存卡文件:</span></span><br><span class="line">Bitmap bitmap = BitmapFactory.decodeFile(<span class="string">"/sdcard/bitmap.png"</span>);</span><br><span class="line">网络文件:</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取网络流中的Bitmap:</span></span><br><span class="line">Bitmap bitmap = BitmapFactory.decodeStream(is);</span><br><span class="line">is.close();</span><br></pre></td></tr></table></figure><p>canvas画Bitmap的常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawBitmap</span> <span class="params">(Bitmap bitmap, Matrix matrix, Paint paint)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 第二种</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawBitmap</span> <span class="params">(Bitmap bitmap, <span class="keyword">float</span> left, <span class="keyword">float</span> top, Paint paint)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 第三种</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawBitmap</span> <span class="params">(Bitmap bitmap, Rect src, Rect dst, Paint paint)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawBitmap</span> <span class="params">(Bitmap bitmap, Rect src, RectF dst, Paint paint)</span></span></span><br></pre></td></tr></table></figure><p>1.其中<code>public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint)</code>该方法的效果为，将Bitmap上的Src部分画到Canvas上的Dst区域，这里dst和src与在Paint.setXfermode中的意义相同。（这种绘制方式会让src的内容<strong>拉伸</strong>到整个dst区域）</p><p>2.同时通过改变不同的Scr位置可以的到gif的效果。</p><p>效果如下：<br><img src="/img/2017-1-1-自定义View高级知识点(二)/drawBitmapEffect01.gif" alt="DrawBitmap的拉伸效果图" title="drawBitmapEffect01.gif"></p><h2 id="drawText"><a href="#drawText" class="headerlink" title="drawText"></a>drawText</h2><p>其中绘制文字的配置方法均在Paint中：</p><table><thead><tr><th>标题</th><th>相关方法</th><th>作用</th></tr></thead><tbody><tr><td>色彩</td><td>setColor setARGB setAlpha</td><td>设置颜色，透明度</td></tr><tr><td>大小</td><td>setTextSize</td><td>设置文本字体大小</td></tr><tr><td>字体</td><td>setTypeface</td><td>设置或清除字体样式</td></tr><tr><td>样式</td><td>setStyle</td><td>填充(FILL),描边(STROKE),填充加描边(FILL_AND_STROKE)</td></tr><tr><td>对齐</td><td>setTextAlign</td><td>左对齐(LEFT),居中对齐(CENTER),右对齐(RIGHT)</td></tr><tr><td>测量</td><td>measureText</td><td>测量文本大小(注意，请在设置完文本各项参数后调用)</td></tr></tbody></table><p>Canvas中有多个绘制的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawText</span> <span class="params">(String text, <span class="keyword">float</span> x, <span class="keyword">float</span> y, Paint paint)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawText</span> <span class="params">(String text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">float</span> x, <span class="keyword">float</span> y, Paint paint)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawText</span> <span class="params">(CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">float</span> x, <span class="keyword">float</span> y, Paint paint)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawText</span> <span class="params">(<span class="keyword">char</span>[] text, <span class="keyword">int</span> index, <span class="keyword">int</span> count, <span class="keyword">float</span> x, <span class="keyword">float</span> y, Paint paint)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 第二类</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawPosText</span> <span class="params">(String text, <span class="keyword">float</span>[] pos, Paint paint)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawPosText</span> <span class="params">(<span class="keyword">char</span>[] text, <span class="keyword">int</span> index, <span class="keyword">int</span> count, <span class="keyword">float</span>[] pos, Paint paint)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 第三类</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawTextOnPath</span> <span class="params">(String text, Path path, <span class="keyword">float</span> hOffset, <span class="keyword">float</span> vOffset, Paint paint)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawTextOnPath</span> <span class="params">(<span class="keyword">char</span>[] text, <span class="keyword">int</span> index, <span class="keyword">int</span> count, Path path, <span class="keyword">float</span> hOffset, <span class="keyword">float</span> vOffset, Paint paint)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何使用Canvas操作图片和文字&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://lshao.xyz/categories/Android/"/>
    
    
      <category term="自定义View" scheme="http://lshao.xyz/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>2016-12-30-自定义View高级知识点（一）</title>
    <link href="http://lshao.xyz/2016/12/30/2016-12-30-%E8%87%AA%E5%AE%9A%E4%B9%89View%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86%E7%82%B9(%E4%B8%80)/"/>
    <id>http://lshao.xyz/2016/12/30/2016-12-30-自定义View高级知识点(一)/</id>
    <published>2016-12-30T07:02:40.000Z</published>
    <updated>2018-01-01T11:22:05.529Z</updated>
    
    <content type="html"><![CDATA[<p>自定义View中比较重要的一些知识点，本篇主要学习Canvas的一些基本使用。</p><a id="more"></a><h2 id="Canvas可以画的东西"><a href="#Canvas可以画的东西" class="headerlink" title="Canvas可以画的东西"></a>Canvas可以画的东西</h2><table><thead><tr><th>操作类型</th><th>相关API</th><th>备注</th></tr></thead><tbody><tr><td>绘制颜色</td><td>drawColor, drawRGB, drawARGB</td><td>使用单一颜色填充整个画布</td></tr><tr><td>绘制基本形状</td><td>drawPoint, drawPoints, drawLine, drawLines, drawRect, drawRoundRect, drawOval, drawCircle, drawArc</td><td>依次为 点、线、矩形、圆角矩形、椭圆、圆、圆弧</td></tr><tr><td>绘制图片</td><td>drawBitmap, drawPicture</td><td>绘制位图和图片</td></tr><tr><td>绘制文本</td><td>drawText,    drawPosText, drawTextOnPath</td><td>依次为 绘制文字、绘制文字时指定每个文字位置、根据路径绘制文字</td></tr><tr><td>绘制路径</td><td>drawPath</td><td>绘制路径，绘制贝塞尔曲线时也需要用到该函数</td></tr><tr><td>顶点操作</td><td>drawVertices, drawBitmapMesh</td><td>通过对顶点操作可以使图像形变，drawVertices直接对画布作用、 drawBitmapMesh只对绘制的Bitmap作用</td></tr><tr><td>画布剪裁</td><td>clipPath,    clipRect</td><td>设置画布的显示区域</td></tr><tr><td>画布快照</td><td>save, restore, saveLayerXxx, restoreToCount, getSaveCount</td><td>依次为 保存当前状态、 回滚到上一次保存的状态、 保存图层状态、 回滚到指定状态、 获取保存次数</td></tr><tr><td>画布变换</td><td>translate, scale, rotate, skew</td><td>依次为 位移、缩放、 旋转、错切</td></tr><tr><td>Matrix(矩阵)</td><td>getMatrix, setMatrix, concat</td><td>实际画布的位移，缩放等操作的都是图像矩阵Matrix，只不过Matrix比较难以理解和使用，故封装了一些常用的方法。</td></tr></tbody></table><h2 id="颜色混合模式-Alpha通道相关"><a href="#颜色混合模式-Alpha通道相关" class="headerlink" title="颜色混合模式(Alpha通道相关)"></a>颜色混合模式(Alpha通道相关)</h2><p>通过前面介绍我们知道颜色一般都是四个通道(ARGB)的，其中(RGB)控制的是颜色,而A(Alpha)控制的是透明度。</p><p>因为我们的显示屏是没法透明的，因此最终显示在屏幕上的颜色里可以认为没有Alpha通道。Alpha通道主要在两个图像混合的时候生效。</p><p>默认情况下，当一个颜色绘制到Canvas上时的混合模式是这样计算的：</p><p>(RGB通道) 最终颜色 = 绘制的颜色 + (1 - 绘制颜色的透明度) × Canvas上的原有颜色。</p><p>注意：</p><p>1.这里我们一般把每个通道的取值从0(ox00)到255(0xff)映射到0到1的浮点数表示。</p><p>2.这里等式右边的“绘制的颜色”、“Canvas上的原有颜色” 都是经过预乘了自己的Alpha通道的值。如绘制颜色：0x88ffffff，那么参与运算时的每个颜色通道的值不是1.0，而是(1.0 * 0.5333 = 0.5333)。 (其中0.5333 = 0x88/0xff)</p><p>使用这种方式的混合，就会造成后绘制的内容以半透明的方式叠在上面的视觉效果。</p><h2 id="Paint-setXfermode模式"><a href="#Paint-setXfermode模式" class="headerlink" title="Paint.setXfermode模式"></a>Paint.setXfermode模式</h2><p>下表是各个PorterDuff模式的混合计算公式：（D指原本在Canvas上的内容dst，S指绘制输入的内容src，a指alpha通道，c指RGB各个通道）,各种模式如下图所示。</p><p><img src="/img/2016-12-30-自定义View高级知识点(一)/PorterDuffMode.jpg" alt="porterDuff的模式" title="PorterDuffMode.jpg"></p><h2 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure"></a>onMeasure</h2><p>真正进行测量的是 setMeasuredDimension<br>如果对View的宽高进行修改了，不要调用 super.onMeasure( widthMeasureSpec, heightMeasureSpec); 要调用 setMeasuredDimension( widthsize, heightsize); 这个函数。</p><h2 id="paint绘制图形"><a href="#paint绘制图形" class="headerlink" title="paint绘制图形"></a>paint绘制图形</h2><blockquote><p>一个要点：绘制的基本形状由Canvas确定，但绘制出来的颜色,具体效果则由Paint确定<br>STROKE                //描边<br>FILL                  //填充<br>FILL_AND_STROKE       //描边加填充</p></blockquote><p>1.圆角矩形</p><p>利用圆角矩形也可以绘制出椭圆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RectF rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">mPaint.setColor(Color.BLACK);</span><br><span class="line">canvas.drawRect(rectF, mPaint);</span><br><span class="line">mPaint.setColor(Color.RED);</span><br><span class="line">canvas.drawRoundRect(rectF, <span class="number">100</span>, <span class="number">50</span>, mPaint);</span><br></pre></td></tr></table></figure><p>2.椭圆</p><p>椭圆绘制可以理解为做一个矩形的内切圆，如果这是一个正方形那么绘制出来的就是一个圆形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RectF rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">mPaint.setColor(Color.BLACK);</span><br><span class="line">canvas.drawOval(rectF, mPaint);</span><br></pre></td></tr></table></figure><p>3.扇形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drawArc(RectF oval, <span class="function"><span class="keyword">float</span> <span class="title">startAngle</span><span class="params">(开始角度<span class="number">0</span><span class="number">-360</span>)</span>, <span class="keyword">float</span> <span class="title">sweepAngle</span><span class="params">(扫过角度<span class="number">0</span><span class="number">-360</span>)</span>, <span class="keyword">boolean</span> <span class="title">useCenter</span><span class="params">(是否连接圆心)</span>,Paint paint)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用中心</span></span><br><span class="line">RectF rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">mPaint.setStyle(Paint.Style.FILL_AND_STROKE); </span><br><span class="line">mPaint.setColor(Color.GRAY);</span><br><span class="line">canvas.drawRect(rectF, mPaint);</span><br><span class="line">mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">mPaint.setColor(Color.BLACK);</span><br><span class="line">canvas.drawArc(rectF, <span class="number">0</span>, <span class="number">90</span>, <span class="keyword">true</span>, mPaint);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用中心</span></span><br><span class="line">rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">300</span>, <span class="number">200</span>, <span class="number">400</span>);</span><br><span class="line">mPaint.setStyle(Paint.Style.FILL_AND_STROKE); <span class="comment">// 填充 并描边</span></span><br><span class="line">mPaint.setColor(Color.GRAY);</span><br><span class="line">canvas.drawRect(rectF, mPaint);</span><br><span class="line">mPaint.setStyle(Paint.Style.STROKE); <span class="comment">// 仅描边</span></span><br><span class="line">mPaint.setColor(Color.RED);</span><br><span class="line">canvas.drawArc(rectF, <span class="number">0</span>, -<span class="number">90</span>, <span class="keyword">false</span>, mPaint);</span><br></pre></td></tr></table></figure><p><img src="/img/2016-12-30-自定义View高级知识点(一)/drawArc.png" alt="扇形" title="drawArc.png"></p><p>4.画一个圆饼图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PieChartView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Percent&gt; mPercentList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PieChartView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PieChartView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PieChartView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);</span><br><span class="line">        mPaint.setStrokeCap(Paint.Cap.ROUND);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        mPercentList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        mPercentList.add(<span class="keyword">new</span> Percent(<span class="string">"1"</span>, <span class="number">0.4f</span>, Color.WHITE));</span><br><span class="line">        mPercentList.add(<span class="keyword">new</span> Percent(<span class="string">"2"</span>, <span class="number">0.4f</span>, Color.BLUE));</span><br><span class="line">        mPercentList.add(<span class="keyword">new</span> Percent(<span class="string">"3"</span>, <span class="number">0.2f</span>, Color.RED));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        RectF rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">        canvas.drawOval(rectF, mPaint);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> surplus = <span class="number">1.0f</span>; <span class="comment">// 剩余的范围</span></span><br><span class="line">        <span class="keyword">float</span> startAngle = <span class="number">0</span>;</span><br><span class="line">        Percent percent;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = mPercentList.size(); i &lt; size; i++) &#123;</span><br><span class="line">            percent = mPercentList.get(i);</span><br><span class="line">            <span class="keyword">if</span> (percent.percent &lt;= surplus) &#123;</span><br><span class="line">                surplus -= percent.percent;</span><br><span class="line">                startAngle += percent.drawArc(mPaint, canvas, startAngle, rectF);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 采用封装的思想</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Percent</span> </span>&#123;</span><br><span class="line">        String tag;</span><br><span class="line">        <span class="keyword">float</span> percent;</span><br><span class="line">        <span class="keyword">int</span> color;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Percent</span><span class="params">(String tag, <span class="keyword">float</span> percent, <span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.tag = tag;</span><br><span class="line">            <span class="keyword">this</span>.percent = percent;</span><br><span class="line">            <span class="keyword">this</span>.color = color;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 绘制 这个百分比</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> paint</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> canvas</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> startAngle</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> rectF</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 返回绘制的角度大小</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">drawArc</span><span class="params">(Paint paint, Canvas canvas, <span class="keyword">float</span> startAngle, RectF rectF)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> oldColor = paint.getColor();</span><br><span class="line">            Paint.Style oldStyle = paint.getStyle();</span><br><span class="line"></span><br><span class="line">            paint.setColor(color);</span><br><span class="line">            paint.setStyle(Paint.Style.FILL);</span><br><span class="line"></span><br><span class="line">            canvas.drawArc(rectF, startAngle, <span class="number">360</span> * percent, <span class="keyword">true</span>, paint);</span><br><span class="line"></span><br><span class="line">            paint.setColor(oldColor);</span><br><span class="line">            paint.setStyle(oldStyle);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">360</span> * percent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/2016-12-30-自定义View高级知识点(一)/pieChart.png" alt="圆饼图" title="pieChart.png"></p><h2 id="操作画布"><a href="#操作画布" class="headerlink" title="操作画布"></a>操作画布</h2><p>操作画布，操作的都是坐标系，是对当前坐标系进行移动、旋转、缩放、错切等操作</p><p>操作画布只会影响接下来的绘画，而不会影响之前已经绘画完成的图像</p><p>1.移动画布</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移动画布</span></span><br><span class="line">canvas.translate(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line">canvas.drawCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, mPaint);</span><br><span class="line">canvas.drawCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">180</span>, mPaint);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转画布 并画线</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36</span>; i++) &#123;</span><br><span class="line">canvas.drawLine(<span class="number">0</span>, <span class="number">180</span>, <span class="number">0</span>, <span class="number">200</span>, mPaint);</span><br><span class="line">canvas.rotate(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/2016-12-30-自定义View高级知识点(一)/circleView.png" alt="通过旋转画布实现两圆之间的连线" title="circleView.png"></p><p>2.旋转画布</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">float</span> degrees)</span> </span>&#123;</span><br><span class="line">    native_rotate(mNativeCanvasWrapper, degrees);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 相对某点缩放</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">float</span> degrees, <span class="keyword">float</span> px, <span class="keyword">float</span> py)</span> </span>&#123;</span><br><span class="line">    translate(px, py);</span><br><span class="line">    rotate(degrees);</span><br><span class="line">    translate(-px, -py);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下图为相对某点进行缩放，图中的绘制顺序 1.红 2.黄 3.蓝 4.绿</p><p><img src="/img/2016-12-30-自定义View高级知识点(一)/scale.png" alt="相对某点缩放" title="scale.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">RectF rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">mPaint.setColor(Color.RED);</span><br><span class="line">canvas.drawRect(rectF, mPaint);</span><br><span class="line"></span><br><span class="line">canvas.translate(<span class="number">200</span>,<span class="number">200</span>); <span class="comment">// 先将坐标系O移动到相对点P</span></span><br><span class="line">mPaint.setColor(Color.YELLOW);</span><br><span class="line">canvas.drawRect(rectF, mPaint);</span><br><span class="line"></span><br><span class="line">canvas.rotate(<span class="number">90</span>);<span class="comment">// 在相对点P处将坐标系O进行旋转 O--&gt;o P--&gt;p</span></span><br><span class="line">mPaint.setColor(Color.BLUE);</span><br><span class="line">canvas.drawRect(rectF, mPaint);</span><br><span class="line"></span><br><span class="line">canvas.translate(-<span class="number">200</span>,-<span class="number">200</span>);<span class="comment">// 将旋转后的坐标系o中的p与P对齐，让以后的操作都仍然相对于P点</span></span><br><span class="line">mPaint.setColor(Color.GREEN);</span><br><span class="line">canvas.drawRect(rectF, mPaint);</span><br></pre></td></tr></table></figure><p>3.缩放画布</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scale</span><span class="params">(<span class="keyword">float</span> sx, <span class="keyword">float</span> sy)</span> </span>&#123;</span><br><span class="line">    native_scale(mNativeCanvasWrapper, sx, sy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 相对于某点进行缩放，其相对原理与相对某点旋转相同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scale</span><span class="params">(<span class="keyword">float</span> sx, <span class="keyword">float</span> sy, <span class="keyword">float</span> px, <span class="keyword">float</span> py)</span> </span>&#123;</span><br><span class="line">    translate(px, py);</span><br><span class="line">    scale(sx, sy);</span><br><span class="line">    translate(-px, -py);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缩放比例(sx,sy)取值范围详解：</p><table><thead><tr><th>取值范围(n)</th><th>说明</th></tr></thead><tbody><tr><td>[-∞, -1)</td><td>先根据缩放中心放大n倍，再根据中心轴进行翻转</td></tr><tr><td>-1</td><td>根据缩放中心轴进行翻转</td></tr><tr><td>(-1, 0)</td><td>先根据缩放中心缩小到n，再根据中心轴进行翻转</td></tr><tr><td>0</td><td>不会显示，若sx为0，则宽度为0，不会显示，sy同理</td></tr><tr><td>(0, 1)</td><td>根据缩放中心缩小到n</td></tr><tr><td>1</td><td>没有变化</td></tr><tr><td>(1, +∞)</td><td>根据缩放中心放大n倍</td></tr></tbody></table><p>负值时，坐标系方向取反，scale(1,-1)这个操作将使得坐标系变为数学中常用坐标系</p><p>旋转，缩放，位移三者应用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移动画布</span></span><br><span class="line">canvas.translate(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">mPaint.setColor(Color.BLUE);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">canvas.drawCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, mPaint);</span><br><span class="line">canvas.drawCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">180</span>, mPaint);</span><br><span class="line">canvas.rotate(j);</span><br><span class="line"><span class="comment">// 旋转画布 并画线![enter description here][6]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">float</span> i = j; i &lt;= <span class="number">360f</span>; i += <span class="number">10f</span>) &#123;</span><br><span class="line">canvas.drawLine(<span class="number">0</span>, <span class="number">180</span>, <span class="number">0</span>, <span class="number">200</span>, mPaint);</span><br><span class="line">canvas.rotate(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">canvas.scale(<span class="number">0.75f</span>, <span class="number">0.75f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/img/2016-12-30-自定义View高级知识点(一)/scale_ratote_translate.png" alt="nothing" title="scale_ratote_translate.png"></p><p>4.错切（skew）</p><blockquote><p>错切是在某方向上，按照一定的比例对图形的每个点到某条平行于该方向的直线的有向距离做放缩得到的平面图形。(度娘)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">skew</span><span class="params">(<span class="keyword">float</span> sx, <span class="keyword">float</span> sy)</span> </span>&#123;</span><br><span class="line">    native_skew(mNativeCanvasWrapper, sx, sy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">canvas.translate(getWidth()/<span class="number">2</span>,getHeight()/<span class="number">2</span>);</span><br><span class="line">RectF rectF = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">mPaint.setColor(Color.RED);</span><br><span class="line">canvas.drawRect(rectF, mPaint);</span><br><span class="line"></span><br><span class="line">canvas.skew(-<span class="number">1</span>,<span class="number">0</span>); <span class="comment">// 向左倾斜45度</span></span><br><span class="line">canvas.drawRect(rectF, mPaint);</span><br></pre></td></tr></table></figure></p><p>效果图：</p><p><img src="/img/2016-12-30-自定义View高级知识点(一)/skew.png" alt="错切" title="skew.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自定义View中比较重要的一些知识点，本篇主要学习Canvas的一些基本使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://lshao.xyz/categories/Android/"/>
    
    
      <category term="自定义View" scheme="http://lshao.xyz/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>MD控件的使用</title>
    <link href="http://lshao.xyz/2016/12/24/2016-12-24-MD%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://lshao.xyz/2016/12/24/2016-12-24-MD控件的使用/</id>
    <published>2016-12-23T20:02:36.000Z</published>
    <updated>2018-01-01T11:22:05.529Z</updated>
    
    <content type="html"><![CDATA[<p>Material Desgin风格控件的使用。Google官方design support包里的新控件，虽然好看，但是用起来还真不是一次就能搞定的。</p><a id="more"></a><h3 id="layout-scrollFlags属性"><a href="#layout-scrollFlags属性" class="headerlink" title="layout_scrollFlags属性"></a>layout_scrollFlags属性</h3><p>AppBarLayout的子布局有5种滚动标识(就是上面代码CollapsingToolbarLayout中配置的app:layout_scrollFlags属性)：</p><p>1、scroll:将此布局和滚动时间关联。这个标识要设置在其他标识之前，没有这个标识则布局不会滚动且其他标识设置无效。</p><p>2、enterAlways:任何向下滚动操作都会使此布局可见。这个标识通常被称为“快速返回”模式。</p><p>3、enterAlwaysCollapsed：假设你定义了一个最小高度（minHeight）同时enterAlways也定义了，那么view将在到达这个最小高度的时候开始显示，并且从这个时候开始慢慢展开，当滚动到顶部的时候展开完。</p><p>4、exitUntilCollapsed：当你定义了一个minHeight，此布局将在滚动到达这个最小高度的时候折叠。</p><p>5、snap:当一个滚动事件结束，如果视图是部分可见的，那么它将被滚动到收缩或展开。例如，如果视图只有底部25%显示，它将折叠。相反，如果它的底部75%可见，那么它将完全展开。</p><h3 id="fitSystemWindow"><a href="#fitSystemWindow" class="headerlink" title="fitSystemWindow"></a>fitSystemWindow</h3><p>以CoordinatorLayout为根布局时且设置 fit = true 控件会自己适应并填充状态栏</p><p>而普通的控件 fit = true 则会与状态栏间隔，fit = false 则会跑到状态中去<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span> （5.0） 该属性 不会让布局内容填充到状态栏中 就算设置fitSystemWindow = false</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span> （4.4属性） 该属性会让布局内容填充到状态栏中 不想填充到状态栏的控件设置 fit = true ； 想填充到状态栏的设置 fit = false （4.4中填充到状态栏就看不到控件了）</span><br></pre></td></tr></table></figure></p><h3 id="ActionBar-颜色-对应的主题"><a href="#ActionBar-颜色-对应的主题" class="headerlink" title="ActionBar 颜色 对应的主题"></a>ActionBar 颜色 对应的主题</h3><p>黑字 黑图标： app:theme=”@style/Theme.AppCompat.Light”</p><p>白字 白图标： app:theme=”@style/Theme.AppCompat”</p><h3 id="PopuWindow-颜色-对应的主题"><a href="#PopuWindow-颜色-对应的主题" class="headerlink" title="PopuWindow 颜色 对应的主题"></a>PopuWindow 颜色 对应的主题</h3><p>黑底 白字：app:popupTheme=”@style/ThemeOverlay.AppCompat.Dark”</p><p>白底 黑字：app:popupTheme=”@style/ThemeOverlay.AppCompat.Light”</p><h3 id="CollapseToolBarLayout-的使用"><a href="#CollapseToolBarLayout-的使用" class="headerlink" title="CollapseToolBarLayout 的使用"></a>CollapseToolBarLayout 的使用</h3><p>CollapseToolBarLayout中 ：<br>1、toolbar 要写在最下面 否则会有一系列失效</p><p>2、同时配置的ImageView要 fit = true才会填充状态栏</p><p>3、toolBar不随折叠变换 设置 collapsing.setTitleEnabled(false); 或 app:titleEnabled=”false” </p><p>4、title 改变文字 文字可折叠时通过collapse设置 不可折叠时通过toolbar先app:title=”tool bar 先设置一次 才可以写字” 然后才可以设置文字</p><p>5、折叠后内容的颜色 app:contentScrim=”#FF4081” 状态栏的颜色 app:statusBarScrim=”@android:color/transparent”</p><p>如下是一个标准的配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"260dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span><span class="attr">------</span>》》》<span class="attr">fit</span>后填充状态栏</span></span><br><span class="line"><span class="tag">        <span class="attr">app:theme</span>=<span class="string">"@style/Theme.AppCompat"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/collapsing"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:contentScrim</span>=<span class="string">"#FF4081"</span> <span class="attr">----------</span>》》》折叠后颜色</span></span><br><span class="line"><span class="tag"><span class="attr">app:statusBarScrim</span>=<span class="string">"@android:color/transparent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:titleEnabled</span>=<span class="string">"false"</span><span class="attr">------------</span>》》》<span class="attr">title</span>不伸缩</span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|snap|exitUntilCollapsed"</span> <span class="attr">----</span>》》》滑动类型</span></span><br><span class="line"><span class="tag">            &gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span><span class="attr">------</span>》》》<span class="attr">fit</span>后图片填充状态栏</span></span><br><span class="line"><span class="tag">                <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/test_pic"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span><span class="attr">----</span>》》》缩放模式</span></span><br><span class="line"><span class="tag">                <span class="attr">app:layout_collapseParallaxMultiplier</span>=<span class="string">"0.7"</span><span class="attr">---</span>》》》缩放比例</span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar-------》》》toolbar要写在最下面</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:theme</span>=<span class="string">"@style/Theme.AppCompat"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:title</span>=<span class="string">"tool bar 先设置一次 才可以写字"</span> <span class="attr">----</span>》》》必须先设置一次</span></span><br><span class="line"><span class="tag">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span><span class="attr">-----</span>》》》固定模式</span></span><br><span class="line"><span class="tag">                <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果图：<img src="/img/collapselayout.gif" width="320" height="480"></p><h3 id="CoordinatorLayout-是怎么做到适应状态栏的？"><a href="#CoordinatorLayout-是怎么做到适应状态栏的？" class="headerlink" title="CoordinatorLayout 是怎么做到适应状态栏的？"></a>CoordinatorLayout 是怎么做到适应状态栏的？</h3><p>构造函数中调用 setupForInsets</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CoordinatorLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">      mStatusBarBackground = a.getDrawable(R.styleable.CoordinatorLayout_statusBarBackground);<span class="comment">//-----》》》获取背景drawable</span></span><br><span class="line">      </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">      setupForInsets();<span class="comment">//-------------》》》》调用</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">super</span>.setOnHierarchyChangeListener(<span class="keyword">new</span> HierarchyChangeListener());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>根据是否fitsSystemWindows来设置不同的 ui标签<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupForInsets</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">21</span>) &#123;<span class="comment">// ----》》》5.0一下不适用</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ViewCompat.getFitsSystemWindows(<span class="keyword">this</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mApplyWindowInsetsListener == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mApplyWindowInsetsListener =</span><br><span class="line">                    <span class="keyword">new</span> android.support.v4.view.OnApplyWindowInsetsListener() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> WindowInsetsCompat <span class="title">onApplyWindowInsets</span><span class="params">(View v,</span></span></span><br><span class="line"><span class="function"><span class="params">                                WindowInsetsCompat insets)</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> setWindowInsets(insets);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// First apply the insets listener</span></span><br><span class="line">        ViewCompat.setOnApplyWindowInsetsListener(<span class="keyword">this</span>, mApplyWindowInsetsListener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now set the sys ui flags to enable us to lay out in the window insets</span></span><br><span class="line">        setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE</span><br><span class="line">                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);<span class="comment">//----》》》设置UI标签</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ViewCompat.setOnApplyWindowInsetsListener(<span class="keyword">this</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="水波纹特效"><a href="#水波纹特效" class="headerlink" title="水波纹特效"></a>水波纹特效</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:color</span>=<span class="string">"@color/touch_effect"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/mask"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@android:color/white"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="水波纹揭示效果"><a href="#水波纹揭示效果" class="headerlink" title="水波纹揭示效果"></a>水波纹揭示效果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ViewAnimationUtils.createCircularReveal(View view, <span class="keyword">int</span> centerX, <span class="keyword">int</span> centerY, <span class="keyword">float</span> startRadius, <span class="keyword">float</span> endRadius)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Material Desgin风格控件的使用。Google官方design support包里的新控件，虽然好看，但是用起来还真不是一次就能搞定的。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://lshao.xyz/categories/Android/"/>
    
    
      <category term="android" scheme="http://lshao.xyz/tags/android/"/>
    
      <category term="Material Design" scheme="http://lshao.xyz/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>SurfaceView的使用</title>
    <link href="http://lshao.xyz/2016/11/13/2016-11-13-SurfaceView%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://lshao.xyz/2016/11/13/2016-11-13-SurfaceView的使用/</id>
    <published>2016-11-12T18:12:08.000Z</published>
    <updated>2018-01-01T11:22:05.529Z</updated>
    
    <content type="html"><![CDATA[<p>SurfaceView的基本逻辑<br><a id="more"></a></p><h2 id="SurfaceView"><a href="#SurfaceView" class="headerlink" title="SurfaceView"></a>SurfaceView</h2><p>主要的类：</p><blockquote><p>SurfaceView 展示内容的地方</p><p>↓    getHolder()</p><p>SurfaceHolder 展示的内容</p><p>↓    addCallback() → getSurface() 获取 surface</p><p>SurfaceHolder.Callback</p><p>↓    线程需要在surfaceCreate时创建，surfaceDestroy停止</p><p>Thread 持续展示内容的工人</p></blockquote><h2 id="Surface"><a href="#Surface" class="headerlink" title="Surface"></a>Surface</h2><blockquote><p>lockCanvas 锁定画布 保证线程安全</p><p>↓ 开启线程</p><p>绘制界面 </p><p>unlockCanvasAndPost 解锁画布</p><p>↓ 关闭线程</p></blockquote><h2 id="绘制背景"><a href="#绘制背景" class="headerlink" title="绘制背景"></a>绘制背景</h2><p><code>每次一个对象重新绘制位置的时候都会造成叠加的效果</code>，<br>如何解决：是通过不断重新绘制背景来覆盖原来的图片</p><h2 id="Rect-矩形类"><a href="#Rect-矩形类" class="headerlink" title="Rect 矩形类"></a>Rect 矩形类</h2><p>android提供的范围类，可以检测是否包含某点</p><h2 id="Cocos2dx"><a href="#Cocos2dx" class="headerlink" title="Cocos2dx"></a>Cocos2dx</h2><p>CCGLSurfaceView surfaceview类</p><p>CCDirector 导演类 （单例的）CCDirector.sharedDirector</p><p>CCScene 场景类 CCScene.node() 展示节点的根节点</p><p>CCLayer 图层类 CCSense.addChild() 添加图层</p><p>CCSprite 精灵类</p><p>默认图片放在asset中</p><p>坐标都是左下角开始的正常坐标系，Sprite的默认锚点在中间点<br>默认从锚点绘制</p><p>director可以和activity生命周期绑定，手动绑定(在各个周期内绑定)</p><h2 id="layer处理触摸事件"><a href="#layer处理触摸事件" class="headerlink" title="layer处理触摸事件"></a>layer处理触摸事件</h2><blockquote><p>都是在子线程中进行的，不能进行UI操作，当然surfaceView可以</p></blockquote><p>layer事件中开启<br>setIsTouchEnabled(true);触摸事件开关</p><p>ccTOuchedBegan(event);按下事件</p><p>andorid坐标系的点转换为cocos中的点converTouchToNodeSpace</p><h2 id="CCNode"><a href="#CCNode" class="headerlink" title="CCNode"></a>CCNode</h2><p>获取单元的范围:CGRect rect = ccNode.getBoundingBox();</p><p>获取单元的大小：CGSize size = ccNode.getBoundingBox().size;</p><p>将Android的MotionEvent转换成 Cocos2d上的点<br>CGPoint cgPoint = convertTouchToNodeSpace(event);</p><h2 id="CCAction"><a href="#CCAction" class="headerlink" title="CCAction"></a>CCAction</h2><p>动作</p><p>CCSequence <code>串行动作</code> CCSequence.action(xx,xx);<br>CCSpawn <code>并行动作</code> </p><p>CCRepeatForever 重复的动作，用于包装Action</p><p>CCEaseIn 具备加速的动作，用于包装Action</p><p>CCLabel 专门显示文字的sprite</p><p>ccColor3B 颜色渐变的action cc3(r,g,b);</p><p>xxxBy 事件都重写了reserver 而 xxxTo都没有重写reserver会报异常。例如：CCTintTo CCRotateTo CCJumpTo</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SurfaceView的基本逻辑&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://lshao.xyz/categories/Android/"/>
    
    
      <category term="Android" scheme="http://lshao.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android调H5</title>
    <link href="http://lshao.xyz/2016/11/07/2016-11-07-Android%E8%B0%83H5/"/>
    <id>http://lshao.xyz/2016/11/07/2016-11-07-Android调H5/</id>
    <published>2016-11-06T18:21:05.000Z</published>
    <updated>2018-01-01T11:22:05.529Z</updated>
    
    <content type="html"><![CDATA[<p>如何使用Android中的WebView与JavaScript交互？</p><a id="more"></a><h1 id="Android调H5"><a href="#Android调H5" class="headerlink" title="Android调H5"></a>Android调H5</h1><p>1.WebView</p><blockquote><p>可以加载链接，也可以加载本地网页<br>加载assets文件夹中的网页：loadUrl(“file:///android_asset/name”)</p></blockquote><p>2.java调js</p><blockquote><p>注意参数加‘’<br>“javascript:jsName(‘“+params+”‘)”–&gt;这是js的一种写法<br>webView.loadUrl(“javascript:jsName(‘“+params+”‘)”);</p></blockquote><p>3.js调java</p><blockquote><p>1.android<br>声明js对应接口，webWiew.addJavascriptInterface(new Class(), “字段名”)<br>字段对应的android类中方法名需要添加注解@JavascriptInterface<br>2.js<br>window.字段名.方法名</p></blockquote><h1 id="ScrollView结合ListView使用"><a href="#ScrollView结合ListView使用" class="headerlink" title="ScrollView结合ListView使用"></a>ScrollView结合ListView使用</h1><p>结合使用会造成listview只显示一行，因为listview需要重新测量高度，两种方法进行测量。</p><p>1、重新测量每一项高度+divider的总高度最后得到精确值，<br>2、重写onMeasure方法，直接设置高度测量规则为，<br>    MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE&gt;&gt;2,AT_MOST);<br>即给一个非常大的值让其自己适配</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何使用Android中的WebView与JavaScript交互？&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://lshao.xyz/categories/Android/"/>
    
    
      <category term="Android" scheme="http://lshao.xyz/tags/Android/"/>
    
      <category term="WebView" scheme="http://lshao.xyz/tags/WebView/"/>
    
      <category term="Js" scheme="http://lshao.xyz/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>python 入门基本点</title>
    <link href="http://lshao.xyz/2016/10/28/2016-10-28-python%E5%85%A5%E9%97%A8/"/>
    <id>http://lshao.xyz/2016/10/28/2016-10-28-python入门/</id>
    <published>2016-10-28T07:18:18.000Z</published>
    <updated>2018-01-01T15:05:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些Python的基本用法，目的是看懂它~~</p><a id="more"></a><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>Python文件中输出中文以及中文注释，需要添加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment"># 你必须声明文件的编码，方可输出中文以及中文的注释</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'i\'m li'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"i'm shi"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"I come from \n\</span></span><br><span class="line"><span class="string">China"</span>  <span class="comment"># Write as this syntax,if you want change line</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"""I'm li shi hao.</span></span><br><span class="line"><span class="string">You see!I'm Chinese!"""</span>  <span class="comment"># This will get a new line</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"you can compare next statement different"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"1\n2\n3\n4\t5\t6\t"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">r"1\n2\n3\n4\t5\t6\t"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">u"厉害了 word中国！"</span></span><br></pre></td></tr></table></figure></p><p>注意上面每一个print就自动换行一次</p><h2 id="不同的运算符"><a href="#不同的运算符" class="headerlink" title="不同的运算符"></a>不同的运算符</h2><p>运算符<br>**幂运算</p><p>2**2 = 4 </p><p>/ 除法运算(带小数) //除法取整 %取余</p><p>and 逻辑与 not逻辑非 or逻辑或 同样都是短路的</p><p>~x 翻转x 即-(x+1)</p><h2 id="严格的缩进控制代码的区块"><a href="#严格的缩进控制代码的区块" class="headerlink" title="严格的缩进控制代码的区块"></a>严格的缩进控制代码的区块</h2><p>python中通过 : 来表明下面将是程序块<br>通过制表符的间隔对齐范围，表示程序块范围</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'123'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'321'</span></span><br><span class="line"><span class="comment">#看到上面的部分代表while的程序块，下面部分代表这while以外的部分</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'000'</span></span><br></pre></td></tr></table></figure><h2 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h2><p>def关键字表示定义一个方法<br>pythond也有类似三元表达式 true_part if condition else false_part<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_num</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"最大的是："</span>, a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure></p><h2 id="方法中默认参数"><a href="#方法中默认参数" class="headerlink" title="方法中默认参数"></a>方法中默认参数</h2><p>如下方法的参数中，带有默认值的参数只能放在其他参数的后面才可以使用,<br>原因是：当你在调用方法是第一个参数往往是赋值给第一个形参的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(arg0,arg1=<span class="number">1</span>)</span>:</span></span><br><span class="line"><span class="keyword">print</span> arg0*arg1</span><br></pre></td></tr></table></figure><h2 id="from-xxx-import-xxx"><a href="#from-xxx-import-xxx" class="headerlink" title="from xxx import xxx"></a>from xxx import xxx</h2><p>从某个module中导入参数，这样就不必每次都写xxx.yyy</p><p>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br></pre></td></tr></table></figure></p><p>那么以后的argv就可以直接使用，但这将占用一个变量名</p><h2 id="主modul名称"><a href="#主modul名称" class="headerlink" title="主modul名称"></a>主modul名称</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># __name__是每一个module在执行是的名称</span></span><br><span class="line"><span class="comment"># __main__是主线程的名称</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"I called by myself"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"who called me?"</span>, __name__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moduleM</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Hi! I'm module"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name = <span class="string">"using"</span></span><br></pre></td></tr></table></figure><h2 id="dir查看命令"><a href="#dir查看命令" class="headerlink" title="dir查看命令"></a>dir查看命令</h2><p>dir()命令在命令行中使用，会打印对应module中的属性列表,方法列表<br>dir(xxx)可以打印指定module的信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## del删除命令</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    <span class="keyword">print</span> x</span><br><span class="line">    <span class="keyword">del</span> x</span><br><span class="line">    <span class="comment"># del method 不能在方法中删除方法</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">"test del"</span></span><br><span class="line">method()</span><br><span class="line"></span><br><span class="line"><span class="comment"># del method # 可以删除变量这样这个变量，他也可以删除一个方法就像没有存在过一样</span></span><br><span class="line"><span class="comment"># method() # 该句将出错因为x已经被删除了</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些Python的基本用法，目的是看懂它~~&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://lshao.xyz/categories/python/"/>
    
    
      <category term="python" scheme="http://lshao.xyz/tags/python/"/>
    
  </entry>
  
</feed>
